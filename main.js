/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/form-data/lib/browser.js"(exports, module2) {
    module2.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// node_modules/obsidian-daily-notes-interface/dist/main.js
var require_main = __commonJS({
  "node_modules/obsidian-daily-notes-interface/dist/main.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var obsidian = require("obsidian");
    var DEFAULT_DAILY_NOTE_FORMAT = "YYYY-MM-DD";
    var DEFAULT_WEEKLY_NOTE_FORMAT = "gggg-[W]ww";
    var DEFAULT_MONTHLY_NOTE_FORMAT = "YYYY-MM";
    var DEFAULT_QUARTERLY_NOTE_FORMAT = "YYYY-[Q]Q";
    var DEFAULT_YEARLY_NOTE_FORMAT = "YYYY";
    function shouldUsePeriodicNotesSettings(periodicity) {
      var _a, _b;
      const periodicNotes = window.app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a[periodicity]) == null ? void 0 : _b.enabled);
    }
    function getDailyNoteSettings2() {
      var _a, _b, _c, _d;
      try {
        const { internalPlugins, plugins } = window.app;
        if (shouldUsePeriodicNotesSettings("daily")) {
          const { format: format2, folder: folder2, template: template2 } = ((_b = (_a = plugins.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.daily) || {};
          return {
            format: format2 || DEFAULT_DAILY_NOTE_FORMAT,
            folder: (folder2 == null ? void 0 : folder2.trim()) || "",
            template: (template2 == null ? void 0 : template2.trim()) || ""
          };
        }
        const { folder, format, template } = ((_d = (_c = internalPlugins.getPluginById("daily-notes")) == null ? void 0 : _c.instance) == null ? void 0 : _d.options) || {};
        return {
          format: format || DEFAULT_DAILY_NOTE_FORMAT,
          folder: (folder == null ? void 0 : folder.trim()) || "",
          template: (template == null ? void 0 : template.trim()) || ""
        };
      } catch (err) {
        console.info("No custom daily note settings found!", err);
      }
    }
    function getWeeklyNoteSettings() {
      var _a, _b, _c, _d, _e, _f, _g;
      try {
        const pluginManager = window.app.plugins;
        const calendarSettings = (_a = pluginManager.getPlugin("calendar")) == null ? void 0 : _a.options;
        const periodicNotesSettings = (_c = (_b = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _b.settings) == null ? void 0 : _c.weekly;
        if (shouldUsePeriodicNotesSettings("weekly")) {
          return {
            format: periodicNotesSettings.format || DEFAULT_WEEKLY_NOTE_FORMAT,
            folder: ((_d = periodicNotesSettings.folder) == null ? void 0 : _d.trim()) || "",
            template: ((_e = periodicNotesSettings.template) == null ? void 0 : _e.trim()) || ""
          };
        }
        const settings = calendarSettings || {};
        return {
          format: settings.weeklyNoteFormat || DEFAULT_WEEKLY_NOTE_FORMAT,
          folder: ((_f = settings.weeklyNoteFolder) == null ? void 0 : _f.trim()) || "",
          template: ((_g = settings.weeklyNoteTemplate) == null ? void 0 : _g.trim()) || ""
        };
      } catch (err) {
        console.info("No custom weekly note settings found!", err);
      }
    }
    function getMonthlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("monthly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.monthly) || {};
        return {
          format: settings.format || DEFAULT_MONTHLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom monthly note settings found!", err);
      }
    }
    function getQuarterlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("quarterly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.quarterly) || {};
        return {
          format: settings.format || DEFAULT_QUARTERLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom quarterly note settings found!", err);
      }
    }
    function getYearlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("yearly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.yearly) || {};
        return {
          format: settings.format || DEFAULT_YEARLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom yearly note settings found!", err);
      }
    }
    function join(...partSegments) {
      let parts = [];
      for (let i = 0, l = partSegments.length; i < l; i++) {
        parts = parts.concat(partSegments[i].split("/"));
      }
      const newParts = [];
      for (let i = 0, l = parts.length; i < l; i++) {
        const part = parts[i];
        if (!part || part === ".")
          continue;
        else
          newParts.push(part);
      }
      if (parts[0] === "")
        newParts.unshift("");
      return newParts.join("/");
    }
    function basename(fullPath) {
      let base = fullPath.substring(fullPath.lastIndexOf("/") + 1);
      if (base.lastIndexOf(".") != -1)
        base = base.substring(0, base.lastIndexOf("."));
      return base;
    }
    async function ensureFolderExists(path) {
      const dirs = path.replace(/\\/g, "/").split("/");
      dirs.pop();
      if (dirs.length) {
        const dir = join(...dirs);
        if (!window.app.vault.getAbstractFileByPath(dir)) {
          await window.app.vault.createFolder(dir);
        }
      }
    }
    async function getNotePath(directory, filename) {
      if (!filename.endsWith(".md")) {
        filename += ".md";
      }
      const path = obsidian.normalizePath(join(directory, filename));
      await ensureFolderExists(path);
      return path;
    }
    async function getTemplateInfo(template) {
      const { metadataCache, vault } = window.app;
      const templatePath = obsidian.normalizePath(template);
      if (templatePath === "/") {
        return Promise.resolve(["", null]);
      }
      try {
        const templateFile = metadataCache.getFirstLinkpathDest(templatePath, "");
        const contents = await vault.cachedRead(templateFile);
        const IFoldInfo = window.app.foldManager.load(templateFile);
        return [contents, IFoldInfo];
      } catch (err) {
        console.error(`Failed to read the daily note template '${templatePath}'`, err);
        new obsidian.Notice("Failed to read the daily note template");
        return ["", null];
      }
    }
    function getDateUID(date, granularity = "day") {
      const ts = date.clone().startOf(granularity).format();
      return `${granularity}-${ts}`;
    }
    function removeEscapedCharacters(format) {
      return format.replace(/\[[^\]]*\]/g, "");
    }
    function isFormatAmbiguous(format, granularity) {
      if (granularity === "week") {
        const cleanFormat = removeEscapedCharacters(format);
        return /w{1,2}/i.test(cleanFormat) && (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat));
      }
      return false;
    }
    function getDateFromFile(file, granularity) {
      return getDateFromFilename(file.basename, granularity);
    }
    function getDateFromPath(path, granularity) {
      return getDateFromFilename(basename(path), granularity);
    }
    function getDateFromFilename(filename, granularity) {
      const getSettings = {
        day: getDailyNoteSettings2,
        week: getWeeklyNoteSettings,
        month: getMonthlyNoteSettings,
        quarter: getQuarterlyNoteSettings,
        year: getYearlyNoteSettings
      };
      const format = getSettings[granularity]().format.split("/").pop();
      const noteDate = window.moment(filename, format, true);
      if (!noteDate.isValid()) {
        return null;
      }
      if (isFormatAmbiguous(format, granularity)) {
        if (granularity === "week") {
          const cleanFormat = removeEscapedCharacters(format);
          if (/w{1,2}/i.test(cleanFormat)) {
            return window.moment(filename, format.replace(/M{1,4}/g, "").replace(/D{1,4}/g, ""), false);
          }
        }
      }
      return noteDate;
    }
    var DailyNotesFolderMissingError = class extends Error {
    };
    async function createDailyNote(date) {
      const app = window.app;
      const { vault } = app;
      const moment4 = window.moment;
      const { template, format, folder } = getDailyNoteSettings2();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, moment4().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = moment4();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*yesterday\s*}}/gi, date.clone().subtract(1, "day").format(format)).replace(/{{\s*tomorrow\s*}}/gi, date.clone().add(1, "d").format(format)));
        app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getDailyNote2(date, dailyNotes) {
      var _a;
      return (_a = dailyNotes[getDateUID(date, "day")]) != null ? _a : null;
    }
    function getAllDailyNotes2() {
      const { vault } = window.app;
      const { folder } = getDailyNoteSettings2();
      const dailyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!dailyNotesFolder) {
        throw new DailyNotesFolderMissingError("Failed to find daily notes folder");
      }
      const dailyNotes = {};
      obsidian.Vault.recurseChildren(dailyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "day");
          if (date) {
            const dateString = getDateUID(date, "day");
            dailyNotes[dateString] = note;
          }
        }
      });
      return dailyNotes;
    }
    var WeeklyNotesFolderMissingError = class extends Error {
    };
    function getDaysOfWeek() {
      const { moment: moment4 } = window;
      let weekStart = moment4.localeData()._week.dow;
      const daysOfWeek = [
        "sunday",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday"
      ];
      while (weekStart) {
        daysOfWeek.push(daysOfWeek.shift());
        weekStart--;
      }
      return daysOfWeek;
    }
    function getDayOfWeekNumericalValue(dayOfWeekName) {
      return getDaysOfWeek().indexOf(dayOfWeekName.toLowerCase());
    }
    async function createWeeklyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getWeeklyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi, (_, dayOfWeek, momentFormat) => {
          const day = getDayOfWeekNumericalValue(dayOfWeek);
          return date.weekday(day).format(momentFormat.trim());
        }));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getWeeklyNote(date, weeklyNotes) {
      var _a;
      return (_a = weeklyNotes[getDateUID(date, "week")]) != null ? _a : null;
    }
    function getAllWeeklyNotes() {
      const weeklyNotes = {};
      if (!appHasWeeklyNotesPluginLoaded()) {
        return weeklyNotes;
      }
      const { vault } = window.app;
      const { folder } = getWeeklyNoteSettings();
      const weeklyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!weeklyNotesFolder) {
        throw new WeeklyNotesFolderMissingError("Failed to find weekly notes folder");
      }
      obsidian.Vault.recurseChildren(weeklyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "week");
          if (date) {
            const dateString = getDateUID(date, "week");
            weeklyNotes[dateString] = note;
          }
        }
      });
      return weeklyNotes;
    }
    var MonthlyNotesFolderMissingError = class extends Error {
    };
    async function createMonthlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getMonthlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getMonthlyNote(date, monthlyNotes) {
      var _a;
      return (_a = monthlyNotes[getDateUID(date, "month")]) != null ? _a : null;
    }
    function getAllMonthlyNotes() {
      const monthlyNotes = {};
      if (!appHasMonthlyNotesPluginLoaded()) {
        return monthlyNotes;
      }
      const { vault } = window.app;
      const { folder } = getMonthlyNoteSettings();
      const monthlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!monthlyNotesFolder) {
        throw new MonthlyNotesFolderMissingError("Failed to find monthly notes folder");
      }
      obsidian.Vault.recurseChildren(monthlyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "month");
          if (date) {
            const dateString = getDateUID(date, "month");
            monthlyNotes[dateString] = note;
          }
        }
      });
      return monthlyNotes;
    }
    var QuarterlyNotesFolderMissingError = class extends Error {
    };
    async function createQuarterlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getQuarterlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getQuarterlyNote(date, quarterly) {
      var _a;
      return (_a = quarterly[getDateUID(date, "quarter")]) != null ? _a : null;
    }
    function getAllQuarterlyNotes() {
      const quarterly = {};
      if (!appHasQuarterlyNotesPluginLoaded()) {
        return quarterly;
      }
      const { vault } = window.app;
      const { folder } = getQuarterlyNoteSettings();
      const quarterlyFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!quarterlyFolder) {
        throw new QuarterlyNotesFolderMissingError("Failed to find quarterly notes folder");
      }
      obsidian.Vault.recurseChildren(quarterlyFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "quarter");
          if (date) {
            const dateString = getDateUID(date, "quarter");
            quarterly[dateString] = note;
          }
        }
      });
      return quarterly;
    }
    var YearlyNotesFolderMissingError = class extends Error {
    };
    async function createYearlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getYearlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getYearlyNote(date, yearlyNotes) {
      var _a;
      return (_a = yearlyNotes[getDateUID(date, "year")]) != null ? _a : null;
    }
    function getAllYearlyNotes() {
      const yearlyNotes = {};
      if (!appHasYearlyNotesPluginLoaded()) {
        return yearlyNotes;
      }
      const { vault } = window.app;
      const { folder } = getYearlyNoteSettings();
      const yearlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!yearlyNotesFolder) {
        throw new YearlyNotesFolderMissingError("Failed to find yearly notes folder");
      }
      obsidian.Vault.recurseChildren(yearlyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "year");
          if (date) {
            const dateString = getDateUID(date, "year");
            yearlyNotes[dateString] = note;
          }
        }
      });
      return yearlyNotes;
    }
    function appHasDailyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const dailyNotesPlugin = app.internalPlugins.plugins["daily-notes"];
      if (dailyNotesPlugin && dailyNotesPlugin.enabled) {
        return true;
      }
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.daily) == null ? void 0 : _b.enabled);
    }
    function appHasWeeklyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      if (app.plugins.getPlugin("calendar")) {
        return true;
      }
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.weekly) == null ? void 0 : _b.enabled);
    }
    function appHasMonthlyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.monthly) == null ? void 0 : _b.enabled);
    }
    function appHasQuarterlyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.quarterly) == null ? void 0 : _b.enabled);
    }
    function appHasYearlyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.yearly) == null ? void 0 : _b.enabled);
    }
    function getPeriodicNoteSettings(granularity) {
      const getSettings = {
        day: getDailyNoteSettings2,
        week: getWeeklyNoteSettings,
        month: getMonthlyNoteSettings,
        quarter: getQuarterlyNoteSettings,
        year: getYearlyNoteSettings
      }[granularity];
      return getSettings();
    }
    function createPeriodicNote(granularity, date) {
      const createFn = {
        day: createDailyNote,
        month: createMonthlyNote,
        week: createWeeklyNote
      };
      return createFn[granularity](date);
    }
    exports.DEFAULT_DAILY_NOTE_FORMAT = DEFAULT_DAILY_NOTE_FORMAT;
    exports.DEFAULT_MONTHLY_NOTE_FORMAT = DEFAULT_MONTHLY_NOTE_FORMAT;
    exports.DEFAULT_QUARTERLY_NOTE_FORMAT = DEFAULT_QUARTERLY_NOTE_FORMAT;
    exports.DEFAULT_WEEKLY_NOTE_FORMAT = DEFAULT_WEEKLY_NOTE_FORMAT;
    exports.DEFAULT_YEARLY_NOTE_FORMAT = DEFAULT_YEARLY_NOTE_FORMAT;
    exports.appHasDailyNotesPluginLoaded = appHasDailyNotesPluginLoaded;
    exports.appHasMonthlyNotesPluginLoaded = appHasMonthlyNotesPluginLoaded;
    exports.appHasQuarterlyNotesPluginLoaded = appHasQuarterlyNotesPluginLoaded;
    exports.appHasWeeklyNotesPluginLoaded = appHasWeeklyNotesPluginLoaded;
    exports.appHasYearlyNotesPluginLoaded = appHasYearlyNotesPluginLoaded;
    exports.createDailyNote = createDailyNote;
    exports.createMonthlyNote = createMonthlyNote;
    exports.createPeriodicNote = createPeriodicNote;
    exports.createQuarterlyNote = createQuarterlyNote;
    exports.createWeeklyNote = createWeeklyNote;
    exports.createYearlyNote = createYearlyNote;
    exports.getAllDailyNotes = getAllDailyNotes2;
    exports.getAllMonthlyNotes = getAllMonthlyNotes;
    exports.getAllQuarterlyNotes = getAllQuarterlyNotes;
    exports.getAllWeeklyNotes = getAllWeeklyNotes;
    exports.getAllYearlyNotes = getAllYearlyNotes;
    exports.getDailyNote = getDailyNote2;
    exports.getDailyNoteSettings = getDailyNoteSettings2;
    exports.getDateFromFile = getDateFromFile;
    exports.getDateFromPath = getDateFromPath;
    exports.getDateUID = getDateUID;
    exports.getMonthlyNote = getMonthlyNote;
    exports.getMonthlyNoteSettings = getMonthlyNoteSettings;
    exports.getPeriodicNoteSettings = getPeriodicNoteSettings;
    exports.getQuarterlyNote = getQuarterlyNote;
    exports.getQuarterlyNoteSettings = getQuarterlyNoteSettings;
    exports.getTemplateInfo = getTemplateInfo;
    exports.getWeeklyNote = getWeeklyNote;
    exports.getWeeklyNoteSettings = getWeeklyNoteSettings;
    exports.getYearlyNote = getYearlyNote;
    exports.getYearlyNoteSettings = getYearlyNoteSettings;
  }
});

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray3(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject2(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined2(input) {
        return input === void 0;
      }
      function isNumber3(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate2(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend2(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend2(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val;
        if (!isUndefined2(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined2(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined2(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined2(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined2(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined2(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined2(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined2(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined2(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined2(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined2(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment2(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment2 || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend2(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key;
            for (i = 0; i < arguments.length; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction2(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction2(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend2({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject2(parentConfig[prop]) && isObject2(childConfig[prop])) {
              res[prop] = {};
              extend2(res[prop], parentConfig[prop]);
              extend2(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject2(parentConfig[prop])) {
            res[prop] = extend2({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction2(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction2(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction2(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction2(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction2(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i;
          for (i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction2(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction2(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber3(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        for (i = 0; i < token2.length; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray3(this._months) ? this._months : this._months["standalone"];
        }
        return isArray3(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray3(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray3(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
            this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber3(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday2(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray3(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
            this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
            this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday2(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split2;
        while (i < names.length) {
          split2 = normalizeLocale(names[i]).split("-");
          j = split2.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split2.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split2, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined2(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("Locale " + key + " not found. Did you forget to load it?");
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray3(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
      });
      function defaults2(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults2(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults2(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults2(w.W, 1);
          weekday = defaults2(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults2(w.gg, config._a[YEAR], curWeek.year);
          week = defaults2(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens2.length; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false;
        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend2(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function(obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment2(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment2(checkOverflow(input));
        } else if (isDate2(input)) {
          config._d = input;
        } else if (isArray3(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined2(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate2(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray3(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject2(input)) {
          configFromObject(config);
        } else if (isNumber3(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject2(input) && isObjectEmpty(input) || isArray3(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray3(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate2(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, "m"), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined2(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber3(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add2 = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString2(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate2(input) || isString2(input) || isNumber3(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject2(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray3(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber3(item) && isString2(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject2(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction2(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
      }
      function clone() {
        return new Moment2(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString3() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        }
        if (isFunction2(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray3() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON2() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend2({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment2.prototype;
      proto.add = add2;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray3;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON2;
      proto.toString = toString3;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
      proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
      proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
      proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
      proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber3(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber3(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber3(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
      hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.1";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate2;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      return hooks;
    });
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __classPrivateFieldIn2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding2(o, m, p);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle2(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle2(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle2(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle2(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle2(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianManagerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  const pattern = "[object FormData]";
  return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function merge() {
  const result = {};
  const assignValue = (val, key) => {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
    return p1.toUpperCase() + p2;
  });
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/env/classes/FormData.js
var import_form_data = __toESM(require_browser(), 1);
var FormData_default = import_form_data.default;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function isSpecCompliant(thing) {
  return thing && utils_default.isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator];
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (FormData_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && isSpecCompliant(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]") && (arr = utils_default.toArray(value)))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]", convertValue(el));
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(formData, el, utils_default.isString(key) ? key.trim() : key, path, exposedHelpers);
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default2 = FormData;

// node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default2,
    Blob
  },
  isStandardBrowserEnv,
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default("Request failed with status code " + response.status, [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
  }
}

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + "=" + encodeURIComponent(value));
      if (utils_default.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils_default.isString(path)) {
        cookie.push("path=" + path);
      }
      if (utils_default.isString(domain)) {
        cookie.push("domain=" + domain);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
  const msie = /(msie|trident)/i.test(navigator.userAgent);
  const urlParsingNode = document.createElement("a");
  let originURL;
  function resolveURL(url) {
    let href = url;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin(requestURL) {
    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin() {
    return true;
  };
}();

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
var $defaults = Symbol("defaults");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter2) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function AxiosHeaders(headers, defaults2) {
  headers && this.set(headers);
  this[$defaults] = defaults2 || null;
}
Object.assign(AxiosHeaders.prototype, {
  set: function(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = findKey(self2, lHeader);
      if (key && _rewrite !== true && (self2[key] === false || _rewrite === false)) {
        return;
      }
      self2[key || _header] = normalizeValue(_value);
    }
    if (utils_default.isPlainObject(header)) {
      utils_default.forEach(header, (_value, _header) => {
        setHeader(_value, _header, valueOrRewrite);
      });
    } else {
      setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  },
  get: function(header, parser) {
    header = normalizeHeader(header);
    if (!header)
      return void 0;
    const key = findKey(this, header);
    if (key) {
      const value = this[key];
      if (!parser) {
        return value;
      }
      if (parser === true) {
        return parseTokens(value);
      }
      if (utils_default.isFunction(parser)) {
        return parser.call(this, value, key);
      }
      if (utils_default.isRegExp(parser)) {
        return parser.exec(value);
      }
      throw new TypeError("parser must be boolean|regexp|function");
    }
  },
  has: function(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = findKey(this, header);
      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  },
  delete: function(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  },
  clear: function() {
    return Object.keys(this).forEach(this.delete.bind(this));
  },
  normalize: function(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  },
  toJSON: function(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(Object.assign({}, this[$defaults] || null, this), (value, header) => {
      if (value == null || value === false)
        return;
      obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value;
    });
    return obj;
  }
});
Object.assign(AxiosHeaders, {
  from: function(thing) {
    if (utils_default.isString(thing)) {
      return new this(parseHeaders_default(thing));
    }
    return thing instanceof this ? thing : new this(thing);
  },
  accessor: function(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
});
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData) && browser_default.isStandardBrowserEnv) {
      requestHeaders.setContentType(false);
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from("getAllResponseHeaders" in request && request.getAllResponseHeaders());
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(timeoutErrorMessage, transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
}

// node_modules/axios/lib/adapters/index.js
var adapters = {
  http: xhrAdapter,
  xhr: xhrAdapter
};
var adapters_default = {
  getAdapter: (nameOrAdapter) => {
    if (utils_default.isString(nameOrAdapter)) {
      const adapter = adapters[nameOrAdapter];
      if (!nameOrAdapter) {
        throw Error(utils_default.hasOwnProp(nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Can not resolve adapter '${nameOrAdapter}'`);
      }
      return adapter;
    }
    if (!utils_default.isFunction(nameOrAdapter)) {
      throw new TypeError("adapter is not a function");
    }
    return nameOrAdapter;
  },
  adapters
};

// node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function getDefaultAdapter() {
  let adapter;
  if (typeof XMLHttpRequest !== "undefined") {
    adapter = adapters_default.getAdapter("xhr");
  } else if (typeof process !== "undefined" && utils_default.kindOf(process) === "process") {
    adapter = adapters_default.getAdapter("http");
  }
  return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(isFileList2 ? { "files[]": data } : data, _FormData && new _FormData(), this.formSerializer);
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils_default.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default();
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(config, config.transformRequest);
  const adapter = config.adapter || defaults_default.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(config, config.transformResponse, response);
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(config, config.transformResponse, reason.response);
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/core/mergeConfig.js
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge(target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(prop) {
    if (!utils_default.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils_default.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function valueFromConfig2(prop) {
    if (!utils_default.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    }
  }
  function defaultToConfig2(prop) {
    if (!utils_default.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    } else if (!utils_default.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  const mergeMap = {
    "url": valueFromConfig2,
    "method": valueFromConfig2,
    "data": valueFromConfig2,
    "baseURL": defaultToConfig2,
    "transformRequest": defaultToConfig2,
    "transformResponse": defaultToConfig2,
    "paramsSerializer": defaultToConfig2,
    "timeout": defaultToConfig2,
    "timeoutMessage": defaultToConfig2,
    "withCredentials": defaultToConfig2,
    "adapter": defaultToConfig2,
    "responseType": defaultToConfig2,
    "xsrfCookieName": defaultToConfig2,
    "xsrfHeaderName": defaultToConfig2,
    "onUploadProgress": defaultToConfig2,
    "onDownloadProgress": defaultToConfig2,
    "decompress": defaultToConfig2,
    "maxContentLength": defaultToConfig2,
    "maxBodyLength": defaultToConfig2,
    "beforeRedirect": defaultToConfig2,
    "transport": defaultToConfig2,
    "httpAgent": defaultToConfig2,
    "httpsAgent": defaultToConfig2,
    "cancelToken": defaultToConfig2,
    "socketPath": defaultToConfig2,
    "responseEncoding": defaultToConfig2,
    "validateStatus": mergeDirectKeys
  };
  utils_default.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.1.3";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError_default.ERR_DEPRECATED);
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer !== void 0) {
      validator_default.assertOptions(paramsSerializer, {
        encode: validators2.function,
        serialize: validators2.function
      }, true);
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    const defaultHeaders = config.headers && utils_default.merge(config.headers.common, config.headers[config.method]);
    defaultHeaders && utils_default.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
      delete config.headers[method];
    });
    config.headers = new AxiosHeaders_default(config.headers, defaultHeaders);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.formToJSON = (thing) => {
  return formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
};
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2
} = axios_default;
var axios_default2 = axios_default;

// src/main.ts
var import_obsidian_daily_notes_interface = __toESM(require_main());

// src/controller.ts
var import_obsidian = require("obsidian");

// src/model/format/markdown.ts
var _Todo = class {
  constructor(lineIndex, prefix, check, suffix, body) {
    this.lineIndex = lineIndex;
    this.prefix = prefix;
    this.check = check;
    this.suffix = suffix;
    this.body = body;
  }
  static parse(lineIndex, line) {
    const match = _Todo.regexp.exec(line);
    if (match) {
      return new _Todo(lineIndex, match.groups["prefix"], match.groups["check"], match.groups["suffix"], match.groups["body"]);
    }
    return null;
  }
  toMarkdown() {
    return `${this.prefix}${this.check}${this.suffix}${this.body}`;
  }
  isChecked() {
    return this.check === "x";
  }
  setChecked(checked) {
    this.check = checked ? "x" : " ";
  }
  getHeaderLength() {
    return this.prefix.length + this.check.length + this.suffix.length;
  }
  clone() {
    return _Todo.parse(this.lineIndex, this.toMarkdown());
  }
};
var Todo = _Todo;
Todo.regexp = /^(?<prefix>((> ?)*)?\s*[\-\*] \[)(?<check>.)(?<suffix>\]\s+)(?<body>.*)$/;
var MarkdownDocument = class {
  constructor(file, content) {
    this.file = file;
    this.lines = [];
    this.todos = [];
    this.parse(content);
  }
  parse(content) {
    this.lines = content.split("\n");
    this.todos = [];
    this.lines.forEach((line, lineIndex) => {
      const todo = Todo.parse(lineIndex, line);
      if (todo) {
        this.todos.push(todo);
      }
    });
  }
  getTodos() {
    return this.todos;
  }
  insertTodo(lineIndex, todo) {
    todo.lineIndex = lineIndex;
    this.lines.splice(lineIndex, 0, todo.toMarkdown());
    let todoIndex = -1;
    for (const i in this.todos) {
      const todo2 = this.todos[i];
      if (todo2.lineIndex >= lineIndex) {
        if (todoIndex < 0) {
          todoIndex = parseInt(i);
        }
        todo2.lineIndex++;
      }
    }
    if (todoIndex <= 0) {
      this.todos.splice(0, 0, todo);
    } else {
      this.todos.splice(todoIndex, 0, todo);
    }
  }
  getTodo(lineIndex) {
    const found = this.todos.find((todo) => todo.lineIndex === lineIndex);
    if (found == null) {
      return null;
    }
    return found;
  }
  applyChanges() {
    this.todos.forEach((todo) => {
      this.lines[todo.lineIndex] = todo.toMarkdown();
    });
  }
  toMarkdown() {
    this.applyChanges();
    return this.lines.join("\n");
  }
};

// src/model/ref.ts
var ConstantReference = class {
  constructor(_value) {
    this._value = _value;
  }
  get value() {
    return this._value;
  }
};
var Reference = class {
  constructor(_value) {
    this._value = _value;
    this.onChangeFunctions = [];
  }
  onChanged(listener) {
    this.onChangeFunctions.push(listener);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    const oldValue = this._value;
    this._value = value;
    this.onChangeFunctions.forEach((f) => {
      f(oldValue, value);
    });
  }
};

// src/model/time.ts
var import_moment = __toESM(require_moment());
var DateTime = class {
  constructor(time, _hasTimePart) {
    this.time = time;
    this._hasTimePart = _hasTimePart;
  }
  static now() {
    return new DateTime((0, import_moment.default)(), true);
  }
  static parse(time) {
    if (time.length > 10) {
      return new DateTime((0, import_moment.default)(time, "YYYY-MM-DD HH:mm"), true);
    } else {
      return new DateTime((0, import_moment.default)(time, "YYYY-MM-DD"), false);
    }
  }
  static duration(from, to, unit, defaultTime) {
    return to.fixedTime(defaultTime).diff(from.fixedTime(defaultTime), unit);
  }
  getTimeInMillis(defaultTime) {
    return this.fixedTime(defaultTime).valueOf();
  }
  format(format, defaultTime) {
    return this.fixedTime(defaultTime).format(format);
  }
  toYYYYMMMM(defaultTime) {
    return this.fixedTime(defaultTime).format("YYYY, MMMM");
  }
  toYYYYMMDD(defaultTime) {
    return this.fixedTime(defaultTime).format("YYYY-MM-DD");
  }
  add(amount, unit, defaultTime) {
    return new DateTime(this.fixedTime(defaultTime).clone().add(amount, unit), this._hasTimePart);
  }
  fixedTime(defaultTime) {
    if (this._hasTimePart) {
      return this.time;
    }
    if (defaultTime === void 0) {
      return this.time;
    }
    return this.time.clone().add(defaultTime.minutes, "minutes");
  }
  get hasTimePart() {
    return this._hasTimePart;
  }
  moment() {
    return this.time;
  }
  isValid() {
    return this.time.isValid();
  }
  clone(hasTimePart) {
    const withTimePart = hasTimePart == null ? this._hasTimePart : hasTimePart;
    const clone = this.time.clone();
    return new DateTime(clone, withTimePart);
  }
  toString() {
    if (this._hasTimePart) {
      return this.format("YYYY-MM-DD HH:mm");
    } else {
      return this.format("YYYY-MM-DD");
    }
  }
  equals(time) {
    return this._hasTimePart === time._hasTimePart && this.time.isSame(time.time);
  }
};
var Time = class {
  constructor(hour, minute) {
    this.hour = hour;
    this.minute = minute;
  }
  static parse(text) {
    if (!text.match(/^\d{1,2}:\d{1,2}$/)) {
      throw `Unexpected format time(${text}). Time must be HH:mm.`;
    }
    const s = text.split(":");
    if (s.length !== 2) {
      throw `Unexpected format time(${text}).  time must be HH:mm.`;
    }
    const hour = parseInt(s[0]);
    const minute = parseInt(s[1]);
    if (hour > 23 || hour < 0) {
      throw `hour must be 0~23`;
    }
    if (minute > 59 || minute < 0) {
      throw `minute must be 0~59`;
    }
    return new Time(hour, minute);
  }
  get minutes() {
    return this.hour * 60 + this.minute;
  }
  toString() {
    const pad = (n) => {
      if (n < 10) {
        return "0" + n;
      }
      return "" + n;
    };
    return `${pad(this.hour)}:${pad(this.minute)}`;
  }
};
function add(amount, unit) {
  return () => {
    return new DateTime((0, import_moment.default)(), true).add(amount, unit);
  };
}
function inMinutes(minutes) {
  return add(minutes, "minutes");
}
function inHours(hours) {
  return add(hours, "hours");
}
function inDays(days) {
  return add(days, "days");
}
function inWeeks(weeks) {
  return add(weeks, "weeks");
}
function inMonths(months) {
  return add(months, "months");
}
function inYears(years) {
  return add(years, "years");
}
function nextWeekday(weekday) {
  return () => {
    const today = (0, import_moment.default)();
    if (today.isoWeekday() <= weekday) {
      return new DateTime(today.isoWeekday(weekday), false);
    } else {
      return new DateTime(today.add(1, "weeks").isoWeekday(weekday), false);
    }
  };
}
function tomorrow() {
  return () => {
    return new DateTime((0, import_moment.default)().add(1, "days"), false);
  };
}
function nextWeek() {
  return () => {
    return new DateTime((0, import_moment.default)().add(1, "weeks"), false);
  };
}
function nextMonth() {
  return () => {
    return new DateTime((0, import_moment.default)().add(1, "months"), false);
  };
}
function nextYear() {
  return () => {
    return new DateTime((0, import_moment.default)().add(1, "years"), false);
  };
}
var Later = class {
  constructor(label, later) {
    this.label = label;
    this.later = later;
  }
};
function parseLaters(laters) {
  return laters.split("\n").map((l) => parseLater(l.trim()));
}
function parseLater(later) {
  later = later.toLowerCase();
  if (later.startsWith("in")) {
    const tokens = later.split(" ");
    if (tokens.length !== 3) {
      throw `Unsupported format.  Should be 'In N (minutes|hours)'`;
    }
    const n = tokens[1] === "a" || tokens[1] === "an" ? 1 : parseInt(tokens[1]);
    switch (tokens[2]) {
      case "minute":
      case "minutes": {
        const unit = n == 1 ? "minute" : "minutes";
        return new Later(`In ${n} ${unit}`, inMinutes(n));
      }
      case "hour":
      case "hours": {
        const unit = n == 1 ? "hour" : "hours";
        return new Later(`In ${n} ${unit}`, inHours(n));
      }
      case "day":
      case "days": {
        const unit = n == 1 ? "day" : "days";
        return new Later(`In ${n} ${unit}`, inDays(n));
      }
      case "week":
      case "weeks": {
        const unit = n == 1 ? "week" : "weeks";
        return new Later(`In ${n} ${unit}`, inWeeks(n));
      }
      case "month":
      case "months": {
        const unit = n == 1 ? "month" : "months";
        return new Later(`In ${n} ${unit}`, inMonths(n));
      }
      case "year":
      case "years": {
        const unit = n == 1 ? "year" : "years";
        return new Later(`In ${n} ${unit}`, inYears(n));
      }
    }
  } else if (later.startsWith("next")) {
    const weekday = later.substring(5);
    switch (weekday) {
      case "sunday":
        return new Later("Next Sunday", nextWeekday(0));
      case "monday":
        return new Later("Next Monday", nextWeekday(1));
      case "tuesday":
        return new Later("Next Tuesday", nextWeekday(2));
      case "wednesday":
        return new Later("Next Wednesday", nextWeekday(3));
      case "thursday":
        return new Later("Next Thursday", nextWeekday(4));
      case "friday":
        return new Later("Next Friday", nextWeekday(5));
      case "saturday":
        return new Later("Next Saturday", nextWeekday(6));
      case "day":
        return new Later("Tomorrow", tomorrow());
      case "week":
        return new Later("Next week", nextWeek());
      case "month":
        return new Later("Next month", nextMonth());
      case "year":
        return new Later("Next year", nextYear());
      default:
        throw `Unsupported weekday: ${weekday}`;
    }
  } else if (later === "tomorrow") {
    return new Later("Tomorrow", tomorrow());
  }
  throw `Unsupported format: ${later}`;
}
var DEFAULT_LATERS = [
  new Later("In 30 minutes", inMinutes(30)),
  new Later("In 1 hours", inHours(1)),
  new Later("In 3 hours", inHours(3)),
  new Later("Tomorrow", tomorrow()),
  new Later("Next week", nextWeek())
];
var DateTimeFormatter = class {
  constructor() {
    this.dateFormat = new ConstantReference("YYYY-MM-DD");
    this.dateTimeFormat = new ConstantReference("YYYY-MM-DD HH:mm");
    this.strict = new ConstantReference(false);
  }
  setTimeFormat(dateFormat, dateTimeFormat, strict) {
    this.dateFormat = dateFormat;
    this.dateTimeFormat = dateTimeFormat;
    this.strict = strict;
  }
  parse(text) {
    const parsed = this.doParse(text, true);
    if (parsed != null) {
      return parsed;
    }
    if (this.strict.value) {
      return null;
    }
    return this.doParse(text, false);
  }
  doParse(text, strict) {
    const dateTime = (0, import_moment.default)(text, this.dateTimeFormat.value, strict);
    if (dateTime.isValid()) {
      return new DateTime(dateTime, true);
    }
    const date = (0, import_moment.default)(text, this.dateFormat.value, strict);
    if (date.isValid()) {
      return new DateTime(date, false);
    }
    return null;
  }
  toString(time) {
    if (time.hasTimePart) {
      return time.format(this.dateTimeFormat.value);
    } else {
      return time.format(this.dateFormat.value);
    }
  }
};
var DATE_TIME_FORMATTER = new DateTimeFormatter();

// src/model/reminder.ts
var Reminder = class {
  constructor(file, title, time, rowNumber, done) {
    this.file = file;
    this.title = title;
    this.time = time;
    this.rowNumber = rowNumber;
    this.done = done;
    this.muteNotification = false;
    this.beingDisplayed = false;
  }
  key() {
    return this.file + this.title + this.time.toString();
  }
  equals(reminder) {
    return this.rowNumber === reminder.rowNumber && this.title === reminder.title && this.time.equals(reminder.time) && this.file === reminder.file;
  }
  getFileName() {
    const p = this.file.split(/[\/\\]/);
    return p[p.length - 1].replace(/^(.*?)(\..+)?$/, "$1");
  }
  static extractFileName(path) {
    const p = path.split(/[\/\\]/);
    return p[p.length - 1].replace(/^(.*?)(\..+)?$/, "$1");
  }
};
var Reminders = class {
  constructor(onChange) {
    this.onChange = onChange;
    this.fileToReminders = /* @__PURE__ */ new Map();
    this.reminders = [];
  }
  getExpiredReminders(defaultTime) {
    const now = new Date().getTime();
    const result = [];
    for (let i = 0; i < this.reminders.length; i++) {
      const reminder = this.reminders[i];
      if (reminder.time.getTimeInMillis(defaultTime) <= now) {
        result.push(reminder);
      } else {
        break;
      }
    }
    return result;
  }
  byDate(date) {
    return this.reminders.filter((reminder) => reminder.time.toYYYYMMDD() === date.toYYYYMMDD());
  }
  removeReminder(reminder) {
    console.debug("Remove reminder: %o", reminder);
    this.reminders.remove(reminder);
    const file = this.fileToReminders.get(reminder.file);
    if (file) {
      file.remove(reminder);
      if (file.length === 0) {
        this.fileToReminders.delete(reminder.file);
      }
    }
    this.onChange();
  }
  clear() {
    this.fileToReminders.clear();
    this.reminders = [];
    this.onChange();
  }
  removeFile(filePath) {
    if (this.fileToReminders.delete(filePath)) {
      this.sortReminders();
      return true;
    }
    return false;
  }
  replaceFile(filePath, reminders) {
    const oldReminders = this.fileToReminders.get(filePath);
    if (oldReminders) {
      if (this.equals(oldReminders, reminders)) {
        return false;
      }
      const reminderToNotificationVisible = /* @__PURE__ */ new Map();
      for (const reminder of oldReminders) {
        reminderToNotificationVisible.set(reminder.key(), reminder.muteNotification);
      }
      for (const reminder of reminders) {
        const visible = reminderToNotificationVisible.get(reminder.key());
        reminderToNotificationVisible.set(reminder.key(), reminder.muteNotification);
        if (visible !== void 0) {
          reminder.muteNotification = visible;
        }
      }
    }
    this.fileToReminders.set(filePath, reminders);
    this.sortReminders();
    return true;
  }
  equals(r1, r2) {
    if (r1.length !== r2.length) {
      return false;
    }
    this.sort(r1);
    this.sort(r2);
    for (const i in r1) {
      const reminder1 = r1[i];
      const reminder2 = r2[i];
      if (reminder1 == null && reminder2 != null) {
        return false;
      }
      if (reminder2 == null && reminder1 != null) {
        return false;
      }
      if (reminder1 == null && reminder2 == null) {
        continue;
      }
      if (!reminder1.equals(reminder2)) {
        return false;
      }
    }
    return true;
  }
  sortReminders() {
    const reminders = [];
    for (const r of this.fileToReminders.values()) {
      reminders.push(...r);
    }
    this.sort(reminders);
    this.reminders = reminders;
    this.onChange();
  }
  sort(reminders) {
    reminders.sort((a, b) => {
      var _a, _b;
      const d = a.time.getTimeInMillis((_a = this.reminderTime) == null ? void 0 : _a.value) - b.time.getTimeInMillis((_b = this.reminderTime) == null ? void 0 : _b.value);
      return d > 0 ? 1 : d < 0 ? -1 : 0;
    });
  }
};

// src/model/format/reminder-base.ts
var _ReminderFormatParameterKey = class {
  constructor(key, defaultValue) {
    this.key = key;
    this.defaultValue = defaultValue;
  }
};
var ReminderFormatParameterKey = _ReminderFormatParameterKey;
ReminderFormatParameterKey.now = new _ReminderFormatParameterKey("now", DateTime.now());
ReminderFormatParameterKey.useCustomEmojiForTasksPlugin = new _ReminderFormatParameterKey("useCustomEmojiForTasksPlugin", false);
ReminderFormatParameterKey.removeTagsForTasksPlugin = new _ReminderFormatParameterKey("removeTagsForTasksPlugin", false);
ReminderFormatParameterKey.linkDatesToDailyNotes = new _ReminderFormatParameterKey("linkDatesToDailyNotes", false);
ReminderFormatParameterKey.strictDateFormat = new _ReminderFormatParameterKey("strictDateFormat", false);
var ReminderFormatConfig = class {
  constructor() {
    this.parameters = /* @__PURE__ */ new Map();
  }
  setParameter(key, value) {
    this.parameters.set(key.key, () => value.value);
  }
  setParameterFunc(key, f) {
    this.parameters.set(key.key, f);
  }
  setParameterValue(key, value) {
    this.parameters.set(key.key, () => value);
  }
  getParameter(key) {
    const value = this.parameters.get(key.key);
    if (value == null) {
      return key.defaultValue;
    }
    return value();
  }
};
var TodoBasedReminderFormat = class {
  constructor() {
    this.config = new ReminderFormatConfig();
  }
  setConfig(config) {
    this.config = config;
  }
  parse(doc) {
    return doc.getTodos().map((todo) => {
      const parsed = this.parseValidReminder(todo);
      if (parsed == null) {
        return null;
      }
      const title = parsed.getTitle();
      if (title == null) {
        return null;
      }
      const time = parsed.getTime();
      if (time == null) {
        return null;
      }
      return new Reminder(doc.file, title, time, todo.lineIndex, todo.isChecked());
    }).filter((reminder) => reminder != null);
  }
  async modify(doc, reminder, edit) {
    const todo = doc.getTodo(reminder.rowNumber);
    if (todo === null) {
      console.warn("Not a todo: reminder=%o", reminder);
      return false;
    }
    const parsed = this.parseValidReminder(todo);
    if (parsed === null) {
      return false;
    }
    if (!this.modifyReminder(doc, todo, parsed, edit)) {
      return false;
    }
    todo.body = parsed.toMarkdown();
    return true;
  }
  parseValidReminder(todo) {
    const parsed = this.parseReminder(todo);
    if (parsed === null) {
      return null;
    }
    if (!this.isValidReminder(parsed)) {
      return null;
    }
    return parsed;
  }
  isValidReminder(reminder) {
    return reminder.getTime() !== null;
  }
  modifyReminder(doc, todo, parsed, edit) {
    if (edit.rawTime !== void 0) {
      if (!parsed.setRawTime(edit.rawTime)) {
        console.warn("The reminder doesn't support raw time: parsed=%o", parsed);
        return false;
      }
    } else if (edit.time !== void 0) {
      parsed.setTime(edit.time);
    }
    if (edit.checked !== void 0) {
      todo.setChecked(edit.checked);
    }
    return true;
  }
  appendReminder(line, time, insertAt) {
    const todo = Todo.parse(0, line);
    if (todo == null) {
      return null;
    }
    let parsed = this.parseReminder(todo);
    const todoHeaderLength = todo.getHeaderLength();
    if (insertAt != null) {
      insertAt -= todoHeaderLength;
    }
    if (parsed != null) {
      parsed.setTime(time, insertAt);
    } else {
      parsed = this.newReminder(todo.body, time, insertAt);
      parsed.setTime(time);
    }
    todo.body = parsed.toMarkdown();
    return {
      insertedLine: todo.toMarkdown(),
      caretPosition: todoHeaderLength + parsed.getEndOfTimeTextIndex()
    };
  }
  isStrictDateFormat() {
    return this.config.getParameter(ReminderFormatParameterKey.strictDateFormat);
  }
};
var CompositeReminderFormat = class {
  constructor() {
    this.formats = [];
  }
  setConfig(config) {
    this.config = config;
    this.syncConfig();
  }
  parse(doc) {
    const reminders = [];
    for (const format of this.formats) {
      const parsed = format.parse(doc);
      if (parsed == null) {
        continue;
      }
      reminders.push(...parsed);
    }
    return reminders;
  }
  async modify(doc, reminder, edit) {
    for (const format of this.formats) {
      const modified = await format.modify(doc, reminder, edit);
      if (modified) {
        return true;
      }
    }
    return false;
  }
  resetFormat(formats) {
    this.formats = formats;
    this.syncConfig();
  }
  syncConfig() {
    if (this.config == null) {
      return;
    }
    this.formats.forEach((f) => f.setConfig(this.config));
  }
  appendReminder(line, time) {
    if (this.formats[0] == null) {
      return null;
    }
    return this.formats[0].appendReminder(line, time);
  }
};

// src/model/format/reminder-default.ts
var _DefaultReminderModel = class {
  constructor(linkDatesToDailyNotes, title1, time, title2) {
    this.linkDatesToDailyNotes = linkDatesToDailyNotes;
    this.title1 = title1;
    this.time = time;
    this.title2 = title2;
  }
  static parse(line, linkDatesToDailyNotes) {
    if (linkDatesToDailyNotes == null) {
      linkDatesToDailyNotes = false;
    }
    const result = _DefaultReminderModel.regexp.exec(line);
    if (result == null) {
      return null;
    }
    const title1 = result.groups["title1"];
    let time = result.groups["time"];
    if (time == null) {
      return null;
    }
    const title2 = result.groups["title2"];
    if (linkDatesToDailyNotes) {
      time = time.replace("[[", "");
      time = time.replace("]]", "");
    }
    return new _DefaultReminderModel(linkDatesToDailyNotes, title1, time, title2);
  }
  getTitle() {
    return `${this.title1.trim()} ${this.title2.trim()}`.trim();
  }
  getTime() {
    return DATE_TIME_FORMATTER.parse(this.time);
  }
  setTime(time) {
    this.time = DATE_TIME_FORMATTER.toString(time);
  }
  setRawTime(rawTime) {
    this.time = rawTime;
    return true;
  }
  getEndOfTimeTextIndex() {
    return this.toMarkdown().length - this.title2.length;
  }
  toMarkdown() {
    let result = `${this.title1}(@${this.time})${this.title2}`;
    if (!this.linkDatesToDailyNotes) {
      return result;
    }
    let time = DATE_TIME_FORMATTER.parse(this.time);
    if (!time) {
      return result;
    }
    const date = DATE_TIME_FORMATTER.toString(time.clone(false));
    return result.replace(date, `[[${date}]]`);
  }
};
var DefaultReminderModel = _DefaultReminderModel;
DefaultReminderModel.regexp = /^(?<title1>.*?)\(@(?<time>.+?)\)(?<title2>.*)$/;
var _DefaultReminderFormat = class extends TodoBasedReminderFormat {
  parseReminder(todo) {
    return DefaultReminderModel.parse(todo.body, this.linkDatesToDailyNotes());
  }
  newReminder(title, time, insertAt) {
    let title1;
    let title2;
    if (insertAt != null) {
      title1 = title.substring(0, insertAt);
      title2 = title.substring(insertAt);
    } else {
      title1 = title;
      title2 = "";
    }
    return new DefaultReminderModel(this.linkDatesToDailyNotes(), title1, time.toString(), title2);
  }
  linkDatesToDailyNotes() {
    return this.config.getParameter(ReminderFormatParameterKey.linkDatesToDailyNotes);
  }
};
var DefaultReminderFormat = _DefaultReminderFormat;
DefaultReminderFormat.instance = new _DefaultReminderFormat();

// src/model/format/reminder-kanban-plugin.ts
var import_moment2 = __toESM(require_moment());

// src/model/format/util.ts
function escapeRegExpChars(text) {
  return text.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
}

// src/model/format/reminder-kanban-plugin.ts
var kanbanSetting = new class KanbanSetting {
  get dateTrigger() {
    return this.get("date-trigger", "@");
  }
  get dateFormat() {
    return this.get("date-format", "YYYY-MM-DD");
  }
  get timeTrigger() {
    return this.get("time-trigger", "@@");
  }
  get timeFormat() {
    return this.get("time-format", "HH:mm");
  }
  get linkDateToDailyNote() {
    return this.get("link-date-to-daily-note", false);
  }
  get(key, defaultValue) {
    var _a, _b;
    if (!window) {
      return defaultValue;
    }
    const plugins = (_b = (_a = window == null ? void 0 : window.app) == null ? void 0 : _a.plugins) == null ? void 0 : _b.plugins;
    if (!plugins) {
      return defaultValue;
    }
    const plugin = plugins["obsidian-kanban"];
    if (!plugin) {
      return defaultValue;
    }
    const settings = plugin.settings;
    if (!settings) {
      return defaultValue;
    }
    const value = plugin.settings[key];
    if (value === null || value === void 0) {
      return defaultValue;
    }
    return value;
  }
}();
var _KanbanDateTimeFormat = class {
  constructor(setting) {
    this.setting = setting;
    let dateRegExpStr;
    if (setting.linkDateToDailyNote) {
      dateRegExpStr = `${escapeRegExpChars(this.setting.dateTrigger)}\\[\\[(?<date>.+?)\\]\\]`;
    } else {
      dateRegExpStr = `${escapeRegExpChars(this.setting.dateTrigger)}\\{(?<date>.+?)\\}`;
    }
    const timeRegExpStr = `${escapeRegExpChars(this.setting.timeTrigger)}\\{(?<time>.+?)\\}`;
    this.dateRegExp = new RegExp(dateRegExpStr);
    this.timeRegExp = new RegExp(timeRegExpStr);
  }
  format(time) {
    let datePart;
    if (this.setting.linkDateToDailyNote) {
      datePart = `${this.setting.dateTrigger}[[${time.format(this.setting.dateFormat)}]]`;
    } else {
      datePart = `${this.setting.dateTrigger}{${time.format(this.setting.dateFormat)}}`;
    }
    if (!time.hasTimePart) {
      return datePart;
    }
    return `${datePart} ${this.setting.timeTrigger}{${time.format(this.setting.timeFormat)}}`;
  }
  split(text, strictDateFormat) {
    const originalText = text;
    let title;
    let date;
    let time;
    const dateMatch = this.dateRegExp.exec(text);
    if (dateMatch) {
      date = dateMatch.groups["date"];
      text = text.replace(this.dateRegExp, "");
    } else {
      return { title: originalText };
    }
    const timeMatch = this.timeRegExp.exec(text);
    if (timeMatch) {
      time = timeMatch.groups["time"];
      text = text.replace(this.timeRegExp, "");
    }
    title = text.trim();
    let parsedTime;
    const strict = strictDateFormat != null ? strictDateFormat : true;
    if (time) {
      parsedTime = new DateTime((0, import_moment2.default)(`${date} ${time}`, `${this.setting.dateFormat} ${this.setting.timeFormat}`, strict), true);
    } else {
      parsedTime = new DateTime((0, import_moment2.default)(date, this.setting.dateFormat, strict), false);
    }
    if (parsedTime.isValid()) {
      return { title, time: parsedTime };
    }
    return { title: originalText };
  }
};
var KanbanDateTimeFormat = _KanbanDateTimeFormat;
KanbanDateTimeFormat.instance = new _KanbanDateTimeFormat(kanbanSetting);
var KanbanReminderModel = class {
  constructor(title, time) {
    this.title = title;
    this.time = time;
  }
  static parse(line, strictDateFormat) {
    const splitted = KanbanDateTimeFormat.instance.split(line, strictDateFormat);
    if (splitted.time == null) {
      return null;
    }
    return new KanbanReminderModel(splitted.title, splitted.time);
  }
  getTitle() {
    return this.title.trim();
  }
  getTime() {
    if (this.time) {
      return this.time;
    }
    return null;
  }
  setTime(time) {
    this.time = time;
  }
  setRawTime() {
    return false;
  }
  getEndOfTimeTextIndex() {
    return this.toMarkdown().length;
  }
  toMarkdown() {
    return `${this.title.trim()} ${KanbanDateTimeFormat.instance.format(this.time)}`;
  }
};
var _KanbanReminderFormat = class extends TodoBasedReminderFormat {
  parseReminder(todo) {
    return KanbanReminderModel.parse(todo.body, this.isStrictDateFormat());
  }
  newReminder(title, time) {
    const parsed = new KanbanReminderModel(title, time);
    parsed.setTime(time);
    return parsed;
  }
};
var KanbanReminderFormat = _KanbanReminderFormat;
KanbanReminderFormat.instance = new _KanbanReminderFormat();

// src/model/format/reminder-tasks-plugin.ts
var import_moment3 = __toESM(require_moment());

// node_modules/rrule/dist/esm/weekday.js
var ALL_WEEKDAYS = [
  "MO",
  "TU",
  "WE",
  "TH",
  "FR",
  "SA",
  "SU"
];
var Weekday = function() {
  function Weekday2(weekday, n) {
    if (n === 0)
      throw new Error("Can't create weekday with n == 0");
    this.weekday = weekday;
    this.n = n;
  }
  Weekday2.fromStr = function(str) {
    return new Weekday2(ALL_WEEKDAYS.indexOf(str));
  };
  Weekday2.prototype.nth = function(n) {
    return this.n === n ? this : new Weekday2(this.weekday, n);
  };
  Weekday2.prototype.equals = function(other) {
    return this.weekday === other.weekday && this.n === other.n;
  };
  Weekday2.prototype.toString = function() {
    var s = ALL_WEEKDAYS[this.weekday];
    if (this.n)
      s = (this.n > 0 ? "+" : "") + String(this.n) + s;
    return s;
  };
  Weekday2.prototype.getJsWeekday = function() {
    return this.weekday === 6 ? 0 : this.weekday + 1;
  };
  return Weekday2;
}();

// node_modules/rrule/dist/esm/helpers.js
var isPresent = function(value) {
  return value !== null && value !== void 0;
};
var isNumber2 = function(value) {
  return typeof value === "number";
};
var isWeekdayStr = function(value) {
  return typeof value === "string" && ALL_WEEKDAYS.includes(value);
};
var isArray2 = Array.isArray;
var range = function(start, end) {
  if (end === void 0) {
    end = start;
  }
  if (arguments.length === 1) {
    end = start;
    start = 0;
  }
  var rang = [];
  for (var i = start; i < end; i++)
    rang.push(i);
  return rang;
};
var repeat = function(value, times) {
  var i = 0;
  var array = [];
  if (isArray2(value)) {
    for (; i < times; i++)
      array[i] = [].concat(value);
  } else {
    for (; i < times; i++)
      array[i] = value;
  }
  return array;
};
var toArray2 = function(item) {
  if (isArray2(item)) {
    return item;
  }
  return [item];
};
function padStart(item, targetLength, padString) {
  if (padString === void 0) {
    padString = " ";
  }
  var str = String(item);
  targetLength = targetLength >> 0;
  if (str.length > targetLength) {
    return String(str);
  }
  targetLength = targetLength - str.length;
  if (targetLength > padString.length) {
    padString += repeat(padString, targetLength / padString.length);
  }
  return padString.slice(0, targetLength) + String(str);
}
var split = function(str, sep, num) {
  var splits = str.split(sep);
  return num ? splits.slice(0, num).concat([splits.slice(num).join(sep)]) : splits;
};
var pymod = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
var divmod = function(a, b) {
  return { div: Math.floor(a / b), mod: pymod(a, b) };
};
var empty = function(obj) {
  return !isPresent(obj) || obj.length === 0;
};
var notEmpty = function(obj) {
  return !empty(obj);
};
var includes = function(arr, val) {
  return notEmpty(arr) && arr.indexOf(val) !== -1;
};

// node_modules/rrule/dist/esm/dateutil.js
var dateutil;
(function(dateutil2) {
  dateutil2.MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  dateutil2.ONE_DAY = 1e3 * 60 * 60 * 24;
  dateutil2.MAXYEAR = 9999;
  dateutil2.ORDINAL_BASE = new Date(Date.UTC(1970, 0, 1));
  dateutil2.PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];
  dateutil2.getYearDay = function(date) {
    var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
    return Math.ceil((dateNoTime.valueOf() - new Date(date.getUTCFullYear(), 0, 1).valueOf()) / dateutil2.ONE_DAY) + 1;
  };
  dateutil2.isLeapYear = function(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  };
  dateutil2.isDate = function(value) {
    return value instanceof Date;
  };
  dateutil2.isValidDate = function(value) {
    return dateutil2.isDate(value) && !isNaN(value.getTime());
  };
  dateutil2.tzOffset = function(date) {
    return date.getTimezoneOffset() * 60 * 1e3;
  };
  dateutil2.daysBetween = function(date1, date2) {
    var date1ms = date1.getTime() - dateutil2.tzOffset(date1);
    var date2ms = date2.getTime() - dateutil2.tzOffset(date2);
    var differencems = date1ms - date2ms;
    return Math.round(differencems / dateutil2.ONE_DAY);
  };
  dateutil2.toOrdinal = function(date) {
    return dateutil2.daysBetween(date, dateutil2.ORDINAL_BASE);
  };
  dateutil2.fromOrdinal = function(ordinal) {
    return new Date(dateutil2.ORDINAL_BASE.getTime() + ordinal * dateutil2.ONE_DAY);
  };
  dateutil2.getMonthDays = function(date) {
    var month = date.getUTCMonth();
    return month === 1 && dateutil2.isLeapYear(date.getUTCFullYear()) ? 29 : dateutil2.MONTH_DAYS[month];
  };
  dateutil2.getWeekday = function(date) {
    return dateutil2.PY_WEEKDAYS[date.getUTCDay()];
  };
  dateutil2.monthRange = function(year, month) {
    var date = new Date(Date.UTC(year, month, 1));
    return [dateutil2.getWeekday(date), dateutil2.getMonthDays(date)];
  };
  dateutil2.combine = function(date, time) {
    time = time || date;
    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));
  };
  dateutil2.clone = function(date) {
    var dolly = new Date(date.getTime());
    return dolly;
  };
  dateutil2.cloneDates = function(dates) {
    var clones = [];
    for (var i = 0; i < dates.length; i++) {
      clones.push(dateutil2.clone(dates[i]));
    }
    return clones;
  };
  dateutil2.sort = function(dates) {
    dates.sort(function(a, b) {
      return a.getTime() - b.getTime();
    });
  };
  dateutil2.timeToUntilString = function(time, utc) {
    if (utc === void 0) {
      utc = true;
    }
    var date = new Date(time);
    return [
      padStart(date.getUTCFullYear().toString(), 4, "0"),
      padStart(date.getUTCMonth() + 1, 2, "0"),
      padStart(date.getUTCDate(), 2, "0"),
      "T",
      padStart(date.getUTCHours(), 2, "0"),
      padStart(date.getUTCMinutes(), 2, "0"),
      padStart(date.getUTCSeconds(), 2, "0"),
      utc ? "Z" : ""
    ].join("");
  };
  dateutil2.untilStringToDate = function(until) {
    var re = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z?)?$/;
    var bits = re.exec(until);
    if (!bits)
      throw new Error("Invalid UNTIL value: ".concat(until));
    return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));
  };
})(dateutil || (dateutil = {}));
var dateutil_default = dateutil;

// node_modules/rrule/dist/esm/iterresult.js
var IterResult = function() {
  function IterResult2(method, args) {
    this.minDate = null;
    this.maxDate = null;
    this._result = [];
    this.total = 0;
    this.method = method;
    this.args = args;
    if (method === "between") {
      this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);
      this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);
    } else if (method === "before") {
      this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);
    } else if (method === "after") {
      this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);
    }
  }
  IterResult2.prototype.accept = function(date) {
    ++this.total;
    var tooEarly = this.minDate && date < this.minDate;
    var tooLate = this.maxDate && date > this.maxDate;
    if (this.method === "between") {
      if (tooEarly)
        return true;
      if (tooLate)
        return false;
    } else if (this.method === "before") {
      if (tooLate)
        return false;
    } else if (this.method === "after") {
      if (tooEarly)
        return true;
      this.add(date);
      return false;
    }
    return this.add(date);
  };
  IterResult2.prototype.add = function(date) {
    this._result.push(date);
    return true;
  };
  IterResult2.prototype.getValue = function() {
    var res = this._result;
    switch (this.method) {
      case "all":
      case "between":
        return res;
      case "before":
      case "after":
      default:
        return res.length ? res[res.length - 1] : null;
    }
  };
  IterResult2.prototype.clone = function() {
    return new IterResult2(this.method, this.args);
  };
  return IterResult2;
}();
var iterresult_default = IterResult;

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/rrule/dist/esm/callbackiterresult.js
var CallbackIterResult = function(_super) {
  __extends(CallbackIterResult2, _super);
  function CallbackIterResult2(method, args, iterator) {
    var _this = _super.call(this, method, args) || this;
    _this.iterator = iterator;
    return _this;
  }
  CallbackIterResult2.prototype.add = function(date) {
    if (this.iterator(date, this._result.length)) {
      this._result.push(date);
      return true;
    }
    return false;
  };
  return CallbackIterResult2;
}(iterresult_default);
var callbackiterresult_default = CallbackIterResult;

// node_modules/rrule/dist/esm/nlp/i18n.js
var ENGLISH = {
  dayNames: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  tokens: {
    SKIP: /^[ \r\n\t]+|^\.$/,
    number: /^[1-9][0-9]*/,
    numberAsText: /^(one|two|three)/i,
    every: /^every/i,
    "day(s)": /^days?/i,
    "weekday(s)": /^weekdays?/i,
    "week(s)": /^weeks?/i,
    "hour(s)": /^hours?/i,
    "minute(s)": /^minutes?/i,
    "month(s)": /^months?/i,
    "year(s)": /^years?/i,
    on: /^(on|in)/i,
    at: /^(at)/i,
    the: /^the/i,
    first: /^first/i,
    second: /^second/i,
    third: /^third/i,
    nth: /^([1-9][0-9]*)(\.|th|nd|rd|st)/i,
    last: /^last/i,
    for: /^for/i,
    "time(s)": /^times?/i,
    until: /^(un)?til/i,
    monday: /^mo(n(day)?)?/i,
    tuesday: /^tu(e(s(day)?)?)?/i,
    wednesday: /^we(d(n(esday)?)?)?/i,
    thursday: /^th(u(r(sday)?)?)?/i,
    friday: /^fr(i(day)?)?/i,
    saturday: /^sa(t(urday)?)?/i,
    sunday: /^su(n(day)?)?/i,
    january: /^jan(uary)?/i,
    february: /^feb(ruary)?/i,
    march: /^mar(ch)?/i,
    april: /^apr(il)?/i,
    may: /^may/i,
    june: /^june?/i,
    july: /^july?/i,
    august: /^aug(ust)?/i,
    september: /^sep(t(ember)?)?/i,
    october: /^oct(ober)?/i,
    november: /^nov(ember)?/i,
    december: /^dec(ember)?/i,
    comma: /^(,\s*|(and|or)\s*)+/i
  }
};
var i18n_default = ENGLISH;

// node_modules/rrule/dist/esm/nlp/totext.js
var contains = function(arr, val) {
  return arr.indexOf(val) !== -1;
};
var defaultGetText = function(id) {
  return id.toString();
};
var defaultDateFormatter = function(year, month, day) {
  return "".concat(month, " ").concat(day, ", ").concat(year);
};
var ToText = function() {
  function ToText2(rrule, gettext, language, dateFormatter) {
    if (gettext === void 0) {
      gettext = defaultGetText;
    }
    if (language === void 0) {
      language = i18n_default;
    }
    if (dateFormatter === void 0) {
      dateFormatter = defaultDateFormatter;
    }
    this.text = [];
    this.language = language || i18n_default;
    this.gettext = gettext;
    this.dateFormatter = dateFormatter;
    this.rrule = rrule;
    this.options = rrule.options;
    this.origOptions = rrule.origOptions;
    if (this.origOptions.bymonthday) {
      var bymonthday = [].concat(this.options.bymonthday);
      var bynmonthday = [].concat(this.options.bynmonthday);
      bymonthday.sort(function(a, b) {
        return a - b;
      });
      bynmonthday.sort(function(a, b) {
        return b - a;
      });
      this.bymonthday = bymonthday.concat(bynmonthday);
      if (!this.bymonthday.length)
        this.bymonthday = null;
    }
    if (isPresent(this.origOptions.byweekday)) {
      var byweekday = !isArray2(this.origOptions.byweekday) ? [this.origOptions.byweekday] : this.origOptions.byweekday;
      var days = String(byweekday);
      this.byweekday = {
        allWeeks: byweekday.filter(function(weekday) {
          return !weekday.n;
        }),
        someWeeks: byweekday.filter(function(weekday) {
          return Boolean(weekday.n);
        }),
        isWeekdays: days.indexOf("MO") !== -1 && days.indexOf("TU") !== -1 && days.indexOf("WE") !== -1 && days.indexOf("TH") !== -1 && days.indexOf("FR") !== -1 && days.indexOf("SA") === -1 && days.indexOf("SU") === -1,
        isEveryDay: days.indexOf("MO") !== -1 && days.indexOf("TU") !== -1 && days.indexOf("WE") !== -1 && days.indexOf("TH") !== -1 && days.indexOf("FR") !== -1 && days.indexOf("SA") !== -1 && days.indexOf("SU") !== -1
      };
      var sortWeekDays = function(a, b) {
        return a.weekday - b.weekday;
      };
      this.byweekday.allWeeks.sort(sortWeekDays);
      this.byweekday.someWeeks.sort(sortWeekDays);
      if (!this.byweekday.allWeeks.length)
        this.byweekday.allWeeks = null;
      if (!this.byweekday.someWeeks.length)
        this.byweekday.someWeeks = null;
    } else {
      this.byweekday = null;
    }
  }
  ToText2.isFullyConvertible = function(rrule) {
    var canConvert = true;
    if (!(rrule.options.freq in ToText2.IMPLEMENTED))
      return false;
    if (rrule.origOptions.until && rrule.origOptions.count)
      return false;
    for (var key in rrule.origOptions) {
      if (contains(["dtstart", "wkst", "freq"], key))
        return true;
      if (!contains(ToText2.IMPLEMENTED[rrule.options.freq], key))
        return false;
    }
    return canConvert;
  };
  ToText2.prototype.isFullyConvertible = function() {
    return ToText2.isFullyConvertible(this.rrule);
  };
  ToText2.prototype.toString = function() {
    var gettext = this.gettext;
    if (!(this.options.freq in ToText2.IMPLEMENTED)) {
      return gettext("RRule error: Unable to fully convert this rrule to text");
    }
    this.text = [gettext("every")];
    this[RRule.FREQUENCIES[this.options.freq]]();
    if (this.options.until) {
      this.add(gettext("until"));
      var until = this.options.until;
      this.add(this.dateFormatter(until.getUTCFullYear(), this.language.monthNames[until.getUTCMonth()], until.getUTCDate()));
    } else if (this.options.count) {
      this.add(gettext("for")).add(this.options.count.toString()).add(this.plural(this.options.count) ? gettext("times") : gettext("time"));
    }
    if (!this.isFullyConvertible())
      this.add(gettext("(~ approximate)"));
    return this.text.join("");
  };
  ToText2.prototype.HOURLY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    this.add(this.plural(this.options.interval) ? gettext("hours") : gettext("hour"));
  };
  ToText2.prototype.MINUTELY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    this.add(this.plural(this.options.interval) ? gettext("minutes") : gettext("minute"));
  };
  ToText2.prototype.DAILY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    if (this.byweekday && this.byweekday.isWeekdays) {
      this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
    } else {
      this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
    }
    if (this.origOptions.bymonth) {
      this.add(gettext("in"));
      this._bymonth();
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday) {
      this._byweekday();
    } else if (this.origOptions.byhour) {
      this._byhour();
    }
  };
  ToText2.prototype.WEEKLY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1) {
      this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? gettext("weeks") : gettext("week"));
    }
    if (this.byweekday && this.byweekday.isWeekdays) {
      if (this.options.interval === 1) {
        this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
      } else {
        this.add(gettext("on")).add(gettext("weekdays"));
      }
    } else if (this.byweekday && this.byweekday.isEveryDay) {
      this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
    } else {
      if (this.options.interval === 1)
        this.add(gettext("week"));
      if (this.origOptions.bymonth) {
        this.add(gettext("in"));
        this._bymonth();
      }
      if (this.bymonthday) {
        this._bymonthday();
      } else if (this.byweekday) {
        this._byweekday();
      }
    }
  };
  ToText2.prototype.MONTHLY = function() {
    var gettext = this.gettext;
    if (this.origOptions.bymonth) {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString()).add(gettext("months"));
        if (this.plural(this.options.interval))
          this.add(gettext("in"));
      } else {
      }
      this._bymonth();
    } else {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
      }
      this.add(this.plural(this.options.interval) ? gettext("months") : gettext("month"));
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday && this.byweekday.isWeekdays) {
      this.add(gettext("on")).add(gettext("weekdays"));
    } else if (this.byweekday) {
      this._byweekday();
    }
  };
  ToText2.prototype.YEARLY = function() {
    var gettext = this.gettext;
    if (this.origOptions.bymonth) {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
        this.add(gettext("years"));
      } else {
      }
      this._bymonth();
    } else {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
      }
      this.add(this.plural(this.options.interval) ? gettext("years") : gettext("year"));
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday) {
      this._byweekday();
    }
    if (this.options.byyearday) {
      this.add(gettext("on the")).add(this.list(this.options.byyearday, this.nth, gettext("and"))).add(gettext("day"));
    }
    if (this.options.byweekno) {
      this.add(gettext("in")).add(this.plural(this.options.byweekno.length) ? gettext("weeks") : gettext("week")).add(this.list(this.options.byweekno, void 0, gettext("and")));
    }
  };
  ToText2.prototype._bymonthday = function() {
    var gettext = this.gettext;
    if (this.byweekday && this.byweekday.allWeeks) {
      this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext("or"))).add(gettext("the")).add(this.list(this.bymonthday, this.nth, gettext("or")));
    } else {
      this.add(gettext("on the")).add(this.list(this.bymonthday, this.nth, gettext("and")));
    }
  };
  ToText2.prototype._byweekday = function() {
    var gettext = this.gettext;
    if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {
      this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext));
    }
    if (this.byweekday.someWeeks) {
      if (this.byweekday.allWeeks)
        this.add(gettext("and"));
      this.add(gettext("on the")).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext("and")));
    }
  };
  ToText2.prototype._byhour = function() {
    var gettext = this.gettext;
    this.add(gettext("at")).add(this.list(this.origOptions.byhour, void 0, gettext("and")));
  };
  ToText2.prototype._bymonth = function() {
    this.add(this.list(this.options.bymonth, this.monthtext, this.gettext("and")));
  };
  ToText2.prototype.nth = function(n) {
    n = parseInt(n.toString(), 10);
    var nth;
    var gettext = this.gettext;
    if (n === -1)
      return gettext("last");
    var npos = Math.abs(n);
    switch (npos) {
      case 1:
      case 21:
      case 31:
        nth = npos + gettext("st");
        break;
      case 2:
      case 22:
        nth = npos + gettext("nd");
        break;
      case 3:
      case 23:
        nth = npos + gettext("rd");
        break;
      default:
        nth = npos + gettext("th");
    }
    return n < 0 ? nth + " " + gettext("last") : nth;
  };
  ToText2.prototype.monthtext = function(m) {
    return this.language.monthNames[m - 1];
  };
  ToText2.prototype.weekdaytext = function(wday) {
    var weekday = isNumber2(wday) ? (wday + 1) % 7 : wday.getJsWeekday();
    return (wday.n ? this.nth(wday.n) + " " : "") + this.language.dayNames[weekday];
  };
  ToText2.prototype.plural = function(n) {
    return n % 100 !== 1;
  };
  ToText2.prototype.add = function(s) {
    this.text.push(" ");
    this.text.push(s);
    return this;
  };
  ToText2.prototype.list = function(arr, callback, finalDelim, delim) {
    var _this = this;
    if (delim === void 0) {
      delim = ",";
    }
    if (!isArray2(arr)) {
      arr = [arr];
    }
    var delimJoin = function(array, delimiter, finalDelimiter) {
      var list = "";
      for (var i = 0; i < array.length; i++) {
        if (i !== 0) {
          if (i === array.length - 1) {
            list += " " + finalDelimiter + " ";
          } else {
            list += delimiter + " ";
          }
        }
        list += array[i];
      }
      return list;
    };
    callback = callback || function(o) {
      return o.toString();
    };
    var realCallback = function(arg) {
      return callback && callback.call(_this, arg);
    };
    if (finalDelim) {
      return delimJoin(arr.map(realCallback), delim, finalDelim);
    } else {
      return arr.map(realCallback).join(delim + " ");
    }
  };
  return ToText2;
}();
var totext_default = ToText;

// node_modules/rrule/dist/esm/nlp/parsetext.js
var Parser = function() {
  function Parser2(rules) {
    this.done = true;
    this.rules = rules;
  }
  Parser2.prototype.start = function(text) {
    this.text = text;
    this.done = false;
    return this.nextSymbol();
  };
  Parser2.prototype.isDone = function() {
    return this.done && this.symbol === null;
  };
  Parser2.prototype.nextSymbol = function() {
    var best;
    var bestSymbol;
    this.symbol = null;
    this.value = null;
    do {
      if (this.done)
        return false;
      var rule = void 0;
      best = null;
      for (var name_1 in this.rules) {
        rule = this.rules[name_1];
        var match = rule.exec(this.text);
        if (match) {
          if (best === null || match[0].length > best[0].length) {
            best = match;
            bestSymbol = name_1;
          }
        }
      }
      if (best != null) {
        this.text = this.text.substr(best[0].length);
        if (this.text === "")
          this.done = true;
      }
      if (best == null) {
        this.done = true;
        this.symbol = null;
        this.value = null;
        return;
      }
    } while (bestSymbol === "SKIP");
    this.symbol = bestSymbol;
    this.value = best;
    return true;
  };
  Parser2.prototype.accept = function(name) {
    if (this.symbol === name) {
      if (this.value) {
        var v = this.value;
        this.nextSymbol();
        return v;
      }
      this.nextSymbol();
      return true;
    }
    return false;
  };
  Parser2.prototype.acceptNumber = function() {
    return this.accept("number");
  };
  Parser2.prototype.expect = function(name) {
    if (this.accept(name))
      return true;
    throw new Error("expected " + name + " but found " + this.symbol);
  };
  return Parser2;
}();
function parseText(text, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  var options = {};
  var ttr = new Parser(language.tokens);
  if (!ttr.start(text))
    return null;
  S();
  return options;
  function S() {
    ttr.expect("every");
    var n = ttr.acceptNumber();
    if (n)
      options.interval = parseInt(n[0], 10);
    if (ttr.isDone())
      throw new Error("Unexpected end");
    switch (ttr.symbol) {
      case "day(s)":
        options.freq = RRule.DAILY;
        if (ttr.nextSymbol()) {
          AT();
          F();
        }
        break;
      case "weekday(s)":
        options.freq = RRule.WEEKLY;
        options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        ttr.nextSymbol();
        F();
        break;
      case "week(s)":
        options.freq = RRule.WEEKLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "hour(s)":
        options.freq = RRule.HOURLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "minute(s)":
        options.freq = RRule.MINUTELY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "month(s)":
        options.freq = RRule.MONTHLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "year(s)":
        options.freq = RRule.YEARLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        options.freq = RRule.WEEKLY;
        var key = ttr.symbol.substr(0, 2).toUpperCase();
        options.byweekday = [RRule[key]];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var wkd = decodeWKD();
          if (!wkd) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected weekday");
          }
          options.byweekday.push(RRule[wkd]);
          ttr.nextSymbol();
        }
        MDAYs();
        F();
        break;
      case "january":
      case "february":
      case "march":
      case "april":
      case "may":
      case "june":
      case "july":
      case "august":
      case "september":
      case "october":
      case "november":
      case "december":
        options.freq = RRule.YEARLY;
        options.bymonth = [decodeM()];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var m = decodeM();
          if (!m) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected month");
          }
          options.bymonth.push(m);
          ttr.nextSymbol();
        }
        ON();
        F();
        break;
      default:
        throw new Error("Unknown symbol");
    }
  }
  function ON() {
    var on = ttr.accept("on");
    var the = ttr.accept("the");
    if (!(on || the))
      return;
    do {
      var nth = decodeNTH();
      var wkd = decodeWKD();
      var m = decodeM();
      if (nth) {
        if (wkd) {
          ttr.nextSymbol();
          if (!options.byweekday)
            options.byweekday = [];
          options.byweekday.push(RRule[wkd].nth(nth));
        } else {
          if (!options.bymonthday)
            options.bymonthday = [];
          options.bymonthday.push(nth);
          ttr.accept("day(s)");
        }
      } else if (wkd) {
        ttr.nextSymbol();
        if (!options.byweekday)
          options.byweekday = [];
        options.byweekday.push(RRule[wkd]);
      } else if (ttr.symbol === "weekday(s)") {
        ttr.nextSymbol();
        if (!options.byweekday) {
          options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        }
      } else if (ttr.symbol === "week(s)") {
        ttr.nextSymbol();
        var n = ttr.acceptNumber();
        if (!n) {
          throw new Error("Unexpected symbol " + ttr.symbol + ", expected week number");
        }
        options.byweekno = [parseInt(n[0], 10)];
        while (ttr.accept("comma")) {
          n = ttr.acceptNumber();
          if (!n) {
            throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
          }
          options.byweekno.push(parseInt(n[0], 10));
        }
      } else if (m) {
        ttr.nextSymbol();
        if (!options.bymonth)
          options.bymonth = [];
        options.bymonth.push(m);
      } else {
        return;
      }
    } while (ttr.accept("comma") || ttr.accept("the") || ttr.accept("on"));
  }
  function AT() {
    var at = ttr.accept("at");
    if (!at)
      return;
    do {
      var n = ttr.acceptNumber();
      if (!n) {
        throw new Error("Unexpected symbol " + ttr.symbol + ", expected hour");
      }
      options.byhour = [parseInt(n[0], 10)];
      while (ttr.accept("comma")) {
        n = ttr.acceptNumber();
        if (!n) {
          throw new Error("Unexpected symbol " + ttr.symbol + "; expected hour");
        }
        options.byhour.push(parseInt(n[0], 10));
      }
    } while (ttr.accept("comma") || ttr.accept("at"));
  }
  function decodeM() {
    switch (ttr.symbol) {
      case "january":
        return 1;
      case "february":
        return 2;
      case "march":
        return 3;
      case "april":
        return 4;
      case "may":
        return 5;
      case "june":
        return 6;
      case "july":
        return 7;
      case "august":
        return 8;
      case "september":
        return 9;
      case "october":
        return 10;
      case "november":
        return 11;
      case "december":
        return 12;
      default:
        return false;
    }
  }
  function decodeWKD() {
    switch (ttr.symbol) {
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        return ttr.symbol.substr(0, 2).toUpperCase();
      default:
        return false;
    }
  }
  function decodeNTH() {
    switch (ttr.symbol) {
      case "last":
        ttr.nextSymbol();
        return -1;
      case "first":
        ttr.nextSymbol();
        return 1;
      case "second":
        ttr.nextSymbol();
        return ttr.accept("last") ? -2 : 2;
      case "third":
        ttr.nextSymbol();
        return ttr.accept("last") ? -3 : 3;
      case "nth":
        var v = parseInt(ttr.value[1], 10);
        if (v < -366 || v > 366)
          throw new Error("Nth out of range: " + v);
        ttr.nextSymbol();
        return ttr.accept("last") ? -v : v;
      default:
        return false;
    }
  }
  function MDAYs() {
    ttr.accept("on");
    ttr.accept("the");
    var nth = decodeNTH();
    if (!nth)
      return;
    options.bymonthday = [nth];
    ttr.nextSymbol();
    while (ttr.accept("comma")) {
      nth = decodeNTH();
      if (!nth) {
        throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
      }
      options.bymonthday.push(nth);
      ttr.nextSymbol();
    }
  }
  function F() {
    if (ttr.symbol === "until") {
      var date = Date.parse(ttr.text);
      if (!date)
        throw new Error("Cannot parse until date:" + ttr.text);
      options.until = new Date(date);
    } else if (ttr.accept("for")) {
      options.count = parseInt(ttr.value[0], 10);
      ttr.expect("number");
    }
  }
}

// node_modules/rrule/dist/esm/types.js
var Frequency;
(function(Frequency2) {
  Frequency2[Frequency2["YEARLY"] = 0] = "YEARLY";
  Frequency2[Frequency2["MONTHLY"] = 1] = "MONTHLY";
  Frequency2[Frequency2["WEEKLY"] = 2] = "WEEKLY";
  Frequency2[Frequency2["DAILY"] = 3] = "DAILY";
  Frequency2[Frequency2["HOURLY"] = 4] = "HOURLY";
  Frequency2[Frequency2["MINUTELY"] = 5] = "MINUTELY";
  Frequency2[Frequency2["SECONDLY"] = 6] = "SECONDLY";
})(Frequency || (Frequency = {}));
function freqIsDailyOrGreater(freq) {
  return freq < Frequency.HOURLY;
}

// node_modules/rrule/dist/esm/nlp/index.js
var fromText = function(text, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  return new RRule(parseText(text, language) || void 0);
};
var common = [
  "count",
  "until",
  "interval",
  "byweekday",
  "bymonthday",
  "bymonth"
];
totext_default.IMPLEMENTED = [];
totext_default.IMPLEMENTED[Frequency.HOURLY] = common;
totext_default.IMPLEMENTED[Frequency.MINUTELY] = common;
totext_default.IMPLEMENTED[Frequency.DAILY] = ["byhour"].concat(common);
totext_default.IMPLEMENTED[Frequency.WEEKLY] = common;
totext_default.IMPLEMENTED[Frequency.MONTHLY] = common;
totext_default.IMPLEMENTED[Frequency.YEARLY] = ["byweekno", "byyearday"].concat(common);
var toText = function(rrule, gettext, language, dateFormatter) {
  return new totext_default(rrule, gettext, language, dateFormatter).toString();
};
var isFullyConvertible = totext_default.isFullyConvertible;

// node_modules/rrule/dist/esm/datetime.js
var Time3 = function() {
  function Time5(hour, minute, second, millisecond) {
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond || 0;
  }
  Time5.prototype.getHours = function() {
    return this.hour;
  };
  Time5.prototype.getMinutes = function() {
    return this.minute;
  };
  Time5.prototype.getSeconds = function() {
    return this.second;
  };
  Time5.prototype.getMilliseconds = function() {
    return this.millisecond;
  };
  Time5.prototype.getTime = function() {
    return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1e3 + this.millisecond;
  };
  return Time5;
}();
var DateTime3 = function(_super) {
  __extends(DateTime4, _super);
  function DateTime4(year, month, day, hour, minute, second, millisecond) {
    var _this = _super.call(this, hour, minute, second, millisecond) || this;
    _this.year = year;
    _this.month = month;
    _this.day = day;
    return _this;
  }
  DateTime4.fromDate = function(date) {
    return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1e3);
  };
  DateTime4.prototype.getWeekday = function() {
    return dateutil.getWeekday(new Date(this.getTime()));
  };
  DateTime4.prototype.getTime = function() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();
  };
  DateTime4.prototype.getDay = function() {
    return this.day;
  };
  DateTime4.prototype.getMonth = function() {
    return this.month;
  };
  DateTime4.prototype.getYear = function() {
    return this.year;
  };
  DateTime4.prototype.addYears = function(years) {
    this.year += years;
  };
  DateTime4.prototype.addMonths = function(months) {
    this.month += months;
    if (this.month > 12) {
      var yearDiv = Math.floor(this.month / 12);
      var monthMod = pymod(this.month, 12);
      this.month = monthMod;
      this.year += yearDiv;
      if (this.month === 0) {
        this.month = 12;
        --this.year;
      }
    }
  };
  DateTime4.prototype.addWeekly = function(days, wkst) {
    if (wkst > this.getWeekday()) {
      this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;
    } else {
      this.day += -(this.getWeekday() - wkst) + days * 7;
    }
    this.fixDay();
  };
  DateTime4.prototype.addDaily = function(days) {
    this.day += days;
    this.fixDay();
  };
  DateTime4.prototype.addHours = function(hours, filtered, byhour) {
    if (filtered) {
      this.hour += Math.floor((23 - this.hour) / hours) * hours;
    }
    for (; ; ) {
      this.hour += hours;
      var _a = divmod(this.hour, 24), dayDiv = _a.div, hourMod = _a.mod;
      if (dayDiv) {
        this.hour = hourMod;
        this.addDaily(dayDiv);
      }
      if (empty(byhour) || includes(byhour, this.hour))
        break;
    }
  };
  DateTime4.prototype.addMinutes = function(minutes, filtered, byhour, byminute) {
    if (filtered) {
      this.minute += Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;
    }
    for (; ; ) {
      this.minute += minutes;
      var _a = divmod(this.minute, 60), hourDiv = _a.div, minuteMod = _a.mod;
      if (hourDiv) {
        this.minute = minuteMod;
        this.addHours(hourDiv, false, byhour);
      }
      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute))) {
        break;
      }
    }
  };
  DateTime4.prototype.addSeconds = function(seconds, filtered, byhour, byminute, bysecond) {
    if (filtered) {
      this.second += Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;
    }
    for (; ; ) {
      this.second += seconds;
      var _a = divmod(this.second, 60), minuteDiv = _a.div, secondMod = _a.mod;
      if (minuteDiv) {
        this.second = secondMod;
        this.addMinutes(minuteDiv, false, byhour, byminute);
      }
      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute)) && (empty(bysecond) || includes(bysecond, this.second))) {
        break;
      }
    }
  };
  DateTime4.prototype.fixDay = function() {
    if (this.day <= 28) {
      return;
    }
    var daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];
    if (this.day <= daysinmonth) {
      return;
    }
    while (this.day > daysinmonth) {
      this.day -= daysinmonth;
      ++this.month;
      if (this.month === 13) {
        this.month = 1;
        ++this.year;
        if (this.year > dateutil.MAXYEAR) {
          return;
        }
      }
      daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];
    }
  };
  DateTime4.prototype.add = function(options, filtered) {
    var freq = options.freq, interval = options.interval, wkst = options.wkst, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
    switch (freq) {
      case Frequency.YEARLY:
        return this.addYears(interval);
      case Frequency.MONTHLY:
        return this.addMonths(interval);
      case Frequency.WEEKLY:
        return this.addWeekly(interval, wkst);
      case Frequency.DAILY:
        return this.addDaily(interval);
      case Frequency.HOURLY:
        return this.addHours(interval, filtered, byhour);
      case Frequency.MINUTELY:
        return this.addMinutes(interval, filtered, byhour, byminute);
      case Frequency.SECONDLY:
        return this.addSeconds(interval, filtered, byhour, byminute, bysecond);
    }
  };
  return DateTime4;
}(Time3);

// node_modules/rrule/dist/esm/parseoptions.js
function initializeOptions(options) {
  var invalid = [];
  var keys = Object.keys(options);
  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    if (!includes(defaultKeys, key))
      invalid.push(key);
    if (dateutil_default.isDate(options[key]) && !dateutil_default.isValidDate(options[key])) {
      invalid.push(key);
    }
  }
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign({}, options);
}
function parseOptions(options) {
  var opts = __assign(__assign({}, DEFAULT_OPTIONS), initializeOptions(options));
  if (isPresent(opts.byeaster))
    opts.freq = RRule.YEARLY;
  if (!(isPresent(opts.freq) && RRule.FREQUENCIES[opts.freq])) {
    throw new Error("Invalid frequency: ".concat(opts.freq, " ").concat(options.freq));
  }
  if (!opts.dtstart)
    opts.dtstart = new Date(new Date().setMilliseconds(0));
  if (!isPresent(opts.wkst)) {
    opts.wkst = RRule.MO.weekday;
  } else if (isNumber2(opts.wkst)) {
  } else {
    opts.wkst = opts.wkst.weekday;
  }
  if (isPresent(opts.bysetpos)) {
    if (isNumber2(opts.bysetpos))
      opts.bysetpos = [opts.bysetpos];
    for (var i = 0; i < opts.bysetpos.length; i++) {
      var v = opts.bysetpos[i];
      if (v === 0 || !(v >= -366 && v <= 366)) {
        throw new Error("bysetpos must be between 1 and 366, or between -366 and -1");
      }
    }
  }
  if (!(Boolean(opts.byweekno) || notEmpty(opts.byweekno) || notEmpty(opts.byyearday) || Boolean(opts.bymonthday) || notEmpty(opts.bymonthday) || isPresent(opts.byweekday) || isPresent(opts.byeaster))) {
    switch (opts.freq) {
      case RRule.YEARLY:
        if (!opts.bymonth)
          opts.bymonth = opts.dtstart.getUTCMonth() + 1;
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.MONTHLY:
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.WEEKLY:
        opts.byweekday = [dateutil_default.getWeekday(opts.dtstart)];
        break;
    }
  }
  if (isPresent(opts.bymonth) && !isArray2(opts.bymonth)) {
    opts.bymonth = [opts.bymonth];
  }
  if (isPresent(opts.byyearday) && !isArray2(opts.byyearday) && isNumber2(opts.byyearday)) {
    opts.byyearday = [opts.byyearday];
  }
  if (!isPresent(opts.bymonthday)) {
    opts.bymonthday = [];
    opts.bynmonthday = [];
  } else if (isArray2(opts.bymonthday)) {
    var bymonthday = [];
    var bynmonthday = [];
    for (var i = 0; i < opts.bymonthday.length; i++) {
      var v = opts.bymonthday[i];
      if (v > 0) {
        bymonthday.push(v);
      } else if (v < 0) {
        bynmonthday.push(v);
      }
    }
    opts.bymonthday = bymonthday;
    opts.bynmonthday = bynmonthday;
  } else if (opts.bymonthday < 0) {
    opts.bynmonthday = [opts.bymonthday];
    opts.bymonthday = [];
  } else {
    opts.bynmonthday = [];
    opts.bymonthday = [opts.bymonthday];
  }
  if (isPresent(opts.byweekno) && !isArray2(opts.byweekno)) {
    opts.byweekno = [opts.byweekno];
  }
  if (!isPresent(opts.byweekday)) {
    opts.bynweekday = null;
  } else if (isNumber2(opts.byweekday)) {
    opts.byweekday = [opts.byweekday];
    opts.bynweekday = null;
  } else if (isWeekdayStr(opts.byweekday)) {
    opts.byweekday = [Weekday.fromStr(opts.byweekday).weekday];
    opts.bynweekday = null;
  } else if (opts.byweekday instanceof Weekday) {
    if (!opts.byweekday.n || opts.freq > RRule.MONTHLY) {
      opts.byweekday = [opts.byweekday.weekday];
      opts.bynweekday = null;
    } else {
      opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];
      opts.byweekday = null;
    }
  } else {
    var byweekday = [];
    var bynweekday = [];
    for (var i = 0; i < opts.byweekday.length; i++) {
      var wday = opts.byweekday[i];
      if (isNumber2(wday)) {
        byweekday.push(wday);
        continue;
      } else if (isWeekdayStr(wday)) {
        byweekday.push(Weekday.fromStr(wday).weekday);
        continue;
      }
      if (!wday.n || opts.freq > RRule.MONTHLY) {
        byweekday.push(wday.weekday);
      } else {
        bynweekday.push([wday.weekday, wday.n]);
      }
    }
    opts.byweekday = notEmpty(byweekday) ? byweekday : null;
    opts.bynweekday = notEmpty(bynweekday) ? bynweekday : null;
  }
  if (!isPresent(opts.byhour)) {
    opts.byhour = opts.freq < RRule.HOURLY ? [opts.dtstart.getUTCHours()] : null;
  } else if (isNumber2(opts.byhour)) {
    opts.byhour = [opts.byhour];
  }
  if (!isPresent(opts.byminute)) {
    opts.byminute = opts.freq < RRule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;
  } else if (isNumber2(opts.byminute)) {
    opts.byminute = [opts.byminute];
  }
  if (!isPresent(opts.bysecond)) {
    opts.bysecond = opts.freq < RRule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;
  } else if (isNumber2(opts.bysecond)) {
    opts.bysecond = [opts.bysecond];
  }
  return { parsedOptions: opts };
}
function buildTimeset(opts) {
  var millisecondModulo = opts.dtstart.getTime() % 1e3;
  if (!freqIsDailyOrGreater(opts.freq)) {
    return [];
  }
  var timeset = [];
  opts.byhour.forEach(function(hour) {
    opts.byminute.forEach(function(minute) {
      opts.bysecond.forEach(function(second) {
        timeset.push(new Time3(hour, minute, second, millisecondModulo));
      });
    });
  });
  return timeset;
}

// node_modules/rrule/dist/esm/parsestring.js
function parseString(rfcString) {
  var options = rfcString.split("\n").map(parseLine).filter(function(x) {
    return x !== null;
  });
  return __assign(__assign({}, options[0]), options[1]);
}
function parseDtstart(line) {
  var options = {};
  var dtstartWithZone = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\s]+)/i.exec(line);
  if (!dtstartWithZone) {
    return options;
  }
  var tzid = dtstartWithZone[1], dtstart = dtstartWithZone[2];
  if (tzid) {
    options.tzid = tzid;
  }
  options.dtstart = dateutil_default.untilStringToDate(dtstart);
  return options;
}
function parseLine(rfcString) {
  rfcString = rfcString.replace(/^\s+|\s+$/, "");
  if (!rfcString.length)
    return null;
  var header = /^([A-Z]+?)[:;]/.exec(rfcString.toUpperCase());
  if (!header) {
    return parseRrule(rfcString);
  }
  var key = header[1];
  switch (key.toUpperCase()) {
    case "RRULE":
    case "EXRULE":
      return parseRrule(rfcString);
    case "DTSTART":
      return parseDtstart(rfcString);
    default:
      throw new Error("Unsupported RFC prop ".concat(key, " in ").concat(rfcString));
  }
}
function parseRrule(line) {
  var strippedLine = line.replace(/^RRULE:/i, "");
  var options = parseDtstart(strippedLine);
  var attrs = line.replace(/^(?:RRULE|EXRULE):/i, "").split(";");
  attrs.forEach(function(attr) {
    var _a = attr.split("="), key = _a[0], value = _a[1];
    switch (key.toUpperCase()) {
      case "FREQ":
        options.freq = Frequency[value.toUpperCase()];
        break;
      case "WKST":
        options.wkst = Days[value.toUpperCase()];
        break;
      case "COUNT":
      case "INTERVAL":
      case "BYSETPOS":
      case "BYMONTH":
      case "BYMONTHDAY":
      case "BYYEARDAY":
      case "BYWEEKNO":
      case "BYHOUR":
      case "BYMINUTE":
      case "BYSECOND":
        var num = parseNumber(value);
        var optionKey = key.toLowerCase();
        options[optionKey] = num;
        break;
      case "BYWEEKDAY":
      case "BYDAY":
        options.byweekday = parseWeekday(value);
        break;
      case "DTSTART":
      case "TZID":
        var dtstart = parseDtstart(line);
        options.tzid = dtstart.tzid;
        options.dtstart = dtstart.dtstart;
        break;
      case "UNTIL":
        options.until = dateutil_default.untilStringToDate(value);
        break;
      case "BYEASTER":
        options.byeaster = Number(value);
        break;
      default:
        throw new Error("Unknown RRULE property '" + key + "'");
    }
  });
  return options;
}
function parseNumber(value) {
  if (value.indexOf(",") !== -1) {
    var values = value.split(",");
    return values.map(parseIndividualNumber);
  }
  return parseIndividualNumber(value);
}
function parseIndividualNumber(value) {
  if (/^[+-]?\d+$/.test(value)) {
    return Number(value);
  }
  return value;
}
function parseWeekday(value) {
  var days = value.split(",");
  return days.map(function(day) {
    if (day.length === 2) {
      return Days[day];
    }
    var parts = day.match(/^([+-]?\d{1,2})([A-Z]{2})$/);
    if (!parts || parts.length < 3) {
      throw new SyntaxError("Invalid weekday string: ".concat(day));
    }
    var n = Number(parts[1]);
    var wdaypart = parts[2];
    var wday = Days[wdaypart].weekday;
    return new Weekday(wday, n);
  });
}

// node_modules/rrule/dist/esm/datewithzone.js
var DateWithZone = function() {
  function DateWithZone2(date, tzid) {
    if (isNaN(date.getTime())) {
      throw new RangeError("Invalid date passed to DateWithZone");
    }
    this.date = date;
    this.tzid = tzid;
  }
  Object.defineProperty(DateWithZone2.prototype, "isUTC", {
    get: function() {
      return !this.tzid || this.tzid.toUpperCase() === "UTC";
    },
    enumerable: false,
    configurable: true
  });
  DateWithZone2.prototype.toString = function() {
    var datestr = dateutil_default.timeToUntilString(this.date.getTime(), this.isUTC);
    if (!this.isUTC) {
      return ";TZID=".concat(this.tzid, ":").concat(datestr);
    }
    return ":".concat(datestr);
  };
  DateWithZone2.prototype.getTime = function() {
    return this.date.getTime();
  };
  DateWithZone2.prototype.rezonedDate = function() {
    var _a;
    if (this.isUTC) {
      return this.date;
    }
    var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    var dateInLocalTZ = new Date(this.date.toLocaleString(void 0, { timeZone: localTimeZone }));
    var dateInTargetTZ = new Date(this.date.toLocaleString(void 0, { timeZone: (_a = this.tzid) !== null && _a !== void 0 ? _a : "UTC" }));
    var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();
    return new Date(this.date.getTime() - tzOffset);
  };
  return DateWithZone2;
}();

// node_modules/rrule/dist/esm/optionstostring.js
function optionsToString(options) {
  var rrule = [];
  var dtstart = "";
  var keys = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS);
  for (var i = 0; i < keys.length; i++) {
    if (keys[i] === "tzid")
      continue;
    if (!includes(defaultKeys2, keys[i]))
      continue;
    var key = keys[i].toUpperCase();
    var value = options[keys[i]];
    var outValue = "";
    if (!isPresent(value) || isArray2(value) && !value.length)
      continue;
    switch (key) {
      case "FREQ":
        outValue = RRule.FREQUENCIES[options.freq];
        break;
      case "WKST":
        if (isNumber2(value)) {
          outValue = new Weekday(value).toString();
        } else {
          outValue = value.toString();
        }
        break;
      case "BYWEEKDAY":
        key = "BYDAY";
        outValue = toArray2(value).map(function(wday) {
          if (wday instanceof Weekday) {
            return wday;
          }
          if (isArray2(wday)) {
            return new Weekday(wday[0], wday[1]);
          }
          return new Weekday(wday);
        }).toString();
        break;
      case "DTSTART":
        dtstart = buildDtstart(value, options.tzid);
        break;
      case "UNTIL":
        outValue = dateutil_default.timeToUntilString(value, !options.tzid);
        break;
      default:
        if (isArray2(value)) {
          var strValues = [];
          for (var j = 0; j < value.length; j++) {
            strValues[j] = String(value[j]);
          }
          outValue = strValues.toString();
        } else {
          outValue = String(value);
        }
    }
    if (outValue) {
      rrule.push([key, outValue]);
    }
  }
  var rules = rrule.map(function(_a) {
    var key2 = _a[0], value2 = _a[1];
    return "".concat(key2, "=").concat(value2.toString());
  }).join(";");
  var ruleString = "";
  if (rules !== "") {
    ruleString = "RRULE:".concat(rules);
  }
  return [dtstart, ruleString].filter(function(x) {
    return !!x;
  }).join("\n");
}
function buildDtstart(dtstart, tzid) {
  if (!dtstart) {
    return "";
  }
  return "DTSTART" + new DateWithZone(new Date(dtstart), tzid).toString();
}

// node_modules/rrule/dist/esm/cache.js
function argsMatch(left, right) {
  if (Array.isArray(left)) {
    if (!Array.isArray(right))
      return false;
    if (left.length !== right.length)
      return false;
    return left.every(function(date, i) {
      return date.getTime() === right[i].getTime();
    });
  }
  if (left instanceof Date) {
    return right instanceof Date && left.getTime() === right.getTime();
  }
  return left === right;
}
var Cache = function() {
  function Cache2() {
    this.all = false;
    this.before = [];
    this.after = [];
    this.between = [];
  }
  Cache2.prototype._cacheAdd = function(what, value, args) {
    if (value) {
      value = value instanceof Date ? dateutil_default.clone(value) : dateutil_default.cloneDates(value);
    }
    if (what === "all") {
      this.all = value;
    } else {
      args._value = value;
      this[what].push(args);
    }
  };
  Cache2.prototype._cacheGet = function(what, args) {
    var cached = false;
    var argsKeys = args ? Object.keys(args) : [];
    var findCacheDiff = function(item2) {
      for (var i2 = 0; i2 < argsKeys.length; i2++) {
        var key = argsKeys[i2];
        if (!argsMatch(args[key], item2[key])) {
          return true;
        }
      }
      return false;
    };
    var cachedObject = this[what];
    if (what === "all") {
      cached = this.all;
    } else if (isArray2(cachedObject)) {
      for (var i = 0; i < cachedObject.length; i++) {
        var item = cachedObject[i];
        if (argsKeys.length && findCacheDiff(item))
          continue;
        cached = item._value;
        break;
      }
    }
    if (!cached && this.all) {
      var iterResult = new iterresult_default(what, args);
      for (var i = 0; i < this.all.length; i++) {
        if (!iterResult.accept(this.all[i]))
          break;
      }
      cached = iterResult.getValue();
      this._cacheAdd(what, cached, args);
    }
    return isArray2(cached) ? dateutil_default.cloneDates(cached) : cached instanceof Date ? dateutil_default.clone(cached) : cached;
  };
  return Cache2;
}();

// node_modules/rrule/dist/esm/masks.js
var M365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], repeat(1, 31), true), repeat(2, 28), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], repeat(1, 31), true), repeat(2, 29), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M28 = range(1, 29);
var M29 = range(1, 30);
var M30 = range(1, 31);
var M31 = range(1, 32);
var MDAY366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], M31, true), M29, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var MDAY365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], M31, true), M28, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var NM28 = range(-28, 0);
var NM29 = range(-29, 0);
var NM30 = range(-30, 0);
var NM31 = range(-31, 0);
var NMDAY366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], NM31, true), NM29, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var NMDAY365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], NM31, true), NM28, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
var WDAYMASK = function() {
  var wdaymask = [];
  for (var i = 0; i < 55; i++)
    wdaymask = wdaymask.concat(range(7));
  return wdaymask;
}();

// node_modules/rrule/dist/esm/iterinfo/yearinfo.js
function rebuildYear(year, options) {
  var firstyday = new Date(Date.UTC(year, 0, 1));
  var yearlen = dateutil_default.isLeapYear(year) ? 366 : 365;
  var nextyearlen = dateutil_default.isLeapYear(year + 1) ? 366 : 365;
  var yearordinal = dateutil_default.toOrdinal(firstyday);
  var yearweekday = dateutil_default.getWeekday(firstyday);
  var result = __assign(__assign({ yearlen, nextyearlen, yearordinal, yearweekday }, baseYearMasks(year)), { wnomask: null });
  if (empty(options.byweekno)) {
    return result;
  }
  result.wnomask = repeat(0, yearlen + 7);
  var firstwkst;
  var wyearlen;
  var no1wkst = firstwkst = pymod(7 - yearweekday + options.wkst, 7);
  if (no1wkst >= 4) {
    no1wkst = 0;
    wyearlen = result.yearlen + pymod(yearweekday - options.wkst, 7);
  } else {
    wyearlen = yearlen - no1wkst;
  }
  var div = Math.floor(wyearlen / 7);
  var mod = pymod(wyearlen, 7);
  var numweeks = Math.floor(div + mod / 4);
  for (var j = 0; j < options.byweekno.length; j++) {
    var n = options.byweekno[j];
    if (n < 0) {
      n += numweeks + 1;
    }
    if (!(n > 0 && n <= numweeks)) {
      continue;
    }
    var i = void 0;
    if (n > 1) {
      i = no1wkst + (n - 1) * 7;
      if (no1wkst !== firstwkst) {
        i -= 7 - firstwkst;
      }
    } else {
      i = no1wkst;
    }
    for (var k = 0; k < 7; k++) {
      result.wnomask[i] = 1;
      i++;
      if (result.wdaymask[i] === options.wkst)
        break;
    }
  }
  if (includes(options.byweekno, 1)) {
    var i = no1wkst + numweeks * 7;
    if (no1wkst !== firstwkst)
      i -= 7 - firstwkst;
    if (i < yearlen) {
      for (var j = 0; j < 7; j++) {
        result.wnomask[i] = 1;
        i += 1;
        if (result.wdaymask[i] === options.wkst)
          break;
      }
    }
  }
  if (no1wkst) {
    var lnumweeks = void 0;
    if (!includes(options.byweekno, -1)) {
      var lyearweekday = dateutil_default.getWeekday(new Date(Date.UTC(year - 1, 0, 1)));
      var lno1wkst = pymod(7 - lyearweekday.valueOf() + options.wkst, 7);
      var lyearlen = dateutil_default.isLeapYear(year - 1) ? 366 : 365;
      var weekst = void 0;
      if (lno1wkst >= 4) {
        lno1wkst = 0;
        weekst = lyearlen + pymod(lyearweekday - options.wkst, 7);
      } else {
        weekst = yearlen - no1wkst;
      }
      lnumweeks = Math.floor(52 + pymod(weekst, 7) / 4);
    } else {
      lnumweeks = -1;
    }
    if (includes(options.byweekno, lnumweeks)) {
      for (var i = 0; i < no1wkst; i++)
        result.wnomask[i] = 1;
    }
  }
  return result;
}
function baseYearMasks(year) {
  var yearlen = dateutil_default.isLeapYear(year) ? 366 : 365;
  var firstyday = new Date(Date.UTC(year, 0, 1));
  var wday = dateutil_default.getWeekday(firstyday);
  if (yearlen === 365) {
    return {
      mmask: M365MASK,
      mdaymask: MDAY365MASK,
      nmdaymask: NMDAY365MASK,
      wdaymask: WDAYMASK.slice(wday),
      mrange: M365RANGE
    };
  }
  return {
    mmask: M366MASK,
    mdaymask: MDAY366MASK,
    nmdaymask: NMDAY366MASK,
    wdaymask: WDAYMASK.slice(wday),
    mrange: M366RANGE
  };
}

// node_modules/rrule/dist/esm/iterinfo/monthinfo.js
function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {
  var result = {
    lastyear: year,
    lastmonth: month,
    nwdaymask: []
  };
  var ranges = [];
  if (options.freq === RRule.YEARLY) {
    if (empty(options.bymonth)) {
      ranges = [[0, yearlen]];
    } else {
      for (var j = 0; j < options.bymonth.length; j++) {
        month = options.bymonth[j];
        ranges.push(mrange.slice(month - 1, month + 1));
      }
    }
  } else if (options.freq === RRule.MONTHLY) {
    ranges = [mrange.slice(month - 1, month + 1)];
  }
  if (empty(ranges)) {
    return result;
  }
  result.nwdaymask = repeat(0, yearlen);
  for (var j = 0; j < ranges.length; j++) {
    var rang = ranges[j];
    var first = rang[0];
    var last = rang[1] - 1;
    for (var k = 0; k < options.bynweekday.length; k++) {
      var i = void 0;
      var _a = options.bynweekday[k], wday = _a[0], n = _a[1];
      if (n < 0) {
        i = last + (n + 1) * 7;
        i -= pymod(wdaymask[i] - wday, 7);
      } else {
        i = first + (n - 1) * 7;
        i += pymod(7 - wdaymask[i] + wday, 7);
      }
      if (first <= i && i <= last)
        result.nwdaymask[i] = 1;
    }
  }
  return result;
}

// node_modules/rrule/dist/esm/iterinfo/easter.js
function easter(y, offset) {
  if (offset === void 0) {
    offset = 0;
  }
  var a = y % 19;
  var b = Math.floor(y / 100);
  var c = y % 100;
  var d = Math.floor(b / 4);
  var e = b % 4;
  var f = Math.floor((b + 8) / 25);
  var g = Math.floor((b - f + 1) / 3);
  var h = Math.floor(19 * a + b - d - g + 15) % 30;
  var i = Math.floor(c / 4);
  var k = c % 4;
  var l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;
  var m = Math.floor((a + 11 * h + 22 * l) / 451);
  var month = Math.floor((h + l - 7 * m + 114) / 31);
  var day = (h + l - 7 * m + 114) % 31 + 1;
  var date = Date.UTC(y, month - 1, day + offset);
  var yearStart = Date.UTC(y, 0, 1);
  return [Math.ceil((date - yearStart) / (1e3 * 60 * 60 * 24))];
}

// node_modules/rrule/dist/esm/iterinfo/index.js
var Iterinfo = function() {
  function Iterinfo2(options) {
    this.options = options;
  }
  Iterinfo2.prototype.rebuild = function(year, month) {
    var options = this.options;
    if (year !== this.lastyear) {
      this.yearinfo = rebuildYear(year, options);
    }
    if (notEmpty(options.bynweekday) && (month !== this.lastmonth || year !== this.lastyear)) {
      var _a = this.yearinfo, yearlen = _a.yearlen, mrange = _a.mrange, wdaymask = _a.wdaymask;
      this.monthinfo = rebuildMonth(year, month, yearlen, mrange, wdaymask, options);
    }
    if (isPresent(options.byeaster)) {
      this.eastermask = easter(year, options.byeaster);
    }
  };
  Object.defineProperty(Iterinfo2.prototype, "lastyear", {
    get: function() {
      return this.monthinfo ? this.monthinfo.lastyear : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "lastmonth", {
    get: function() {
      return this.monthinfo ? this.monthinfo.lastmonth : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "yearlen", {
    get: function() {
      return this.yearinfo.yearlen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "yearordinal", {
    get: function() {
      return this.yearinfo.yearordinal;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mrange", {
    get: function() {
      return this.yearinfo.mrange;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "wdaymask", {
    get: function() {
      return this.yearinfo.wdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mmask", {
    get: function() {
      return this.yearinfo.mmask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "wnomask", {
    get: function() {
      return this.yearinfo.wnomask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nwdaymask", {
    get: function() {
      return this.monthinfo ? this.monthinfo.nwdaymask : [];
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nextyearlen", {
    get: function() {
      return this.yearinfo.nextyearlen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mdaymask", {
    get: function() {
      return this.yearinfo.mdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nmdaymask", {
    get: function() {
      return this.yearinfo.nmdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Iterinfo2.prototype.ydayset = function() {
    return [range(this.yearlen), 0, this.yearlen];
  };
  Iterinfo2.prototype.mdayset = function(_, month) {
    var start = this.mrange[month - 1];
    var end = this.mrange[month];
    var set = repeat(null, this.yearlen);
    for (var i = start; i < end; i++)
      set[i] = i;
    return [set, start, end];
  };
  Iterinfo2.prototype.wdayset = function(year, month, day) {
    var set = repeat(null, this.yearlen + 7);
    var i = dateutil_default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;
    var start = i;
    for (var j = 0; j < 7; j++) {
      set[i] = i;
      ++i;
      if (this.wdaymask[i] === this.options.wkst)
        break;
    }
    return [set, start, i];
  };
  Iterinfo2.prototype.ddayset = function(year, month, day) {
    var set = repeat(null, this.yearlen);
    var i = dateutil_default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;
    set[i] = i;
    return [set, i, i + 1];
  };
  Iterinfo2.prototype.htimeset = function(hour, _, second, millisecond) {
    var _this = this;
    var set = [];
    this.options.byminute.forEach(function(minute) {
      set = set.concat(_this.mtimeset(hour, minute, second, millisecond));
    });
    dateutil_default.sort(set);
    return set;
  };
  Iterinfo2.prototype.mtimeset = function(hour, minute, _, millisecond) {
    var set = this.options.bysecond.map(function(second) {
      return new Time3(hour, minute, second, millisecond);
    });
    dateutil_default.sort(set);
    return set;
  };
  Iterinfo2.prototype.stimeset = function(hour, minute, second, millisecond) {
    return [new Time3(hour, minute, second, millisecond)];
  };
  Iterinfo2.prototype.getdayset = function(freq) {
    switch (freq) {
      case Frequency.YEARLY:
        return this.ydayset.bind(this);
      case Frequency.MONTHLY:
        return this.mdayset.bind(this);
      case Frequency.WEEKLY:
        return this.wdayset.bind(this);
      case Frequency.DAILY:
        return this.ddayset.bind(this);
      default:
        return this.ddayset.bind(this);
    }
  };
  Iterinfo2.prototype.gettimeset = function(freq) {
    switch (freq) {
      case Frequency.HOURLY:
        return this.htimeset.bind(this);
      case Frequency.MINUTELY:
        return this.mtimeset.bind(this);
      case Frequency.SECONDLY:
        return this.stimeset.bind(this);
    }
  };
  return Iterinfo2;
}();
var iterinfo_default = Iterinfo;

// node_modules/rrule/dist/esm/iter/poslist.js
function buildPoslist(bysetpos, timeset, start, end, ii, dayset) {
  var poslist = [];
  for (var j = 0; j < bysetpos.length; j++) {
    var daypos = void 0;
    var timepos = void 0;
    var pos = bysetpos[j];
    if (pos < 0) {
      daypos = Math.floor(pos / timeset.length);
      timepos = pymod(pos, timeset.length);
    } else {
      daypos = Math.floor((pos - 1) / timeset.length);
      timepos = pymod(pos - 1, timeset.length);
    }
    var tmp = [];
    for (var k = start; k < end; k++) {
      var val = dayset[k];
      if (!isPresent(val))
        continue;
      tmp.push(val);
    }
    var i = void 0;
    if (daypos < 0) {
      i = tmp.slice(daypos)[0];
    } else {
      i = tmp[daypos];
    }
    var time = timeset[timepos];
    var date = dateutil_default.fromOrdinal(ii.yearordinal + i);
    var res = dateutil_default.combine(date, time);
    if (!includes(poslist, res))
      poslist.push(res);
  }
  dateutil_default.sort(poslist);
  return poslist;
}

// node_modules/rrule/dist/esm/iter/index.js
function iter(iterResult, options) {
  var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;
  var count = options.count;
  if (count === 0 || interval === 0) {
    return emitResult(iterResult);
  }
  var counterDate = DateTime3.fromDate(dtstart);
  var ii = new iterinfo_default(options);
  ii.rebuild(counterDate.year, counterDate.month);
  var timeset = makeTimeset(ii, counterDate, options);
  for (; ; ) {
    var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a[0], start = _a[1], end = _a[2];
    var filtered = removeFilteredDays(dayset, start, end, ii, options);
    if (notEmpty(bysetpos)) {
      var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);
      for (var j = 0; j < poslist.length; j++) {
        var res = poslist[j];
        if (until && res > until) {
          return emitResult(iterResult);
        }
        if (res >= dtstart) {
          var rezonedDate = rezoneIfNeeded(res, options);
          if (!iterResult.accept(rezonedDate)) {
            return emitResult(iterResult);
          }
          if (count) {
            --count;
            if (!count) {
              return emitResult(iterResult);
            }
          }
        }
      }
    } else {
      for (var j = start; j < end; j++) {
        var currentDay = dayset[j];
        if (!isPresent(currentDay)) {
          continue;
        }
        var date = dateutil_default.fromOrdinal(ii.yearordinal + currentDay);
        for (var k = 0; k < timeset.length; k++) {
          var time = timeset[k];
          var res = dateutil_default.combine(date, time);
          if (until && res > until) {
            return emitResult(iterResult);
          }
          if (res >= dtstart) {
            var rezonedDate = rezoneIfNeeded(res, options);
            if (!iterResult.accept(rezonedDate)) {
              return emitResult(iterResult);
            }
            if (count) {
              --count;
              if (!count) {
                return emitResult(iterResult);
              }
            }
          }
        }
      }
    }
    if (options.interval === 0) {
      return emitResult(iterResult);
    }
    counterDate.add(options, filtered);
    if (counterDate.year > dateutil_default.MAXYEAR) {
      return emitResult(iterResult);
    }
    if (!freqIsDailyOrGreater(freq)) {
      timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);
    }
    ii.rebuild(counterDate.year, counterDate.month);
  }
}
function isFiltered(ii, currentDay, options) {
  var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;
  return notEmpty(bymonth) && !includes(bymonth, ii.mmask[currentDay]) || notEmpty(byweekno) && !ii.wnomask[currentDay] || notEmpty(byweekday) && !includes(byweekday, ii.wdaymask[currentDay]) || notEmpty(ii.nwdaymask) && !ii.nwdaymask[currentDay] || byeaster !== null && !includes(ii.eastermask, currentDay) || (notEmpty(bymonthday) || notEmpty(bynmonthday)) && !includes(bymonthday, ii.mdaymask[currentDay]) && !includes(bynmonthday, ii.nmdaymask[currentDay]) || notEmpty(byyearday) && (currentDay < ii.yearlen && !includes(byyearday, currentDay + 1) && !includes(byyearday, -ii.yearlen + currentDay) || currentDay >= ii.yearlen && !includes(byyearday, currentDay + 1 - ii.yearlen) && !includes(byyearday, -ii.nextyearlen + currentDay - ii.yearlen));
}
function rezoneIfNeeded(date, options) {
  return new DateWithZone(date, options.tzid).rezonedDate();
}
function emitResult(iterResult) {
  return iterResult.getValue();
}
function removeFilteredDays(dayset, start, end, ii, options) {
  var filtered = false;
  for (var dayCounter = start; dayCounter < end; dayCounter++) {
    var currentDay = dayset[dayCounter];
    filtered = isFiltered(ii, currentDay, options);
    if (filtered)
      dayset[currentDay] = null;
  }
  return filtered;
}
function makeTimeset(ii, counterDate, options) {
  var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
  if (freqIsDailyOrGreater(freq)) {
    return buildTimeset(options);
  }
  if (freq >= RRule.HOURLY && notEmpty(byhour) && !includes(byhour, counterDate.hour) || freq >= RRule.MINUTELY && notEmpty(byminute) && !includes(byminute, counterDate.minute) || freq >= RRule.SECONDLY && notEmpty(bysecond) && !includes(bysecond, counterDate.second)) {
    return [];
  }
  return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);
}

// node_modules/rrule/dist/esm/rrule.js
var Days = {
  MO: new Weekday(0),
  TU: new Weekday(1),
  WE: new Weekday(2),
  TH: new Weekday(3),
  FR: new Weekday(4),
  SA: new Weekday(5),
  SU: new Weekday(6)
};
var DEFAULT_OPTIONS = {
  freq: Frequency.YEARLY,
  dtstart: null,
  interval: 1,
  wkst: Days.MO,
  count: null,
  until: null,
  tzid: null,
  bysetpos: null,
  bymonth: null,
  bymonthday: null,
  bynmonthday: null,
  byyearday: null,
  byweekno: null,
  byweekday: null,
  bynweekday: null,
  byhour: null,
  byminute: null,
  bysecond: null,
  byeaster: null
};
var defaultKeys = Object.keys(DEFAULT_OPTIONS);
var RRule = function() {
  function RRule2(options, noCache) {
    if (options === void 0) {
      options = {};
    }
    if (noCache === void 0) {
      noCache = false;
    }
    this._cache = noCache ? null : new Cache();
    this.origOptions = initializeOptions(options);
    var parsedOptions = parseOptions(options).parsedOptions;
    this.options = parsedOptions;
  }
  RRule2.parseText = function(text, language) {
    return parseText(text, language);
  };
  RRule2.fromText = function(text, language) {
    return fromText(text, language);
  };
  RRule2.fromString = function(str) {
    return new RRule2(RRule2.parseString(str) || void 0);
  };
  RRule2.prototype._iter = function(iterResult) {
    return iter(iterResult, this.options);
  };
  RRule2.prototype._cacheGet = function(what, args) {
    if (!this._cache)
      return false;
    return this._cache._cacheGet(what, args);
  };
  RRule2.prototype._cacheAdd = function(what, value, args) {
    if (!this._cache)
      return;
    return this._cache._cacheAdd(what, value, args);
  };
  RRule2.prototype.all = function(iterator) {
    if (iterator) {
      return this._iter(new callbackiterresult_default("all", {}, iterator));
    }
    var result = this._cacheGet("all");
    if (result === false) {
      result = this._iter(new iterresult_default("all", {}));
      this._cacheAdd("all", result);
    }
    return result;
  };
  RRule2.prototype.between = function(after, before, inc, iterator) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(after) || !dateutil_default.isValidDate(before)) {
      throw new Error("Invalid date passed in to RRule.between");
    }
    var args = {
      before,
      after,
      inc
    };
    if (iterator) {
      return this._iter(new callbackiterresult_default("between", args, iterator));
    }
    var result = this._cacheGet("between", args);
    if (result === false) {
      result = this._iter(new iterresult_default("between", args));
      this._cacheAdd("between", result, args);
    }
    return result;
  };
  RRule2.prototype.before = function(dt, inc) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(dt)) {
      throw new Error("Invalid date passed in to RRule.before");
    }
    var args = { dt, inc };
    var result = this._cacheGet("before", args);
    if (result === false) {
      result = this._iter(new iterresult_default("before", args));
      this._cacheAdd("before", result, args);
    }
    return result;
  };
  RRule2.prototype.after = function(dt, inc) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(dt)) {
      throw new Error("Invalid date passed in to RRule.after");
    }
    var args = { dt, inc };
    var result = this._cacheGet("after", args);
    if (result === false) {
      result = this._iter(new iterresult_default("after", args));
      this._cacheAdd("after", result, args);
    }
    return result;
  };
  RRule2.prototype.count = function() {
    return this.all().length;
  };
  RRule2.prototype.toString = function() {
    return optionsToString(this.origOptions);
  };
  RRule2.prototype.toText = function(gettext, language, dateFormatter) {
    return toText(this, gettext, language, dateFormatter);
  };
  RRule2.prototype.isFullyConvertibleToText = function() {
    return isFullyConvertible(this);
  };
  RRule2.prototype.clone = function() {
    return new RRule2(this.origOptions);
  };
  RRule2.FREQUENCIES = [
    "YEARLY",
    "MONTHLY",
    "WEEKLY",
    "DAILY",
    "HOURLY",
    "MINUTELY",
    "SECONDLY"
  ];
  RRule2.YEARLY = Frequency.YEARLY;
  RRule2.MONTHLY = Frequency.MONTHLY;
  RRule2.WEEKLY = Frequency.WEEKLY;
  RRule2.DAILY = Frequency.DAILY;
  RRule2.HOURLY = Frequency.HOURLY;
  RRule2.MINUTELY = Frequency.MINUTELY;
  RRule2.SECONDLY = Frequency.SECONDLY;
  RRule2.MO = Days.MO;
  RRule2.TU = Days.TU;
  RRule2.WE = Days.WE;
  RRule2.TH = Days.TH;
  RRule2.FR = Days.FR;
  RRule2.SA = Days.SA;
  RRule2.SU = Days.SU;
  RRule2.parseString = parseString;
  RRule2.optionsToString = optionsToString;
  return RRule2;
}();

// node_modules/rrule/dist/esm/iterset.js
function iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {
  var _exdateHash = {};
  var _accept = iterResult.accept;
  function evalExdate(after, before) {
    _exrule.forEach(function(rrule) {
      rrule.between(after, before, true).forEach(function(date) {
        _exdateHash[Number(date)] = true;
      });
    });
  }
  _exdate.forEach(function(date) {
    var zonedDate2 = new DateWithZone(date, tzid).rezonedDate();
    _exdateHash[Number(zonedDate2)] = true;
  });
  iterResult.accept = function(date) {
    var dt = Number(date);
    if (isNaN(dt))
      return _accept.call(this, date);
    if (!_exdateHash[dt]) {
      evalExdate(new Date(dt - 1), new Date(dt + 1));
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
    }
    return true;
  };
  if (iterResult.method === "between") {
    evalExdate(iterResult.args.after, iterResult.args.before);
    iterResult.accept = function(date) {
      var dt = Number(date);
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
      return true;
    };
  }
  for (var i = 0; i < _rdate.length; i++) {
    var zonedDate = new DateWithZone(_rdate[i], tzid).rezonedDate();
    if (!iterResult.accept(new Date(zonedDate.getTime())))
      break;
  }
  _rrule.forEach(function(rrule) {
    iter(iterResult, rrule.options);
  });
  var res = iterResult._result;
  dateutil_default.sort(res);
  switch (iterResult.method) {
    case "all":
    case "between":
      return res;
    case "before":
      return res.length && res[res.length - 1] || null;
    case "after":
    default:
      return res.length && res[0] || null;
  }
}

// node_modules/rrule/dist/esm/rrulestr.js
var DEFAULT_OPTIONS2 = {
  dtstart: null,
  cache: false,
  unfold: false,
  forceset: false,
  compatible: false,
  tzid: null
};
function parseInput(s, options) {
  var rrulevals = [];
  var rdatevals = [];
  var exrulevals = [];
  var exdatevals = [];
  var parsedDtstart = parseDtstart(s);
  var dtstart = parsedDtstart.dtstart;
  var tzid = parsedDtstart.tzid;
  var lines = splitIntoLines(s, options.unfold);
  lines.forEach(function(line) {
    var _a;
    if (!line)
      return;
    var _b = breakDownLine(line), name = _b.name, parms = _b.parms, value = _b.value;
    switch (name.toUpperCase()) {
      case "RRULE":
        if (parms.length) {
          throw new Error("unsupported RRULE parm: ".concat(parms.join(",")));
        }
        rrulevals.push(parseString(line));
        break;
      case "RDATE":
        var _c = (_a = /RDATE(?:;TZID=([^:=]+))?/i.exec(line)) !== null && _a !== void 0 ? _a : [], rdateTzid = _c[1];
        if (rdateTzid && !tzid) {
          tzid = rdateTzid;
        }
        rdatevals = rdatevals.concat(parseRDate(value, parms));
        break;
      case "EXRULE":
        if (parms.length) {
          throw new Error("unsupported EXRULE parm: ".concat(parms.join(",")));
        }
        exrulevals.push(parseString(value));
        break;
      case "EXDATE":
        exdatevals = exdatevals.concat(parseRDate(value, parms));
        break;
      case "DTSTART":
        break;
      default:
        throw new Error("unsupported property: " + name);
    }
  });
  return {
    dtstart,
    tzid,
    rrulevals,
    rdatevals,
    exrulevals,
    exdatevals
  };
}
function buildRule(s, options) {
  var _a = parseInput(s, options), rrulevals = _a.rrulevals, rdatevals = _a.rdatevals, exrulevals = _a.exrulevals, exdatevals = _a.exdatevals, dtstart = _a.dtstart, tzid = _a.tzid;
  var noCache = options.cache === false;
  if (options.compatible) {
    options.forceset = true;
    options.unfold = true;
  }
  if (options.forceset || rrulevals.length > 1 || rdatevals.length || exrulevals.length || exdatevals.length) {
    var rset_1 = new RRuleSet(noCache);
    rset_1.dtstart(dtstart);
    rset_1.tzid(tzid || void 0);
    rrulevals.forEach(function(val2) {
      rset_1.rrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    rdatevals.forEach(function(date) {
      rset_1.rdate(date);
    });
    exrulevals.forEach(function(val2) {
      rset_1.exrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    exdatevals.forEach(function(date) {
      rset_1.exdate(date);
    });
    if (options.compatible && options.dtstart)
      rset_1.rdate(dtstart);
    return rset_1;
  }
  var val = rrulevals[0] || {};
  return new RRule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);
}
function rrulestr(s, options) {
  if (options === void 0) {
    options = {};
  }
  return buildRule(s, initializeOptions2(options));
}
function groomRruleOptions(val, dtstart, tzid) {
  return __assign(__assign({}, val), { dtstart, tzid });
}
function initializeOptions2(options) {
  var invalid = [];
  var keys = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS2);
  keys.forEach(function(key) {
    if (!includes(defaultKeys2, key))
      invalid.push(key);
  });
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign(__assign({}, DEFAULT_OPTIONS2), options);
}
function extractName(line) {
  if (line.indexOf(":") === -1) {
    return {
      name: "RRULE",
      value: line
    };
  }
  var _a = split(line, ":", 1), name = _a[0], value = _a[1];
  return {
    name,
    value
  };
}
function breakDownLine(line) {
  var _a = extractName(line), name = _a.name, value = _a.value;
  var parms = name.split(";");
  if (!parms)
    throw new Error("empty property name");
  return {
    name: parms[0].toUpperCase(),
    parms: parms.slice(1),
    value
  };
}
function splitIntoLines(s, unfold) {
  if (unfold === void 0) {
    unfold = false;
  }
  s = s && s.trim();
  if (!s)
    throw new Error("Invalid empty string");
  if (!unfold) {
    return s.split(/\s/);
  }
  var lines = s.split("\n");
  var i = 0;
  while (i < lines.length) {
    var line = lines[i] = lines[i].replace(/\s+$/g, "");
    if (!line) {
      lines.splice(i, 1);
    } else if (i > 0 && line[0] === " ") {
      lines[i - 1] += line.slice(1);
      lines.splice(i, 1);
    } else {
      i += 1;
    }
  }
  return lines;
}
function validateDateParm(parms) {
  parms.forEach(function(parm) {
    if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {
      throw new Error("unsupported RDATE/EXDATE parm: " + parm);
    }
  });
}
function parseRDate(rdateval, parms) {
  validateDateParm(parms);
  return rdateval.split(",").map(function(datestr) {
    return dateutil_default.untilStringToDate(datestr);
  });
}

// node_modules/rrule/dist/esm/rruleset.js
function createGetterSetter(fieldName) {
  var _this = this;
  return function(field) {
    if (field !== void 0) {
      _this["_".concat(fieldName)] = field;
    }
    if (_this["_".concat(fieldName)] !== void 0) {
      return _this["_".concat(fieldName)];
    }
    for (var i = 0; i < _this._rrule.length; i++) {
      var field_1 = _this._rrule[i].origOptions[fieldName];
      if (field_1) {
        return field_1;
      }
    }
  };
}
var RRuleSet = function(_super) {
  __extends(RRuleSet2, _super);
  function RRuleSet2(noCache) {
    if (noCache === void 0) {
      noCache = false;
    }
    var _this = _super.call(this, {}, noCache) || this;
    _this.dtstart = createGetterSetter.apply(_this, ["dtstart"]);
    _this.tzid = createGetterSetter.apply(_this, ["tzid"]);
    _this._rrule = [];
    _this._rdate = [];
    _this._exrule = [];
    _this._exdate = [];
    return _this;
  }
  RRuleSet2.prototype._iter = function(iterResult) {
    return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());
  };
  RRuleSet2.prototype.rrule = function(rrule) {
    _addRule(rrule, this._rrule);
  };
  RRuleSet2.prototype.exrule = function(rrule) {
    _addRule(rrule, this._exrule);
  };
  RRuleSet2.prototype.rdate = function(date) {
    _addDate(date, this._rdate);
  };
  RRuleSet2.prototype.exdate = function(date) {
    _addDate(date, this._exdate);
  };
  RRuleSet2.prototype.rrules = function() {
    return this._rrule.map(function(e) {
      return rrulestr(e.toString());
    });
  };
  RRuleSet2.prototype.exrules = function() {
    return this._exrule.map(function(e) {
      return rrulestr(e.toString());
    });
  };
  RRuleSet2.prototype.rdates = function() {
    return this._rdate.map(function(e) {
      return new Date(e.getTime());
    });
  };
  RRuleSet2.prototype.exdates = function() {
    return this._exdate.map(function(e) {
      return new Date(e.getTime());
    });
  };
  RRuleSet2.prototype.valueOf = function() {
    var result = [];
    if (!this._rrule.length && this._dtstart) {
      result = result.concat(optionsToString({ dtstart: this._dtstart }));
    }
    this._rrule.forEach(function(rrule) {
      result = result.concat(rrule.toString().split("\n"));
    });
    this._exrule.forEach(function(exrule) {
      result = result.concat(exrule.toString().split("\n").map(function(line) {
        return line.replace(/^RRULE:/, "EXRULE:");
      }).filter(function(line) {
        return !/^DTSTART/.test(line);
      }));
    });
    if (this._rdate.length) {
      result.push(rdatesToString("RDATE", this._rdate, this.tzid()));
    }
    if (this._exdate.length) {
      result.push(rdatesToString("EXDATE", this._exdate, this.tzid()));
    }
    return result;
  };
  RRuleSet2.prototype.toString = function() {
    return this.valueOf().join("\n");
  };
  RRuleSet2.prototype.clone = function() {
    var rrs = new RRuleSet2(!!this._cache);
    this._rrule.forEach(function(rule) {
      return rrs.rrule(rule.clone());
    });
    this._exrule.forEach(function(rule) {
      return rrs.exrule(rule.clone());
    });
    this._rdate.forEach(function(date) {
      return rrs.rdate(new Date(date.getTime()));
    });
    this._exdate.forEach(function(date) {
      return rrs.exdate(new Date(date.getTime()));
    });
    return rrs;
  };
  return RRuleSet2;
}(RRule);
function _addRule(rrule, collection) {
  if (!(rrule instanceof RRule)) {
    throw new TypeError(String(rrule) + " is not RRule instance");
  }
  if (!includes(collection.map(String), String(rrule))) {
    collection.push(rrule);
  }
}
function _addDate(date, collection) {
  if (!(date instanceof Date)) {
    throw new TypeError(String(date) + " is not Date instance");
  }
  if (!includes(collection.map(Number), Number(date))) {
    collection.push(date);
    dateutil_default.sort(collection);
  }
}
function rdatesToString(param, rdates, tzid) {
  var isUTC = !tzid || tzid.toUpperCase() === "UTC";
  var header = isUTC ? "".concat(param, ":") : "".concat(param, ";TZID=").concat(tzid, ":");
  var dateString = rdates.map(function(rdate) {
    return dateutil_default.timeToUntilString(rdate.valueOf(), isUTC);
  }).join(",");
  return "".concat(header).concat(dateString);
}

// src/model/format/splitter.ts
var Symbol2 = class {
  constructor(primary, func) {
    this.primary = primary;
    this.func = func;
  }
  static ofChar(ch) {
    return new Symbol2(ch, (text) => {
      return text === ch;
    });
  }
  static ofChars(ch) {
    if (ch.length === 0) {
      throw "empty symbol";
    }
    if (ch[0] == null) {
      throw "ch mustn't be null";
    }
    if (ch.length === 0) {
      return this.ofChar(ch[0]);
    }
    return new Symbol2(ch[0], (text) => {
      return ch.filter((c) => text === c).length > 0;
    });
  }
  isSymbol(text) {
    return this.func(text);
  }
};
var Tokens = class {
  constructor(tokens) {
    this.tokens = tokens;
  }
  setTokenText(symbol, text, keepSpace = false, create = false, separateSymbolAndText = false, insertAt) {
    let token = this.getToken(symbol);
    if (token === null) {
      if (!create) {
        return null;
      }
      if (symbol instanceof Symbol2) {
        token = { symbol: symbol.primary, text };
      } else {
        token = { symbol, text };
      }
      if (separateSymbolAndText && token.symbol !== "" && !token.text.startsWith(" ")) {
        token.text = " " + token.text;
      }
      if (this.tokens.length > 0) {
        const lastToken = this.tokens[this.tokens.length - 1];
        if (!this.isTokenEndsWithSpace(lastToken)) {
          lastToken.text += " ";
        }
      }
      if (insertAt == null) {
        this.tokens.push(token);
      } else {
        let index = 0;
        let insertTokenIndex = -1;
        let tokenIndex = 0;
        for (const t of this.tokens) {
          const end = index + t.symbol.length + t.text.length;
          if (tokenIndex > 0) {
            if (end > insertAt) {
              insertTokenIndex = tokenIndex;
              break;
            }
          }
          index = end;
          tokenIndex++;
        }
        if (insertTokenIndex == -1) {
          this.tokens.push(token);
        } else {
          this.tokens.splice(insertTokenIndex, 0, token);
          if (insertTokenIndex < this.tokens.length - 1) {
            token.text = token.text + " ";
          }
        }
      }
      return token;
    }
    this.replaceTokenText(token, text, keepSpace);
    return token;
  }
  length() {
    return this.tokens.length;
  }
  replaceTokenText(token, text, keepSpace = false) {
    if (!keepSpace) {
      token.text = text;
      return;
    }
    token.text = token.text.replace(/^(\s*).*?(\s*)$/, `$1${text}$2`);
  }
  isTokenEndsWithSpace(token) {
    return token.text.match(/^.*\s$/);
  }
  getToken(symbol) {
    for (let token of this.tokens) {
      if (symbol instanceof Symbol2) {
        if (symbol.isSymbol(token.symbol)) {
          return token;
        }
      } else {
        if (symbol === token.symbol) {
          return token;
        }
      }
    }
    return null;
  }
  getTokenText(symbol, removeSpace = false) {
    const token = this.getToken(symbol);
    if (token === null) {
      return null;
    }
    if (!removeSpace) {
      return token.text;
    }
    return token.text.replace(/^\s*(.*?)\s*$/, `$1`);
  }
  removeToken(symbol) {
    this.tokens = this.tokens.filter((token) => !symbol.isSymbol(token.symbol));
  }
  forEachTokens(consumer) {
    this.tokens.forEach(consumer);
  }
  rangeOfSymbol(symbol) {
    let index = 0;
    for (const token of this.tokens) {
      const end = index + token.symbol.length + token.text.length;
      if (symbol.isSymbol(token.symbol)) {
        return {
          start: index,
          end
        };
      }
      index = end;
    }
    return;
  }
  join() {
    return this.tokens.map((t) => t.symbol + t.text).join("");
  }
};
function splitBySymbol(line, symbols) {
  const chars = [...line];
  let text = "";
  let currentToken = null;
  const splitted = [];
  const fillPreviousToken = () => {
    if (currentToken === null) {
      splitted.push({ symbol: "", text });
    } else {
      currentToken.text = text;
    }
  };
  chars.forEach((c) => {
    let isSymbol = symbols.filter((s) => s.isSymbol(c)).length > 0;
    if (isSymbol) {
      fillPreviousToken();
      currentToken = { symbol: c, text: "" };
      splitted.push(currentToken);
      text = "";
    } else {
      text += c;
    }
  });
  if (text.length > 0) {
    fillPreviousToken();
  }
  return splitted;
}

// src/model/format/reminder-tasks-plugin.ts
function removeTags(text) {
  return text.replace(/#\w+/g, "");
}
var _TasksPluginReminderModel = class {
  constructor(useCustomEmoji, removeTags2, strictDateFormat, tokens) {
    this.useCustomEmoji = useCustomEmoji;
    this.removeTags = removeTags2;
    this.strictDateFormat = strictDateFormat;
    this.tokens = tokens;
  }
  static parse(line, useCustomEmoji, removeTags2, strictDateFormat) {
    return new _TasksPluginReminderModel(useCustomEmoji != null ? useCustomEmoji : false, removeTags2 != null ? removeTags2 : false, strictDateFormat != null ? strictDateFormat : true, new Tokens(splitBySymbol(line, this.allSymbols)));
  }
  getTitle() {
    let title = this.tokens.getTokenText("", true);
    if (title != null && this.removeTags) {
      title = removeTags(title);
    }
    return title;
  }
  getTime() {
    return this.getDate(this.getReminderSymbol());
  }
  setTime(time, insertAt) {
    if (this.useCustomEmoji) {
      this.setDate(this.getReminderSymbol(), time, 1);
    } else {
      this.setDate(this.getReminderSymbol(), time, insertAt);
    }
  }
  getDueDate() {
    return this.getDate(_TasksPluginReminderModel.symbolDueDate);
  }
  setDueDate(time) {
    this.setDate(_TasksPluginReminderModel.symbolDueDate, time);
  }
  setRawTime(rawTime) {
    this.setDate(this.getReminderSymbol(), rawTime);
    return true;
  }
  getReminderSymbol() {
    if (this.useCustomEmoji) {
      return _TasksPluginReminderModel.symbolReminder;
    } else {
      return _TasksPluginReminderModel.symbolDueDate;
    }
  }
  getEndOfTimeTextIndex() {
    let timeSymbol = _TasksPluginReminderModel.symbolDueDate;
    if (this.useCustomEmoji) {
      timeSymbol = _TasksPluginReminderModel.symbolReminder;
    }
    const token = this.tokens.rangeOfSymbol(timeSymbol);
    if (token != null) {
      return token.end;
    }
    return this.toMarkdown().length;
  }
  toMarkdown() {
    return this.tokens.join();
  }
  setTitle(description) {
    this.tokens.setTokenText("", description, true, true);
  }
  getDoneDate() {
    return this.getDate(_TasksPluginReminderModel.symbolDoneDate);
  }
  setDoneDate(time) {
    this.setDate(_TasksPluginReminderModel.symbolDoneDate, time);
  }
  getRecurrence() {
    return this.tokens.getTokenText(_TasksPluginReminderModel.symbolRecurrence, true);
  }
  clone() {
    return _TasksPluginReminderModel.parse(this.toMarkdown(), this.useCustomEmoji, this.removeTags, this.strictDateFormat);
  }
  getDate(symbol) {
    const dateText = this.tokens.getTokenText(symbol, true);
    if (dateText === null) {
      return null;
    }
    if (symbol === _TasksPluginReminderModel.symbolReminder) {
      return DATE_TIME_FORMATTER.parse(dateText);
    } else {
      const date = (0, import_moment3.default)(dateText, _TasksPluginReminderModel.dateFormat, this.strictDateFormat);
      if (!date.isValid()) {
        return null;
      }
      return new DateTime(date, false);
    }
  }
  setDate(symbol, time, insertAt) {
    if (time == null) {
      this.tokens.removeToken(symbol);
      return;
    }
    let timeStr;
    if (time instanceof DateTime) {
      if (symbol === _TasksPluginReminderModel.symbolReminder) {
        timeStr = DATE_TIME_FORMATTER.toString(time);
      } else {
        timeStr = time.format(_TasksPluginReminderModel.dateFormat);
      }
    } else {
      timeStr = time;
    }
    this.tokens.setTokenText(symbol, timeStr, true, true, this.shouldSplitBetweenSymbolAndText(), insertAt);
  }
  shouldSplitBetweenSymbolAndText() {
    let withSpace = 0;
    let noSpace = 0;
    this.tokens.forEachTokens((token) => {
      if (token.symbol === "") {
        return;
      }
      if (token.text.match(/^\s.*$/)) {
        withSpace += 1;
      } else {
        noSpace++;
      }
    });
    if (withSpace > noSpace) {
      return true;
    } else if (withSpace < noSpace) {
      return false;
    } else {
      return true;
    }
  }
};
var TasksPluginReminderModel = _TasksPluginReminderModel;
TasksPluginReminderModel.dateFormat = "YYYY-MM-DD";
TasksPluginReminderModel.symbolDueDate = Symbol2.ofChars([..."\u{1F4C5}\u{1F4C6}\u{1F5D3}"]);
TasksPluginReminderModel.symbolDoneDate = Symbol2.ofChar("\u2705");
TasksPluginReminderModel.symbolRecurrence = Symbol2.ofChar("\u{1F501}");
TasksPluginReminderModel.symbolReminder = Symbol2.ofChar("\u23F0");
TasksPluginReminderModel.symbolScheduled = Symbol2.ofChar("\u23F3");
TasksPluginReminderModel.symbolStart = Symbol2.ofChar("\u{1F6EB}");
TasksPluginReminderModel.allSymbols = [
  _TasksPluginReminderModel.symbolDueDate,
  _TasksPluginReminderModel.symbolDoneDate,
  _TasksPluginReminderModel.symbolRecurrence,
  _TasksPluginReminderModel.symbolReminder,
  _TasksPluginReminderModel.symbolStart,
  _TasksPluginReminderModel.symbolScheduled
];
var _TasksPluginFormat = class extends TodoBasedReminderFormat {
  parseReminder(todo) {
    const parsed = TasksPluginReminderModel.parse(todo.body, this.useCustomEmoji(), this.removeTagsEnabled(), this.isStrictDateFormat());
    if (this.useCustomEmoji() && parsed.getDueDate() == null) {
      return null;
    }
    return parsed;
  }
  removeTagsEnabled() {
    return this.config.getParameter(ReminderFormatParameterKey.removeTagsForTasksPlugin);
  }
  useCustomEmoji() {
    return this.config.getParameter(ReminderFormatParameterKey.useCustomEmojiForTasksPlugin);
  }
  modifyReminder(doc, todo, parsed, edit) {
    if (!super.modifyReminder(doc, todo, parsed, edit)) {
      return false;
    }
    if (edit.checked !== void 0) {
      if (edit.checked) {
        const recurrence = parsed.getRecurrence();
        if (recurrence !== null) {
          const nextReminderTodo = todo.clone();
          const nextReminder = parsed.clone();
          const dueDate = parsed.getDueDate();
          if (dueDate == null) {
            return false;
          }
          if (this.useCustomEmoji()) {
            const time = parsed.getTime();
            if (time == null) {
              return false;
            }
            const nextTime = this.nextDate(recurrence, time.moment());
            const nextDueDate = this.nextDate(recurrence, dueDate.moment());
            if (nextTime == null || nextDueDate == null) {
              return false;
            }
            nextReminder.setTime(new DateTime((0, import_moment3.default)(nextTime), true));
            nextReminder.setDueDate(new DateTime((0, import_moment3.default)(nextDueDate), true));
          } else {
            const next = this.nextDate(recurrence, dueDate.moment());
            if (next == null) {
              return false;
            }
            const nextDueDate = new DateTime((0, import_moment3.default)(next), true);
            nextReminder.setTime(nextDueDate);
          }
          nextReminderTodo.body = nextReminder.toMarkdown();
          nextReminderTodo.setChecked(false);
          doc.insertTodo(todo.lineIndex, nextReminderTodo);
        }
        parsed.setDoneDate(this.config.getParameter(ReminderFormatParameterKey.now));
      } else {
        parsed.setDoneDate(void 0);
      }
    }
    return true;
  }
  nextDate(recurrence, dtStart) {
    const rruleOptions = RRule.parseText(recurrence);
    if (!rruleOptions) {
      return void 0;
    }
    const today = this.config.getParameter(ReminderFormatParameterKey.now).moment();
    today.set("hour", dtStart.get("hour"));
    today.set("minute", dtStart.get("minute"));
    today.set("second", dtStart.get("second"));
    today.set("millisecond", dtStart.get("millisecond"));
    if (today.isAfter(dtStart)) {
      dtStart = today;
    }
    const base = dtStart.clone();
    rruleOptions.dtstart = dtStart.utc(true).toDate();
    const rrule = new RRule(rruleOptions);
    const rdate = rrule.after(dtStart.toDate(), false);
    const diff = rdate.getTime() - rruleOptions.dtstart.getTime();
    base.add(diff, "millisecond");
    return base.toDate();
  }
  newReminder(title, time, insertAt) {
    const parsed = TasksPluginReminderModel.parse(title, this.useCustomEmoji(), this.removeTagsEnabled(), this.isStrictDateFormat());
    parsed.setTime(time, insertAt);
    if (this.useCustomEmoji() && parsed.getDueDate() == null) {
      parsed.setDueDate(time);
    }
    parsed.setTitle(title);
    return parsed;
  }
};
var TasksPluginFormat = _TasksPluginFormat;
TasksPluginFormat.instance = new _TasksPluginFormat();

// src/model/format/index.ts
var REMINDER_FORMAT = new CompositeReminderFormat();
REMINDER_FORMAT.resetFormat([DefaultReminderFormat.instance]);
var ReminderFormatType = class {
  constructor(name, description, example, format, defaultEnabled) {
    this.name = name;
    this.description = description;
    this.example = example;
    this.format = format;
    this.defaultEnabled = defaultEnabled;
  }
};
function parseReminder(doc) {
  return REMINDER_FORMAT.parse(doc);
}
async function modifyReminder(doc, reminder, edit) {
  return REMINDER_FORMAT.modify(doc, reminder, edit);
}
function changeReminderFormat(formatTypes) {
  if (formatTypes.length === 0) {
    REMINDER_FORMAT.resetFormat([DefaultReminderFormat.instance]);
  } else {
    REMINDER_FORMAT.resetFormat(formatTypes.map((f) => f.format));
  }
}
function setReminderFormatConfig(config) {
  REMINDER_FORMAT.setConfig(config);
}
var reminderPluginReminderFormat = new ReminderFormatType("ReminderPluginReminderFormat", "Reminder plugin format", "(@2021-09-08)", DefaultReminderFormat.instance, true);
var tasksPluginReminderFormat = new ReminderFormatType("TasksPluginReminderFormat", "Tasks plugin format", "\u{1F4C5} 2021-09-08", TasksPluginFormat.instance, false);
var kanbanPluginReminderFormat = new ReminderFormatType("KanbanPluginReminderFormat", "Kanban plugin format", "@{2021-09-08}", KanbanReminderFormat.instance, false);
var ReminderFormatTypes = [
  reminderPluginReminderFormat,
  tasksPluginReminderFormat,
  kanbanPluginReminderFormat
];

// src/model/content.ts
var Content = class {
  constructor(file, content) {
    this.doc = new MarkdownDocument(file, content);
  }
  getReminders(doneOnly = true) {
    const reminders = parseReminder(this.doc);
    if (!doneOnly) {
      return reminders;
    }
    return reminders.filter((reminder) => !reminder.done);
  }
  getTodos() {
    return this.doc.getTodos();
  }
  async modifyReminderLines(modifyFunc) {
    for (const reminder of this.getReminders(false)) {
      const edit = modifyFunc(reminder);
      if (edit === null) {
        return;
      }
      await this.modifyReminderLine(reminder, edit);
    }
  }
  async updateReminder(reminder, edit) {
    await this.modifyReminderLine(reminder, edit);
  }
  async modifyReminderLine(reminder, edit) {
    const modified = await modifyReminder(this.doc, reminder, edit);
    if (modified) {
      console.info("Reminder was updated: reminder=%o", reminder);
    } else {
      console.warn("Cannot modify reminder because it's not a reminder todo: reminder=%o", reminder);
    }
    return modified;
  }
  getContent() {
    return this.doc.toMarkdown();
  }
};

// src/controller.ts
var RemindersController = class {
  constructor(vault, reminders) {
    this.vault = vault;
    this.reminders = reminders;
  }
  async reloadAllFiles() {
    console.debug("Reload all files and collect reminders");
    this.reminders.clear();
    for (const file of this.vault.getMarkdownFiles()) {
      await this.reloadFile(file, false);
    }
  }
  async reloadFile(file, reloadUI = false) {
    console.debug("Reload file and collect reminders: file=%s, forceReloadUI=%s", file.path, reloadUI);
    if (!(file instanceof import_obsidian.TFile)) {
      console.debug("Cannot read file other than TFile: file=%o", file);
      return false;
    }
    if (!this.isMarkdownFile(file)) {
      console.debug("Not a markdown file: file=%o", file);
      return false;
    }
    const content = new Content(file.path, await this.vault.cachedRead(file));
    const reminders = content.getReminders();
    if (reminders.length > 0) {
      if (!this.reminders.replaceFile(file.path, reminders)) {
        return false;
      }
    } else {
      if (!this.reminders.removeFile(file.path)) {
        return false;
      }
    }
    return true;
  }
  isMarkdownFile(file) {
    return file.extension.toLowerCase() === "md";
  }
};

// src/model/settings.ts
var import_obsidian2 = require("obsidian");
var SettingRegistry = class {
  constructor() {
    this.settingContexts = [];
  }
  register(settingContext) {
    this.settingContexts.push(settingContext);
  }
  findByKey(key) {
    return this.settingContexts.find((c) => c.key === key);
  }
  forEach(consumer) {
    this.settingContexts.forEach(consumer);
  }
};
var SettingContext = class {
  constructor(_settingRegistry) {
    this._settingRegistry = _settingRegistry;
    this.tags = [];
  }
  init(settingModel, setting, containerEl) {
    this.settingModel = settingModel;
    this._setting = setting;
    this.validationEl = containerEl.createDiv("validation", (el) => {
      el.style.color = "var(--text-error)";
      el.style.marginBottom = "1rem";
      el.style.fontSize = "14px";
      el.style.display = "none";
    });
    this.infoEl = containerEl.createDiv("info", (el) => {
      el.style.color = "var(--text-faint)";
      el.style.marginBottom = "1rem";
      el.style.fontSize = "14px";
      el.style.display = "none";
    });
  }
  setValidationError(error) {
    this.setText(this.validationEl, error);
  }
  setInfo(info) {
    this.setText(this.infoEl, info);
  }
  setText(el, text) {
    if (!el) {
      console.error("element not created");
      return;
    }
    if (text === null) {
      el.style.display = "none";
    } else {
      el.style.display = "block";
      el.innerHTML = text;
    }
  }
  get setting() {
    return this._setting;
  }
  get registry() {
    return this._settingRegistry;
  }
  hasTag(tag) {
    return this.tags.filter((t) => t === tag).length > 0;
  }
  update() {
    if (!this.anyValueChanged) {
      return;
    }
    this.anyValueChanged(this);
  }
  setEnabled(enable) {
    this.setting.setDisabled(!enable);
  }
  findContextByKey(key) {
    return this._settingRegistry.findByKey(key);
  }
  booleanValue() {
    return this.settingModel.value;
  }
  isInitialized() {
    return this.settingModel && this.validationEl && this.setting;
  }
};
var SettingModelBuilder = class {
  constructor(registry) {
    this.registry = registry;
    this.context = new SettingContext(this.registry);
    this.registry.register(this.context);
  }
  key(key) {
    this.context.key = key;
    return this;
  }
  name(name) {
    this.context.name = name;
    return this;
  }
  desc(desc) {
    this.context.desc = desc;
    return this;
  }
  tag(tag) {
    this.context.tags.push(tag);
    return this;
  }
  enableWhen(enableWhen) {
    this.context.anyValueChanged = enableWhen;
    return this;
  }
  text(initValue) {
    return new TextSettingModelBuilder(this.context, false, initValue);
  }
  textArea(initValue) {
    return new TextSettingModelBuilder(this.context, true, initValue);
  }
  number(initValue) {
    return new NumberSettingModelBuilder(this.context, initValue);
  }
  toggle(initValue) {
    return new ToggleSettingModelBuilder(this.context, initValue);
  }
  dropdown(initValue) {
    return new DropdownSettingModelBuilder(this.context, initValue);
  }
};
var AbstractSettingModelBuilder = class {
  constructor(context, initValue) {
    this.context = context;
    this.initValue = initValue;
  }
  onAnyValueChanged(anyValueChanged) {
    this.context.anyValueChanged = anyValueChanged;
    return this;
  }
  onValueChange() {
    this.context.registry.forEach((c) => {
      c.update();
    });
  }
  buildSettingModel(serde, initializer) {
    return new SettingModelImpl(this.context, serde, this.initValue, initializer);
  }
};
var TextSettingModelBuilder = class extends AbstractSettingModelBuilder {
  constructor(context, longText, initValue) {
    super(context, initValue);
    this.longText = longText;
  }
  placeHolder(placeHolder) {
    this._placeHolder = placeHolder;
    return this;
  }
  build(serde) {
    return this.buildSettingModel(serde, ({ setting, rawValue, context }) => {
      const initText = (text) => {
        var _a;
        text.setPlaceholder((_a = this._placeHolder) != null ? _a : "").setValue(rawValue.value).onChange(async (value) => {
          try {
            serde.unmarshal(value);
            rawValue.value = value;
            context.setValidationError(null);
            this.onValueChange();
          } catch (e) {
            if (e instanceof Error) {
              context.setValidationError(e.message);
            } else if (typeof e === "string") {
              context.setValidationError(e);
            }
          }
        });
      };
      if (this.longText) {
        setting.addTextArea((textarea) => {
          initText(textarea);
        });
      } else {
        setting.addText((text) => {
          initText(text);
        });
      }
    });
  }
};
var NumberSettingModelBuilder = class extends AbstractSettingModelBuilder {
  constructor(context, initValue) {
    super(context, initValue);
  }
  placeHolder(placeHolder) {
    this._placeHolder = placeHolder;
    return this;
  }
  build(serde) {
    return this.buildSettingModel(serde, ({ setting, rawValue, context }) => {
      const initText = (text) => {
        var _a;
        text.setPlaceholder((_a = this._placeHolder) != null ? _a : "").setValue(rawValue.value.toString()).onChange(async (value) => {
          try {
            const n = parseInt(value);
            rawValue.value = n;
            context.setValidationError(null);
            this.onValueChange();
          } catch (e) {
            if (e instanceof Error) {
              context.setValidationError(e.message);
            } else if (typeof e === "string") {
              context.setValidationError(e);
            }
          }
        });
      };
      setting.addText((textarea) => {
        initText(textarea);
      });
    });
  }
};
var ToggleSettingModelBuilder = class extends AbstractSettingModelBuilder {
  build(serde) {
    return new SettingModelImpl(this.context, serde, this.initValue, ({ setting, rawValue }) => {
      setting.addToggle((toggle) => toggle.setValue(rawValue.value).onChange(async (value) => {
        rawValue.value = value;
        this.onValueChange();
      }));
    });
  }
};
var DropdownOption = class {
  constructor(label, value) {
    this.label = label;
    this.value = value;
  }
};
var DropdownSettingModelBuilder = class extends AbstractSettingModelBuilder {
  constructor() {
    super(...arguments);
    this.options = [];
  }
  addOption(label, value) {
    this.options.push(new DropdownOption(label, value));
    return this;
  }
  build(serde) {
    return new SettingModelImpl(this.context, serde, this.initValue, ({ setting, rawValue }) => {
      setting.addDropdown((d) => {
        this.options.forEach((option) => {
          d.addOption(option.value, option.label);
        });
        d.setValue(rawValue.value);
        d.onChange(async (value) => {
          rawValue.value = value;
          this.onValueChange();
        });
      });
    });
  }
};
var SettingModelImpl = class {
  constructor(context, serde, initRawValue, settingInitializer) {
    this.context = context;
    this.serde = serde;
    this.settingInitializer = settingInitializer;
    this.rawValue = new Reference(initRawValue);
    if (context.key == null) {
      throw new Error("key is required.");
    }
  }
  createSetting(containerEl) {
    var _a, _b;
    const setting = new import_obsidian2.Setting(containerEl).setName((_a = this.context.name) != null ? _a : "").setDesc((_b = this.context.desc) != null ? _b : "");
    this.context.init(this, setting, containerEl);
    this.settingInitializer({
      setting,
      rawValue: this.rawValue,
      context: this.context
    });
    return setting;
  }
  get value() {
    return this.serde.unmarshal(this.rawValue.value);
  }
  get key() {
    return this.context.key;
  }
  load(settings) {
    if (settings === void 0) {
      return;
    }
    const newValue = settings[this.key];
    if (newValue !== void 0) {
      this.rawValue.value = newValue;
    }
  }
  store(settings) {
    settings[this.key] = this.rawValue.value;
  }
  hasTag(tag) {
    return this.context.hasTag(tag);
  }
};
var SettingGroup = class {
  constructor(name) {
    this.name = name;
    this.settings = [];
  }
  addSettings(...settingModels) {
    this.settings.push(...settingModels);
  }
};
var SettingTabModel = class {
  constructor() {
    this.groups = [];
    this.registry = new SettingRegistry();
  }
  newSettingBuilder() {
    return new SettingModelBuilder(this.registry);
  }
  newGroup(name) {
    const group = new SettingGroup(name);
    this.groups.push(group);
    return group;
  }
  displayOn(el) {
    el.empty();
    this.groups.forEach((group) => {
      el.createEl("h3", { text: group.name });
      group.settings.forEach((settings) => {
        settings.createSetting(el);
      });
    });
    this.registry.forEach((context) => context.update());
  }
  forEach(consumer) {
    this.groups.forEach((group) => {
      group.settings.forEach((setting) => {
        consumer(setting);
      });
    });
  }
};
var TimeSerde = class {
  unmarshal(rawValue) {
    return Time.parse(rawValue);
  }
  marshal(value) {
    return value.toString();
  }
};
var RawSerde = class {
  unmarshal(rawValue) {
    return rawValue;
  }
  marshal(value) {
    return value;
  }
};
var LatersSerde = class {
  unmarshal(rawValue) {
    return parseLaters(rawValue);
  }
  marshal(value) {
    return value.map((v) => v.label).join("\n");
  }
};
var ReminderFormatTypeSerde = class {
  unmarshal(rawValue) {
    const format = ReminderFormatTypes.find((format2) => format2.name === rawValue);
    return format;
  }
  marshal(value) {
    return value.name;
  }
};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var TAG_RESCAN = "re-scan";
var Settings = class {
  constructor() {
    this.settings = new SettingTabModel();
    const reminderFormatSettings = new ReminderFormatSettings(this.settings);
    this.reminderTime = this.settings.newSettingBuilder().key("reminderTime").name("Reminder Time").desc("Time when a reminder with no time part will show").tag(TAG_RESCAN).text("09:00").placeHolder("Time (hh:mm)").build(new TimeSerde());
    this.useSystemNotification = this.settings.newSettingBuilder().key("useSystemNotification").name("Use system notification").desc("Use system notification for reminder notifications").toggle(false).build(new RawSerde());
    this.laters = this.settings.newSettingBuilder().key("laters").name("Remind me later").desc("Line-separated list of remind me later items").textArea("In 30 minutes\nIn 1 hour\nIn 3 hours\nTomorrow\nNext week").placeHolder("In 30 minutes\nIn 1 hour\nIn 3 hours\nTomorrow\nNext week").build(new LatersSerde());
    this.dateFormat = this.settings.newSettingBuilder().key("dateFormat").name("Date format").desc("moment style date format: https://momentjs.com/docs/#/displaying/format/").tag(TAG_RESCAN).text("YYYY-MM-DD").placeHolder("YYYY-MM-DD").onAnyValueChanged((context) => {
      context.setEnabled(reminderFormatSettings.enableReminderPluginReminderFormat.value);
    }).build(new RawSerde());
    this.strictDateFormat = this.settings.newSettingBuilder().key("strictDateFormat").name("Strict Date format").desc("Strictly parse the date and time").tag(TAG_RESCAN).toggle(false).build(new RawSerde());
    this.dateTimeFormat = this.settings.newSettingBuilder().key("dateTimeFormat").name("Date and time format").desc("moment() style date time format: https://momentjs.com/docs/#/displaying/format/").tag(TAG_RESCAN).text("YYYY-MM-DD HH:mm").placeHolder("YYYY-MM-DD HH:mm").onAnyValueChanged((context) => {
      context.setEnabled(reminderFormatSettings.enableReminderPluginReminderFormat.value);
    }).build(new RawSerde());
    this.linkDatesToDailyNotes = this.settings.newSettingBuilder().key("linkDatesToDailyNotes").name("Link dates to daily notes").desc("When toggled, Dates link to daily notes.").tag(TAG_RESCAN).toggle(false).onAnyValueChanged((context) => {
      context.setEnabled(reminderFormatSettings.enableReminderPluginReminderFormat.value);
    }).build(new RawSerde());
    this.autoCompleteTrigger = this.settings.newSettingBuilder().key("autoCompleteTrigger").name("Calendar popup trigger").desc("Trigger text to show calendar popup").text("(@").placeHolder("(@").onAnyValueChanged((context) => {
      const value = this.autoCompleteTrigger.value;
      context.setInfo(`Popup is ${value.length === 0 ? "disabled" : "enabled"}`);
    }).build(new RawSerde());
    const primaryFormatBuilder = this.settings.newSettingBuilder().key("primaryReminderFormat").name("Primary reminder format").desc("Reminder format for generated reminder by calendar popup").dropdown(ReminderFormatTypes[0].name);
    ReminderFormatTypes.forEach((f) => primaryFormatBuilder.addOption(`${f.description} - ${f.example}`, f.name));
    this.primaryFormat = primaryFormatBuilder.build(new ReminderFormatTypeSerde());
    this.useCustomEmojiForTasksPlugin = this.settings.newSettingBuilder().key("useCustomEmojiForTasksPlugin").name("Distinguish between reminder date and due date").desc("Use custom emoji \u23F0 instead of \u{1F4C5} and distinguish between reminder date/time and Tasks Plugin's due date.").tag(TAG_RESCAN).toggle(false).onAnyValueChanged((context) => {
      context.setEnabled(reminderFormatSettings.enableTasksPluginReminderFormat.value);
    }).build(new RawSerde());
    this.removeTagsForTasksPlugin = this.settings.newSettingBuilder().key("removeTagsForTasksPlugin").name("Remove tags from reminder title").desc("If checked, tags(#xxx) are removed from the reminder list view and notification.").tag(TAG_RESCAN).toggle(false).onAnyValueChanged((context) => {
      context.setEnabled(reminderFormatSettings.enableTasksPluginReminderFormat.value);
    }).build(new RawSerde());
    this.editDetectionSec = this.settings.newSettingBuilder().key("editDetectionSec").name("Edit Detection Time").desc("The minimum amount of time (in seconds) after a key is typed that it will be identified as notifiable.").number(10).build(new RawSerde());
    this.reminderCheckIntervalSec = this.settings.newSettingBuilder().key("reminderCheckIntervalSec").name("Reminder check interval").desc("Interval(in seconds) to periodically check whether or not you should be notified of reminders.  You will need to restart Obsidian for this setting to take effect.").number(5).build(new RawSerde());
    this.settings.newGroup("Notification Settings").addSettings(this.reminderTime, this.laters, this.useSystemNotification);
    this.settings.newGroup("Editor").addSettings(this.autoCompleteTrigger, this.primaryFormat);
    this.settings.newGroup("Reminder Format - Reminder Plugin").addSettings(reminderFormatSettings.enableReminderPluginReminderFormat, this.dateFormat, this.dateTimeFormat, this.strictDateFormat, this.linkDatesToDailyNotes);
    this.settings.newGroup("Reminder Format - Tasks Plugin").addSettings(reminderFormatSettings.enableTasksPluginReminderFormat, this.useCustomEmojiForTasksPlugin, this.removeTagsForTasksPlugin);
    this.settings.newGroup("Reminder Format - Kanban Plugin").addSettings(reminderFormatSettings.enableKanbanPluginReminderFormat);
    this.settings.newGroup("Advanced").addSettings(this.editDetectionSec, this.reminderCheckIntervalSec);
    const config = new ReminderFormatConfig();
    config.setParameterFunc(ReminderFormatParameterKey.now, () => DateTime.now());
    config.setParameter(ReminderFormatParameterKey.useCustomEmojiForTasksPlugin, this.useCustomEmojiForTasksPlugin);
    config.setParameter(ReminderFormatParameterKey.linkDatesToDailyNotes, this.linkDatesToDailyNotes);
    config.setParameter(ReminderFormatParameterKey.removeTagsForTasksPlugin, this.removeTagsForTasksPlugin);
    setReminderFormatConfig(config);
  }
  forEach(consumer) {
    this.settings.forEach(consumer);
  }
};
var ReminderFormatSettings = class {
  constructor(settings) {
    this.settings = settings;
    this.settingKeyToFormatName = /* @__PURE__ */ new Map();
    this.reminderFormatSettings = [];
    this.enableReminderPluginReminderFormat = this.createUseReminderFormatSetting(reminderPluginReminderFormat);
    this.enableTasksPluginReminderFormat = this.createUseReminderFormatSetting(tasksPluginReminderFormat);
    this.enableKanbanPluginReminderFormat = this.createUseReminderFormatSetting(kanbanPluginReminderFormat);
  }
  createUseReminderFormatSetting(format) {
    const key = `enable${format.name}`;
    const setting = this.settings.newSettingBuilder().key(key).name(`Enable ${format.description}`).desc(`Enable ${format.description}`).tag(TAG_RESCAN).toggle(format.defaultEnabled).onAnyValueChanged((context) => {
      var _a;
      context.setInfo(`Example: ${(_a = format.format.appendReminder("- [ ] Task 1", DateTime.now())) == null ? void 0 : _a.insertedLine}`);
    }).build(new RawSerde());
    this.settingKeyToFormatName.set(key, format);
    this.reminderFormatSettings.push(setting);
    setting.rawValue.onChanged(() => {
      this.updateReminderFormat(setting);
    });
    return setting;
  }
  updateReminderFormat(setting) {
    const selectedFormats = this.reminderFormatSettings.filter((s) => s.value).map((s) => this.settingKeyToFormatName.get(s.key)).filter((s) => s !== void 0);
    changeReminderFormat(selectedFormats);
  }
};
var SETTINGS = new Settings();

// src/data.ts
var PluginDataIO = class {
  constructor(plugin, reminders) {
    this.plugin = plugin;
    this.reminders = reminders;
    this.restoring = true;
    this.changed = false;
    this.scanned = new Reference(false);
    this.debug = new Reference(false);
    SETTINGS.forEach((setting) => {
      setting.rawValue.onChanged(() => {
        if (this.restoring) {
          return;
        }
        if (setting.hasTag(TAG_RESCAN)) {
          this.scanned.value = false;
        }
        this.changed = true;
      });
    });
  }
  async load() {
    console.debug("Load reminder plugin data");
    const data = await this.plugin.loadData();
    if (!data) {
      this.scanned.value = false;
      return;
    }
    this.scanned.value = data.scanned;
    if (data.debug != null) {
      this.debug.value = data.debug;
    }
    const loadedSettings = data.settings;
    SETTINGS.forEach((setting) => {
      setting.load(loadedSettings);
    });
    if (data.reminders) {
      Object.keys(data.reminders).forEach((filePath) => {
        const remindersInFile = data.reminders[filePath];
        if (!remindersInFile) {
          return;
        }
        this.reminders.replaceFile(filePath, remindersInFile.map((d) => new Reminder(filePath, d.title, DateTime.parse(d.time), d.rowNumber, false)));
      });
    }
    this.changed = false;
    if (this.restoring) {
      this.restoring = false;
    }
  }
  async save(force = false) {
    if (!force && !this.changed) {
      return;
    }
    console.debug("Save reminder plugin data: force=%s, changed=%s", force, this.changed);
    const remindersData = {};
    this.reminders.fileToReminders.forEach((r, filePath) => {
      remindersData[filePath] = r.map((rr) => ({
        title: rr.title,
        time: rr.time.toString(),
        rowNumber: rr.rowNumber
      }));
    });
    const settings = {};
    SETTINGS.forEach((setting) => {
      setting.store(settings);
    });
    await this.plugin.saveData({
      scanned: this.scanned.value,
      reminders: remindersData,
      debug: this.debug.value,
      settings
    });
    this.changed = false;
  }
};

// src/main.ts
var MAX_TIME_SINCE_CREATION = 5e3;
var ObsidianManagerPlugin = class extends import_obsidian4.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.reminders = new Reminders(() => {
      this.pluginDataIO.changed = true;
    });
    this.pluginDataIO = new PluginDataIO(this, this.reminders);
    this.reminders.reminderTime = SETTINGS.reminderTime;
    DATE_TIME_FORMATTER.setTimeFormat(SETTINGS.dateFormat, SETTINGS.dateTimeFormat, SETTINGS.strictDateFormat);
    this.remindersController = new RemindersController(app.vault, this.reminders);
  }
  async loadSettings() {
    const DEFAULT_SETTINGS = {
      templateHeading: "none",
      deleteOnComplete: false,
      removeEmptyTodos: false
    };
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  isDailyNotesEnabled() {
    var _a, _b;
    const dailyNotesPlugin = this.app.internalPlugins.plugins["daily-notes"];
    const dailyNotesEnabled = dailyNotesPlugin && dailyNotesPlugin.enabled;
    const periodicNotesPlugin = this.app.plugins.getPlugin("periodic-notes");
    const periodicNotesEnabled = periodicNotesPlugin && ((_b = (_a = periodicNotesPlugin.settings) == null ? void 0 : _a.daily) == null ? void 0 : _b.enabled);
    return dailyNotesEnabled || periodicNotesEnabled;
  }
  getLastDailyNote() {
    const { moment: moment4 } = window;
    const { folder = "", format } = (0, import_obsidian_daily_notes_interface.getDailyNoteSettings)();
    const dailyNoteFiles = this.app.vault.getAllLoadedFiles().filter((file) => file.path.startsWith(folder)).filter((file) => file.basename != null);
    const todayMoment = moment4();
    let dailyNotesTodayOrEarlier = [];
    dailyNoteFiles.forEach((file) => {
      if (moment4(file.basename, format).isSameOrBefore(todayMoment, "day")) {
        dailyNotesTodayOrEarlier.push(file);
      }
    });
    const sorted = dailyNotesTodayOrEarlier.sort((a, b) => moment4(b.basename, format).valueOf() - moment4(a.basename, format).valueOf());
    return sorted[1];
  }
  async getAllUnfinishedTodos(file) {
    const contents = await this.app.vault.read(file);
    const unfinishedTodosRegex = /\t*- \[ \].*/g;
    const unfinishedTodos = Array.from(contents.matchAll(unfinishedTodosRegex)).map(([todo]) => todo);
    return unfinishedTodos;
  }
  async sortHeadersIntoHeirarchy(file) {
    const templateContents = await this.app.vault.read(file);
    const allHeadings = Array.from(templateContents.matchAll(/#{1,} .*/g)).map(([heading]) => heading);
    if (allHeadings.length > 0) {
    }
  }
  async sayHello() {
    await this.remindersController.reloadAllFiles();
    this.pluginDataIO.scanned.value = true;
    this.pluginDataIO.save();
    const expired = this.reminders.getExpiredReminders(SETTINGS.reminderTime.value);
    console.log("expired:");
    console.log(expired);
  }
  async rollover(file) {
    const { folder = "", format } = (0, import_obsidian_daily_notes_interface.getDailyNoteSettings)();
    let ignoreCreationTime = false;
    if (file == void 0) {
      const allDailyNotes = (0, import_obsidian_daily_notes_interface.getAllDailyNotes)();
      file = (0, import_obsidian_daily_notes_interface.getDailyNote)(window.moment(), allDailyNotes);
      ignoreCreationTime = true;
    }
    if (!file)
      return;
    if (!file.path.startsWith(folder))
      return;
    const today = new Date();
    const todayFormatted = window.moment(today).format(format);
    if (todayFormatted !== file.basename)
      return;
    if (today.getTime() - file.stat.ctime > MAX_TIME_SINCE_CREATION && !ignoreCreationTime)
      return;
    if (!this.isDailyNotesEnabled()) {
      new import_obsidian4.Notice("ObsidianManagerPlugin unable to rollover unfinished todos: Please enable Daily Notes, or Periodic Notes (with daily notes enabled).", 1e4);
    } else {
      const { templateHeading, deleteOnComplete, removeEmptyTodos } = this.settings;
      const lastDailyNote = this.getLastDailyNote();
      if (lastDailyNote == null)
        return;
      let todos_yesterday = await this.getAllUnfinishedTodos(lastDailyNote);
      if (todos_yesterday.length == 0) {
        console.log(`rollover-daily-todos: 0 todos found in ${lastDailyNote.basename}.md`);
        return;
      }
      let undoHistoryInstance = {
        previousDay: {
          file: void 0,
          oldContent: ""
        },
        today: {
          file: void 0,
          oldContent: ""
        }
      };
      let todosAdded = 0;
      let emptiesToNotAddToTomorrow = 0;
      let todos_today = !removeEmptyTodos ? todos_yesterday : [];
      if (removeEmptyTodos) {
        todos_yesterday.forEach((line, i) => {
          const trimmedLine = (line || "").trim();
          if (trimmedLine != "- [ ]" && trimmedLine != "- [  ]") {
            todos_today.push(line);
            todosAdded++;
          } else {
            emptiesToNotAddToTomorrow++;
          }
        });
      } else {
        todosAdded = todos_yesterday.length;
      }
      let templateHeadingNotFoundMessage = "";
      const templateHeadingSelected = templateHeading !== "none";
      if (todos_today.length > 0) {
        let dailyNoteContent = await this.app.vault.read(file);
        undoHistoryInstance.today = {
          file,
          oldContent: `${dailyNoteContent}`
        };
        const todos_todayString = `
${todos_today.join("\n")}`;
        if (templateHeadingSelected) {
          const contentAddedToHeading = dailyNoteContent.replace(templateHeading, `${templateHeading}${todos_todayString}`);
          if (contentAddedToHeading == dailyNoteContent) {
            templateHeadingNotFoundMessage = `Rollover couldn't find '${templateHeading}' in today's daily not. Rolling todos to end of file.`;
          } else {
            dailyNoteContent = contentAddedToHeading;
          }
        }
        if (!templateHeadingSelected || templateHeadingNotFoundMessage.length > 0) {
          dailyNoteContent += todos_todayString;
        }
        await this.app.vault.modify(file, dailyNoteContent);
      }
      if (deleteOnComplete) {
        let lastDailyNoteContent = await this.app.vault.read(lastDailyNote);
        undoHistoryInstance.previousDay = {
          file: lastDailyNote,
          oldContent: `${lastDailyNoteContent}`
        };
        let lines = lastDailyNoteContent.split("\n");
        for (let i = lines.length; i >= 0; i--) {
          if (todos_yesterday.includes(lines[i])) {
            lines.splice(i, 1);
          }
        }
        const modifiedContent = lines.join("\n");
        await this.app.vault.modify(lastDailyNote, modifiedContent);
      }
      const todosAddedString = todosAdded == 0 ? "" : `- ${todosAdded} todo${todosAdded > 1 ? "s" : ""} rolled over.`;
      const emptiesToNotAddToTomorrowString = emptiesToNotAddToTomorrow == 0 ? "" : deleteOnComplete ? `- ${emptiesToNotAddToTomorrow} empty todo${emptiesToNotAddToTomorrow > 1 ? "s" : ""} removed.` : "";
      const part1 = templateHeadingNotFoundMessage.length > 0 ? `${templateHeadingNotFoundMessage}` : "";
      const part2 = `${todosAddedString}${todosAddedString.length > 0 ? " " : ""}`;
      const part3 = `${emptiesToNotAddToTomorrowString}${emptiesToNotAddToTomorrowString.length > 0 ? " " : ""}`;
      let allParts = [part1, part2, part3];
      let nonBlankLines = [];
      allParts.forEach((part) => {
        if (part.length > 0) {
          nonBlankLines.push(part);
        }
      });
      const message = nonBlankLines.join("\n");
      if (message.length > 0) {
        new import_obsidian4.Notice(message, 4e3 + message.length * 3);
      }
      this.undoHistoryTime = new Date();
      this.undoHistory = [undoHistoryInstance];
    }
  }
  async onload() {
    await this.loadSettings();
    this.undoHistory = [];
    this.undoHistoryTime = new Date();
    this.registerEvent(this.app.vault.on("create", async (file) => {
      this.rollover(file);
    }));
    this.addCommand({
      id: "obsidian-manager-sayHello",
      name: "Say Hello",
      callback: () => {
        this.sayHello();
        axios_default2.post("https://ntfy.ihave.cool/test", "Look ma, with auth", {
          headers: {
            Authorization: "Basic xxx"
          }
        }).then((res) => console.log(res));
      }
    });
    this.addCommand({
      id: "obsidian-manager-rollover",
      name: "Rollover Todos Now",
      callback: () => this.rollover(void 0)
    });
    this.addCommand({
      id: "obsidian-manager-undo",
      name: "Undo last rollover",
      checkCallback: (checking) => {
        if (this.undoHistory.length > 0) {
          const now = window.moment();
          const lastUse = window.moment(this.undoHistoryTime);
          const diff = now.diff(lastUse, "seconds");
          if (diff > 2 * 60) {
            return false;
          }
          return true;
        }
        return false;
      }
    });
  }
};
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.29.1
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvYnJvd3Nlci5qcyIsICJub2RlX21vZHVsZXMvb2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlL2Rpc3QvbWFpbi5qcyIsICJub2RlX21vZHVsZXMvbW9tZW50L21vbWVudC5qcyIsICJub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuanMiLCAic3JjL21haW4udHMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCAic3JjL2NvbnRyb2xsZXIudHMiLCAic3JjL21vZGVsL2Zvcm1hdC9tYXJrZG93bi50cyIsICJzcmMvbW9kZWwvcmVmLnRzIiwgInNyYy9tb2RlbC90aW1lLnRzIiwgInNyYy9tb2RlbC9yZW1pbmRlci50cyIsICJzcmMvbW9kZWwvZm9ybWF0L3JlbWluZGVyLWJhc2UudHMiLCAic3JjL21vZGVsL2Zvcm1hdC9yZW1pbmRlci1kZWZhdWx0LnRzIiwgInNyYy9tb2RlbC9mb3JtYXQvcmVtaW5kZXIta2FuYmFuLXBsdWdpbi50cyIsICJzcmMvbW9kZWwvZm9ybWF0L3V0aWwudHMiLCAic3JjL21vZGVsL2Zvcm1hdC9yZW1pbmRlci10YXNrcy1wbHVnaW4udHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy93ZWVrZGF5LnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaGVscGVycy50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2RhdGV1dGlsLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlcnJlc3VsdC50cyIsICJub2RlX21vZHVsZXMvdHNsaWIvbW9kdWxlcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2NhbGxiYWNraXRlcnJlc3VsdC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL25scC9pMThuLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvbmxwL3RvdGV4dC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL25scC9wYXJzZXRleHQudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy90eXBlcy50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL25scC9pbmRleC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2RhdGV0aW1lLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvcGFyc2VvcHRpb25zLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvcGFyc2VzdHJpbmcudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9kYXRld2l0aHpvbmUudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9vcHRpb25zdG9zdHJpbmcudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9jYWNoZS50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL21hc2tzLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlcmluZm8veWVhcmluZm8udHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby9tb250aGluZm8udHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby9lYXN0ZXIudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby9pbmRleC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXIvcG9zbGlzdC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXIvaW5kZXgudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9ycnVsZS50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXJzZXQudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9ycnVsZXN0ci50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL3JydWxlc2V0LnRzIiwgInNyYy9tb2RlbC9mb3JtYXQvc3BsaXR0ZXIudHMiLCAic3JjL21vZGVsL2Zvcm1hdC9pbmRleC50cyIsICJzcmMvbW9kZWwvY29udGVudC50cyIsICJzcmMvbW9kZWwvc2V0dGluZ3MudHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9kYXRhLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgPyBzZWxmLkZvcm1EYXRhIDogd2luZG93LkZvcm1EYXRhO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIG9ic2lkaWFuID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcblxuY29uc3QgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1NTS1ERFwiO1xuY29uc3QgREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQgPSBcImdnZ2ctW1ddd3dcIjtcbmNvbnN0IERFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1NTVwiO1xuY29uc3QgREVGQVVMVF9RVUFSVEVSTFlfTk9URV9GT1JNQVQgPSBcIllZWVktW1FdUVwiO1xuY29uc3QgREVGQVVMVF9ZRUFSTFlfTk9URV9GT1JNQVQgPSBcIllZWVlcIjtcblxuZnVuY3Rpb24gc2hvdWxkVXNlUGVyaW9kaWNOb3Rlc1NldHRpbmdzKHBlcmlvZGljaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwZXJpb2RpY05vdGVzID0gd2luZG93LmFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LltwZXJpb2RpY2l0eV0/LmVuYWJsZWQ7XG59XG4vKipcbiAqIFJlYWQgdGhlIHVzZXIgc2V0dGluZ3MgZm9yIHRoZSBgZGFpbHktbm90ZXNgIHBsdWdpblxuICogdG8ga2VlcCBiZWhhdmlvciBvZiBjcmVhdGluZyBhIG5ldyBub3RlIGluLXN5bmMuXG4gKi9cbmZ1bmN0aW9uIGdldERhaWx5Tm90ZVNldHRpbmdzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IHsgaW50ZXJuYWxQbHVnaW5zLCBwbHVnaW5zIH0gPSB3aW5kb3cuYXBwO1xuICAgICAgICBpZiAoc2hvdWxkVXNlUGVyaW9kaWNOb3Rlc1NldHRpbmdzKFwiZGFpbHlcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZm9ybWF0LCBmb2xkZXIsIHRlbXBsYXRlIH0gPSBwbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8uZGFpbHkgfHwge307XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0IHx8IERFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICAgICAgZm9sZGVyOiBmb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZm9sZGVyLCBmb3JtYXQsIHRlbXBsYXRlIH0gPSBpbnRlcm5hbFBsdWdpbnMuZ2V0UGx1Z2luQnlJZChcImRhaWx5LW5vdGVzXCIpPy5pbnN0YW5jZT8ub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0IHx8IERFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICBmb2xkZXI6IGZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIk5vIGN1c3RvbSBkYWlseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGB3ZWVrbHktbm90ZXNgIHBsdWdpblxuICogdG8ga2VlcCBiZWhhdmlvciBvZiBjcmVhdGluZyBhIG5ldyBub3RlIGluLXN5bmMuXG4gKi9cbmZ1bmN0aW9uIGdldFdlZWtseU5vdGVTZXR0aW5ncygpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb25zdCBwbHVnaW5NYW5hZ2VyID0gd2luZG93LmFwcC5wbHVnaW5zO1xuICAgICAgICBjb25zdCBjYWxlbmRhclNldHRpbmdzID0gcGx1Z2luTWFuYWdlci5nZXRQbHVnaW4oXCJjYWxlbmRhclwiKT8ub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGVyaW9kaWNOb3Rlc1NldHRpbmdzID0gcGx1Z2luTWFuYWdlci5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKT8uc2V0dGluZ3M/LndlZWtseTtcbiAgICAgICAgaWYgKHNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyhcIndlZWtseVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IHBlcmlvZGljTm90ZXNTZXR0aW5ncy5mb3JtYXQgfHwgREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICAgICAgZm9sZGVyOiBwZXJpb2RpY05vdGVzU2V0dGluZ3MuZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogcGVyaW9kaWNOb3Rlc1NldHRpbmdzLnRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBjYWxlbmRhclNldHRpbmdzIHx8IHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBzZXR0aW5ncy53ZWVrbHlOb3RlRm9ybWF0IHx8IERFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBzZXR0aW5ncy53ZWVrbHlOb3RlRm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBzZXR0aW5ncy53ZWVrbHlOb3RlVGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIk5vIGN1c3RvbSB3ZWVrbHkgbm90ZSBzZXR0aW5ncyBmb3VuZCFcIiwgZXJyKTtcbiAgICB9XG59XG4vKipcbiAqIFJlYWQgdGhlIHVzZXIgc2V0dGluZ3MgZm9yIHRoZSBgcGVyaW9kaWMtbm90ZXNgIHBsdWdpblxuICogdG8ga2VlcCBiZWhhdmlvciBvZiBjcmVhdGluZyBhIG5ldyBub3RlIGluLXN5bmMuXG4gKi9cbmZ1bmN0aW9uIGdldE1vbnRobHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwbHVnaW5NYW5hZ2VyID0gd2luZG93LmFwcC5wbHVnaW5zO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gKHNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyhcIm1vbnRobHlcIikgJiZcbiAgICAgICAgICAgIHBsdWdpbk1hbmFnZXIuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy5tb250aGx5KSB8fFxuICAgICAgICAgICAge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHNldHRpbmdzLmZvcm1hdCB8fCBERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICBmb2xkZXI6IHNldHRpbmdzLmZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2V0dGluZ3MudGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIk5vIGN1c3RvbSBtb250aGx5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHBlcmlvZGljLW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXRRdWFydGVybHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwbHVnaW5NYW5hZ2VyID0gd2luZG93LmFwcC5wbHVnaW5zO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gKHNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyhcInF1YXJ0ZXJseVwiKSAmJlxuICAgICAgICAgICAgcGx1Z2luTWFuYWdlci5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKT8uc2V0dGluZ3M/LnF1YXJ0ZXJseSkgfHxcbiAgICAgICAgICAgIHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBzZXR0aW5ncy5mb3JtYXQgfHwgREVGQVVMVF9RVUFSVEVSTFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICBmb2xkZXI6IHNldHRpbmdzLmZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2V0dGluZ3MudGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIk5vIGN1c3RvbSBxdWFydGVybHkgbm90ZSBzZXR0aW5ncyBmb3VuZCFcIiwgZXJyKTtcbiAgICB9XG59XG4vKipcbiAqIFJlYWQgdGhlIHVzZXIgc2V0dGluZ3MgZm9yIHRoZSBgcGVyaW9kaWMtbm90ZXNgIHBsdWdpblxuICogdG8ga2VlcCBiZWhhdmlvciBvZiBjcmVhdGluZyBhIG5ldyBub3RlIGluLXN5bmMuXG4gKi9cbmZ1bmN0aW9uIGdldFllYXJseU5vdGVTZXR0aW5ncygpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBsdWdpbk1hbmFnZXIgPSB3aW5kb3cuYXBwLnBsdWdpbnM7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSAoc2hvdWxkVXNlUGVyaW9kaWNOb3Rlc1NldHRpbmdzKFwieWVhcmx5XCIpICYmXG4gICAgICAgICAgICBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8ueWVhcmx5KSB8fFxuICAgICAgICAgICAge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHNldHRpbmdzLmZvcm1hdCB8fCBERUZBVUxUX1lFQVJMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogc2V0dGluZ3MuZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBzZXR0aW5ncy50ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIHllYXJseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cblxuLy8gQ3JlZGl0OiBAY3JlYXRpb25peC9wYXRoLmpzXG5mdW5jdGlvbiBqb2luKC4uLnBhcnRTZWdtZW50cykge1xuICAgIC8vIFNwbGl0IHRoZSBpbnB1dHMgaW50byBhIGxpc3Qgb2YgcGF0aCBjb21tYW5kcy5cbiAgICBsZXQgcGFydHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRTZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFydHMgPSBwYXJ0cy5jb25jYXQocGFydFNlZ21lbnRzW2ldLnNwbGl0KFwiL1wiKSk7XG4gICAgfVxuICAgIC8vIEludGVycHJldCB0aGUgcGF0aCBjb21tYW5kcyB0byBnZXQgdGhlIG5ldyByZXNvbHZlZCBwYXRoLlxuICAgIGNvbnN0IG5ld1BhcnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAvLyBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlc1xuICAgICAgICAvLyBBbHNvIHJlbW92ZSBcIi5cIiBzZWdtZW50c1xuICAgICAgICBpZiAoIXBhcnQgfHwgcGFydCA9PT0gXCIuXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gUHVzaCBuZXcgcGF0aCBzZWdtZW50cy5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmV3UGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gICAgLy8gUHJlc2VydmUgdGhlIGluaXRpYWwgc2xhc2ggaWYgdGhlcmUgd2FzIG9uZS5cbiAgICBpZiAocGFydHNbMF0gPT09IFwiXCIpXG4gICAgICAgIG5ld1BhcnRzLnVuc2hpZnQoXCJcIik7XG4gICAgLy8gVHVybiBiYWNrIGludG8gYSBzaW5nbGUgc3RyaW5nIHBhdGguXG4gICAgcmV0dXJuIG5ld1BhcnRzLmpvaW4oXCIvXCIpO1xufVxuZnVuY3Rpb24gYmFzZW5hbWUoZnVsbFBhdGgpIHtcbiAgICBsZXQgYmFzZSA9IGZ1bGxQYXRoLnN1YnN0cmluZyhmdWxsUGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICBpZiAoYmFzZS5sYXN0SW5kZXhPZihcIi5cIikgIT0gLTEpXG4gICAgICAgIGJhc2UgPSBiYXNlLnN1YnN0cmluZygwLCBiYXNlLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgcmV0dXJuIGJhc2U7XG59XG5hc3luYyBmdW5jdGlvbiBlbnN1cmVGb2xkZXJFeGlzdHMocGF0aCkge1xuICAgIGNvbnN0IGRpcnMgPSBwYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBkaXJzLnBvcCgpOyAvLyByZW1vdmUgYmFzZW5hbWVcbiAgICBpZiAoZGlycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGlyID0gam9pbiguLi5kaXJzKTtcbiAgICAgICAgaWYgKCF3aW5kb3cuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChkaXIpKSB7XG4gICAgICAgICAgICBhd2FpdCB3aW5kb3cuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihkaXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZVBhdGgoZGlyZWN0b3J5LCBmaWxlbmFtZSkge1xuICAgIGlmICghZmlsZW5hbWUuZW5kc1dpdGgoXCIubWRcIikpIHtcbiAgICAgICAgZmlsZW5hbWUgKz0gXCIubWRcIjtcbiAgICB9XG4gICAgY29uc3QgcGF0aCA9IG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoam9pbihkaXJlY3RvcnksIGZpbGVuYW1lKSk7XG4gICAgYXdhaXQgZW5zdXJlRm9sZGVyRXhpc3RzKHBhdGgpO1xuICAgIHJldHVybiBwYXRoO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKSB7XG4gICAgY29uc3QgeyBtZXRhZGF0YUNhY2hlLCB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBvYnNpZGlhbi5ub3JtYWxpemVQYXRoKHRlbXBsYXRlKTtcbiAgICBpZiAodGVtcGxhdGVQYXRoID09PSBcIi9cIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtcIlwiLCBudWxsXSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRmlsZSA9IG1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QodGVtcGxhdGVQYXRoLCBcIlwiKTtcbiAgICAgICAgY29uc3QgY29udGVudHMgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKHRlbXBsYXRlRmlsZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IElGb2xkSW5mbyA9IHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIubG9hZCh0ZW1wbGF0ZUZpbGUpO1xuICAgICAgICByZXR1cm4gW2NvbnRlbnRzLCBJRm9sZEluZm9dO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZWFkIHRoZSBkYWlseSBub3RlIHRlbXBsYXRlICcke3RlbXBsYXRlUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIkZhaWxlZCB0byByZWFkIHRoZSBkYWlseSBub3RlIHRlbXBsYXRlXCIpO1xuICAgICAgICByZXR1cm4gW1wiXCIsIG51bGxdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBkYXRlVUlEIGlzIGEgd2F5IG9mIHdlZWtseSBpZGVudGlmeWluZyBkYWlseS93ZWVrbHkvbW9udGhseSBub3Rlcy5cbiAqIFRoZXkgYXJlIHByZWZpeGVkIHdpdGggdGhlIGdyYW51bGFyaXR5IHRvIGF2b2lkIGFtYmlndWl0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RGF0ZVVJRChkYXRlLCBncmFudWxhcml0eSA9IFwiZGF5XCIpIHtcbiAgICBjb25zdCB0cyA9IGRhdGUuY2xvbmUoKS5zdGFydE9mKGdyYW51bGFyaXR5KS5mb3JtYXQoKTtcbiAgICByZXR1cm4gYCR7Z3JhbnVsYXJpdHl9LSR7dHN9YDtcbn1cbmZ1bmN0aW9uIHJlbW92ZUVzY2FwZWRDaGFyYWN0ZXJzKGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFxbW15cXF1dKlxcXS9nLCBcIlwiKTsgLy8gcmVtb3ZlIGV2ZXJ5dGhpbmcgd2l0aGluIGJyYWNrZXRzXG59XG4vKipcbiAqIFhYWDogV2hlbiBwYXJzaW5nIGRhdGVzIHRoYXQgY29udGFpbiBib3RoIHdlZWsgbnVtYmVycyBhbmQgbW9udGhzLFxuICogTW9tZW50IGNob3NlcyB0byBpZ25vcmUgdGhlIHdlZWsgbnVtYmVycy4gRm9yIHRoZSB3ZWVrIGRhdGVVSUQsIHdlXG4gKiB3YW50IHRoZSBvcHBvc2l0ZSBiZWhhdmlvci4gU3RyaXAgdGhlIE1NTSBmcm9tIHRoZSBmb3JtYXQgdG8gcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybWF0QW1iaWd1b3VzKGZvcm1hdCwgZ3JhbnVsYXJpdHkpIHtcbiAgICBpZiAoZ3JhbnVsYXJpdHkgPT09IFwid2Vla1wiKSB7XG4gICAgICAgIGNvbnN0IGNsZWFuRm9ybWF0ID0gcmVtb3ZlRXNjYXBlZENoYXJhY3RlcnMoZm9ybWF0KTtcbiAgICAgICAgcmV0dXJuICgvd3sxLDJ9L2kudGVzdChjbGVhbkZvcm1hdCkgJiZcbiAgICAgICAgICAgICgvTXsxLDR9Ly50ZXN0KGNsZWFuRm9ybWF0KSB8fCAvRHsxLDR9Ly50ZXN0KGNsZWFuRm9ybWF0KSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbUZpbGUoZmlsZSwgZ3JhbnVsYXJpdHkpIHtcbiAgICByZXR1cm4gZ2V0RGF0ZUZyb21GaWxlbmFtZShmaWxlLmJhc2VuYW1lLCBncmFudWxhcml0eSk7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbVBhdGgocGF0aCwgZ3JhbnVsYXJpdHkpIHtcbiAgICByZXR1cm4gZ2V0RGF0ZUZyb21GaWxlbmFtZShiYXNlbmFtZShwYXRoKSwgZ3JhbnVsYXJpdHkpO1xufVxuZnVuY3Rpb24gZ2V0RGF0ZUZyb21GaWxlbmFtZShmaWxlbmFtZSwgZ3JhbnVsYXJpdHkpIHtcbiAgICBjb25zdCBnZXRTZXR0aW5ncyA9IHtcbiAgICAgICAgZGF5OiBnZXREYWlseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgd2VlazogZ2V0V2Vla2x5Tm90ZVNldHRpbmdzLFxuICAgICAgICBtb250aDogZ2V0TW9udGhseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgcXVhcnRlcjogZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzLFxuICAgICAgICB5ZWFyOiBnZXRZZWFybHlOb3RlU2V0dGluZ3MsXG4gICAgfTtcbiAgICBjb25zdCBmb3JtYXQgPSBnZXRTZXR0aW5nc1tncmFudWxhcml0eV0oKS5mb3JtYXQuc3BsaXQoXCIvXCIpLnBvcCgpO1xuICAgIGNvbnN0IG5vdGVEYXRlID0gd2luZG93Lm1vbWVudChmaWxlbmFtZSwgZm9ybWF0LCB0cnVlKTtcbiAgICBpZiAoIW5vdGVEYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzRm9ybWF0QW1iaWd1b3VzKGZvcm1hdCwgZ3JhbnVsYXJpdHkpKSB7XG4gICAgICAgIGlmIChncmFudWxhcml0eSA9PT0gXCJ3ZWVrXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuRm9ybWF0ID0gcmVtb3ZlRXNjYXBlZENoYXJhY3RlcnMoZm9ybWF0KTtcbiAgICAgICAgICAgIGlmICgvd3sxLDJ9L2kudGVzdChjbGVhbkZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93Lm1vbWVudChmaWxlbmFtZSwgXG4gICAgICAgICAgICAgICAgLy8gSWYgZm9ybWF0IGNvbnRhaW5zIHdlZWssIHJlbW92ZSBkYXkgJiBtb250aCBmb3JtYXR0aW5nXG4gICAgICAgICAgICAgICAgZm9ybWF0LnJlcGxhY2UoL017MSw0fS9nLCBcIlwiKS5yZXBsYWNlKC9EezEsNH0vZywgXCJcIiksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm90ZURhdGU7XG59XG5cbmNsYXNzIERhaWx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURhaWx5Tm90ZShkYXRlKSB7XG4gICAgY29uc3QgYXBwID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSBhcHA7XG4gICAgY29uc3QgbW9tZW50ID0gd2luZG93Lm1vbWVudDtcbiAgICBjb25zdCB7IHRlbXBsYXRlLCBmb3JtYXQsIGZvbGRlciB9ID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccypkYXRlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aW1lXFxzKn19L2dpLCBtb21lbnQoKS5mb3JtYXQoXCJISDptbVwiKSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gbW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp5ZXN0ZXJkYXlcXHMqfX0vZ2ksIGRhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCBcImRheVwiKS5mb3JtYXQoZm9ybWF0KSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0b21vcnJvd1xccyp9fS9naSwgZGF0ZS5jbG9uZSgpLmFkZCgxLCBcImRcIikuZm9ybWF0KGZvcm1hdCkpKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RGFpbHlOb3RlKGRhdGUsIGRhaWx5Tm90ZXMpIHtcbiAgICByZXR1cm4gZGFpbHlOb3Rlc1tnZXREYXRlVUlEKGRhdGUsIFwiZGF5XCIpXSA/PyBudWxsO1xufVxuZnVuY3Rpb24gZ2V0QWxsRGFpbHlOb3RlcygpIHtcbiAgICAvKipcbiAgICAgKiBGaW5kIGFsbCBkYWlseSBub3RlcyBpbiB0aGUgZGFpbHkgbm90ZSBmb2xkZXJcbiAgICAgKi9cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IGRhaWx5Tm90ZXNGb2xkZXIgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob2JzaWRpYW4ubm9ybWFsaXplUGF0aChmb2xkZXIpKTtcbiAgICBpZiAoIWRhaWx5Tm90ZXNGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IERhaWx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCBkYWlseSBub3RlcyBmb2xkZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IGRhaWx5Tm90ZXMgPSB7fTtcbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4oZGFpbHlOb3Rlc0ZvbGRlciwgKG5vdGUpID0+IHtcbiAgICAgICAgaWYgKG5vdGUgaW5zdGFuY2VvZiBvYnNpZGlhbi5URmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGdldERhdGVGcm9tRmlsZShub3RlLCBcImRheVwiKTtcbiAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGdldERhdGVVSUQoZGF0ZSwgXCJkYXlcIik7XG4gICAgICAgICAgICAgICAgZGFpbHlOb3Rlc1tkYXRlU3RyaW5nXSA9IG5vdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGFpbHlOb3Rlcztcbn1cblxuY2xhc3MgV2Vla2x5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG5mdW5jdGlvbiBnZXREYXlzT2ZXZWVrKCkge1xuICAgIGNvbnN0IHsgbW9tZW50IH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBsZXQgd2Vla1N0YXJ0ID0gbW9tZW50LmxvY2FsZURhdGEoKS5fd2Vlay5kb3c7XG4gICAgY29uc3QgZGF5c09mV2VlayA9IFtcbiAgICAgICAgXCJzdW5kYXlcIixcbiAgICAgICAgXCJtb25kYXlcIixcbiAgICAgICAgXCJ0dWVzZGF5XCIsXG4gICAgICAgIFwid2VkbmVzZGF5XCIsXG4gICAgICAgIFwidGh1cnNkYXlcIixcbiAgICAgICAgXCJmcmlkYXlcIixcbiAgICAgICAgXCJzYXR1cmRheVwiLFxuICAgIF07XG4gICAgd2hpbGUgKHdlZWtTdGFydCkge1xuICAgICAgICBkYXlzT2ZXZWVrLnB1c2goZGF5c09mV2Vlay5zaGlmdCgpKTtcbiAgICAgICAgd2Vla1N0YXJ0LS07XG4gICAgfVxuICAgIHJldHVybiBkYXlzT2ZXZWVrO1xufVxuZnVuY3Rpb24gZ2V0RGF5T2ZXZWVrTnVtZXJpY2FsVmFsdWUoZGF5T2ZXZWVrTmFtZSkge1xuICAgIHJldHVybiBnZXREYXlzT2ZXZWVrKCkuaW5kZXhPZihkYXlPZldlZWtOYW1lLnRvTG93ZXJDYXNlKCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlV2Vla2x5Tm90ZShkYXRlKSB7XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IHRlbXBsYXRlLCBmb3JtYXQsIGZvbGRlciB9ID0gZ2V0V2Vla2x5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gd2luZG93Lm1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGl0bGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoXCJISDptbVwiKSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpXFxzKjooLio/KX19L2dpLCAoXywgZGF5T2ZXZWVrLCBtb21lbnRGb3JtYXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRheSA9IGdldERheU9mV2Vla051bWVyaWNhbFZhbHVlKGRheU9mV2Vlayk7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZS53ZWVrZGF5KGRheSkuZm9ybWF0KG1vbWVudEZvcm1hdC50cmltKCkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRXZWVrbHlOb3RlKGRhdGUsIHdlZWtseU5vdGVzKSB7XG4gICAgcmV0dXJuIHdlZWtseU5vdGVzW2dldERhdGVVSUQoZGF0ZSwgXCJ3ZWVrXCIpXSA/PyBudWxsO1xufVxuZnVuY3Rpb24gZ2V0QWxsV2Vla2x5Tm90ZXMoKSB7XG4gICAgY29uc3Qgd2Vla2x5Tm90ZXMgPSB7fTtcbiAgICBpZiAoIWFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtseU5vdGVzO1xuICAgIH1cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCB3ZWVrbHlOb3Rlc0ZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICghd2Vla2x5Tm90ZXNGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFdlZWtseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yKFwiRmFpbGVkIHRvIGZpbmQgd2Vla2x5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgb2JzaWRpYW4uVmF1bHQucmVjdXJzZUNoaWxkcmVuKHdlZWtseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwid2Vla1wiKTtcbiAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGdldERhdGVVSUQoZGF0ZSwgXCJ3ZWVrXCIpO1xuICAgICAgICAgICAgICAgIHdlZWtseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB3ZWVrbHlOb3Rlcztcbn1cblxuY2xhc3MgTW9udGhseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIG1pbWljcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGRhaWx5LW5vdGVzIHBsdWdpblxuICogc28gaXQgd2lsbCByZXBsYWNlIHt7ZGF0ZX19LCB7e3RpdGxlfX0sIGFuZCB7e3RpbWV9fSB3aXRoIHRoZVxuICogZm9ybWF0dGVkIHRpbWVzdGFtcC5cbiAqXG4gKiBOb3RlOiBpdCBoYXMgYW4gYWRkZWQgYm9udXMgdGhhdCBpdCdzIG5vdCAndG9kYXknIHNwZWNpZmljLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVNb250aGx5Tm90ZShkYXRlKSB7XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IHRlbXBsYXRlLCBmb3JtYXQsIGZvbGRlciB9ID0gZ2V0TW9udGhseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihkYXRlfHRpbWUpXFxzKigoWystXVxcZCspKFt5cW13ZGhzXSkpP1xccyooOi4rPyk/fX0vZ2ksIChfLCBfdGltZU9yRGF0ZSwgY2FsYywgdGltZURlbHRhLCB1bml0LCBtb21lbnRGb3JtYXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IHdpbmRvdy5tb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKmRhdGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoXCJISDptbVwiKSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE1vbnRobHlOb3RlKGRhdGUsIG1vbnRobHlOb3Rlcykge1xuICAgIHJldHVybiBtb250aGx5Tm90ZXNbZ2V0RGF0ZVVJRChkYXRlLCBcIm1vbnRoXCIpXSA/PyBudWxsO1xufVxuZnVuY3Rpb24gZ2V0QWxsTW9udGhseU5vdGVzKCkge1xuICAgIGNvbnN0IG1vbnRobHlOb3RlcyA9IHt9O1xuICAgIGlmICghYXBwSGFzTW9udGhseU5vdGVzUGx1Z2luTG9hZGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIG1vbnRobHlOb3RlcztcbiAgICB9XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IGZvbGRlciB9ID0gZ2V0TW9udGhseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IG1vbnRobHlOb3Rlc0ZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICghbW9udGhseU5vdGVzRm9sZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBNb250aGx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCBtb250aGx5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgb2JzaWRpYW4uVmF1bHQucmVjdXJzZUNoaWxkcmVuKG1vbnRobHlOb3Rlc0ZvbGRlciwgKG5vdGUpID0+IHtcbiAgICAgICAgaWYgKG5vdGUgaW5zdGFuY2VvZiBvYnNpZGlhbi5URmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGdldERhdGVGcm9tRmlsZShub3RlLCBcIm1vbnRoXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcIm1vbnRoXCIpO1xuICAgICAgICAgICAgICAgIG1vbnRobHlOb3Rlc1tkYXRlU3RyaW5nXSA9IG5vdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9udGhseU5vdGVzO1xufVxuXG5jbGFzcyBRdWFydGVybHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBkYWlseS1ub3RlcyBwbHVnaW5cbiAqIHNvIGl0IHdpbGwgcmVwbGFjZSB7e2RhdGV9fSwge3t0aXRsZX19LCBhbmQge3t0aW1lfX0gd2l0aCB0aGVcbiAqIGZvcm1hdHRlZCB0aW1lc3RhbXAuXG4gKlxuICogTm90ZTogaXQgaGFzIGFuIGFkZGVkIGJvbnVzIHRoYXQgaXQncyBub3QgJ3RvZGF5JyBzcGVjaWZpYy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUXVhcnRlcmx5Tm90ZShkYXRlKSB7XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IHRlbXBsYXRlLCBmb3JtYXQsIGZvbGRlciB9ID0gZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gd2luZG93Lm1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UXVhcnRlcmx5Tm90ZShkYXRlLCBxdWFydGVybHkpIHtcbiAgICByZXR1cm4gcXVhcnRlcmx5W2dldERhdGVVSUQoZGF0ZSwgXCJxdWFydGVyXCIpXSA/PyBudWxsO1xufVxuZnVuY3Rpb24gZ2V0QWxsUXVhcnRlcmx5Tm90ZXMoKSB7XG4gICAgY29uc3QgcXVhcnRlcmx5ID0ge307XG4gICAgaWYgKCFhcHBIYXNRdWFydGVybHlOb3Rlc1BsdWdpbkxvYWRlZCgpKSB7XG4gICAgICAgIHJldHVybiBxdWFydGVybHk7XG4gICAgfVxuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IHF1YXJ0ZXJseUZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICghcXVhcnRlcmx5Rm9sZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBRdWFydGVybHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIHF1YXJ0ZXJseSBub3RlcyBmb2xkZXJcIik7XG4gICAgfVxuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbihxdWFydGVybHlGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJxdWFydGVyXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcInF1YXJ0ZXJcIik7XG4gICAgICAgICAgICAgICAgcXVhcnRlcmx5W2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWFydGVybHk7XG59XG5cbmNsYXNzIFllYXJseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIG1pbWljcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGRhaWx5LW5vdGVzIHBsdWdpblxuICogc28gaXQgd2lsbCByZXBsYWNlIHt7ZGF0ZX19LCB7e3RpdGxlfX0sIGFuZCB7e3RpbWV9fSB3aXRoIHRoZVxuICogZm9ybWF0dGVkIHRpbWVzdGFtcC5cbiAqXG4gKiBOb3RlOiBpdCBoYXMgYW4gYWRkZWQgYm9udXMgdGhhdCBpdCdzIG5vdCAndG9kYXknIHNwZWNpZmljLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVZZWFybHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRZZWFybHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccypkYXRlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aW1lXFxzKn19L2dpLCB3aW5kb3cubW9tZW50KCkuZm9ybWF0KFwiSEg6bW1cIikpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGl0bGVcXHMqfX0vZ2ksIGZpbGVuYW1lKSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRZZWFybHlOb3RlKGRhdGUsIHllYXJseU5vdGVzKSB7XG4gICAgcmV0dXJuIHllYXJseU5vdGVzW2dldERhdGVVSUQoZGF0ZSwgXCJ5ZWFyXCIpXSA/PyBudWxsO1xufVxuZnVuY3Rpb24gZ2V0QWxsWWVhcmx5Tm90ZXMoKSB7XG4gICAgY29uc3QgeWVhcmx5Tm90ZXMgPSB7fTtcbiAgICBpZiAoIWFwcEhhc1llYXJseU5vdGVzUGx1Z2luTG9hZGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIHllYXJseU5vdGVzO1xuICAgIH1cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXRZZWFybHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCB5ZWFybHlOb3Rlc0ZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICgheWVhcmx5Tm90ZXNGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFllYXJseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yKFwiRmFpbGVkIHRvIGZpbmQgeWVhcmx5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgb2JzaWRpYW4uVmF1bHQucmVjdXJzZUNoaWxkcmVuKHllYXJseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwieWVhclwiKTtcbiAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGdldERhdGVVSUQoZGF0ZSwgXCJ5ZWFyXCIpO1xuICAgICAgICAgICAgICAgIHllYXJseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB5ZWFybHlOb3Rlcztcbn1cblxuZnVuY3Rpb24gYXBwSGFzRGFpbHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgZGFpbHlOb3Rlc1BsdWdpbiA9IGFwcC5pbnRlcm5hbFBsdWdpbnMucGx1Z2luc1tcImRhaWx5LW5vdGVzXCJdO1xuICAgIGlmIChkYWlseU5vdGVzUGx1Z2luICYmIGRhaWx5Tm90ZXNQbHVnaW4uZW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwZXJpb2RpY05vdGVzID0gYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8uZGFpbHk/LmVuYWJsZWQ7XG59XG4vKipcbiAqIFhYWDogXCJXZWVrbHkgTm90ZXNcIiBsaXZlIGluIGVpdGhlciB0aGUgQ2FsZW5kYXIgcGx1Z2luIG9yIHRoZSBwZXJpb2RpYy1ub3RlcyBwbHVnaW4uXG4gKiBDaGVjayBib3RoIHVudGlsIHRoZSB3ZWVrbHkgbm90ZXMgZmVhdHVyZSBpcyByZW1vdmVkIGZyb20gdGhlIENhbGVuZGFyIHBsdWdpbi5cbiAqL1xuZnVuY3Rpb24gYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGlmIChhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJjYWxlbmRhclwiKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwZXJpb2RpY05vdGVzID0gYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8ud2Vla2x5Py5lbmFibGVkO1xufVxuZnVuY3Rpb24gYXBwSGFzTW9udGhseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwZXJpb2RpY05vdGVzID0gYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8ubW9udGhseT8uZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGFwcEhhc1F1YXJ0ZXJseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwZXJpb2RpY05vdGVzID0gYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8ucXVhcnRlcmx5Py5lbmFibGVkO1xufVxuZnVuY3Rpb24gYXBwSGFzWWVhcmx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSBhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcbiAgICByZXR1cm4gcGVyaW9kaWNOb3RlcyAmJiBwZXJpb2RpY05vdGVzLnNldHRpbmdzPy55ZWFybHk/LmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBnZXRQZXJpb2RpY05vdGVTZXR0aW5ncyhncmFudWxhcml0eSkge1xuICAgIGNvbnN0IGdldFNldHRpbmdzID0ge1xuICAgICAgICBkYXk6IGdldERhaWx5Tm90ZVNldHRpbmdzLFxuICAgICAgICB3ZWVrOiBnZXRXZWVrbHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIG1vbnRoOiBnZXRNb250aGx5Tm90ZVNldHRpbmdzLFxuICAgICAgICBxdWFydGVyOiBnZXRRdWFydGVybHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIHllYXI6IGdldFllYXJseU5vdGVTZXR0aW5ncyxcbiAgICB9W2dyYW51bGFyaXR5XTtcbiAgICByZXR1cm4gZ2V0U2V0dGluZ3MoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBlcmlvZGljTm90ZShncmFudWxhcml0eSwgZGF0ZSkge1xuICAgIGNvbnN0IGNyZWF0ZUZuID0ge1xuICAgICAgICBkYXk6IGNyZWF0ZURhaWx5Tm90ZSxcbiAgICAgICAgbW9udGg6IGNyZWF0ZU1vbnRobHlOb3RlLFxuICAgICAgICB3ZWVrOiBjcmVhdGVXZWVrbHlOb3RlLFxuICAgIH07XG4gICAgcmV0dXJuIGNyZWF0ZUZuW2dyYW51bGFyaXR5XShkYXRlKTtcbn1cblxuZXhwb3J0cy5ERUZBVUxUX0RBSUxZX05PVEVfRk9STUFUID0gREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVDtcbmV4cG9ydHMuREVGQVVMVF9NT05USExZX05PVEVfRk9STUFUID0gREVGQVVMVF9NT05USExZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5ERUZBVUxUX1FVQVJURVJMWV9OT1RFX0ZPUk1BVCA9IERFRkFVTFRfUVVBUlRFUkxZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5ERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCA9IERFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5ERUZBVUxUX1lFQVJMWV9OT1RFX0ZPUk1BVCA9IERFRkFVTFRfWUVBUkxZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5hcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzRGFpbHlOb3Rlc1BsdWdpbkxvYWRlZDtcbmV4cG9ydHMuYXBwSGFzTW9udGhseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzTW9udGhseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5hcHBIYXNRdWFydGVybHlOb3Rlc1BsdWdpbkxvYWRlZCA9IGFwcEhhc1F1YXJ0ZXJseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5hcHBIYXNXZWVrbHlOb3Rlc1BsdWdpbkxvYWRlZCA9IGFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5hcHBIYXNZZWFybHlOb3Rlc1BsdWdpbkxvYWRlZCA9IGFwcEhhc1llYXJseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5jcmVhdGVEYWlseU5vdGUgPSBjcmVhdGVEYWlseU5vdGU7XG5leHBvcnRzLmNyZWF0ZU1vbnRobHlOb3RlID0gY3JlYXRlTW9udGhseU5vdGU7XG5leHBvcnRzLmNyZWF0ZVBlcmlvZGljTm90ZSA9IGNyZWF0ZVBlcmlvZGljTm90ZTtcbmV4cG9ydHMuY3JlYXRlUXVhcnRlcmx5Tm90ZSA9IGNyZWF0ZVF1YXJ0ZXJseU5vdGU7XG5leHBvcnRzLmNyZWF0ZVdlZWtseU5vdGUgPSBjcmVhdGVXZWVrbHlOb3RlO1xuZXhwb3J0cy5jcmVhdGVZZWFybHlOb3RlID0gY3JlYXRlWWVhcmx5Tm90ZTtcbmV4cG9ydHMuZ2V0QWxsRGFpbHlOb3RlcyA9IGdldEFsbERhaWx5Tm90ZXM7XG5leHBvcnRzLmdldEFsbE1vbnRobHlOb3RlcyA9IGdldEFsbE1vbnRobHlOb3RlcztcbmV4cG9ydHMuZ2V0QWxsUXVhcnRlcmx5Tm90ZXMgPSBnZXRBbGxRdWFydGVybHlOb3RlcztcbmV4cG9ydHMuZ2V0QWxsV2Vla2x5Tm90ZXMgPSBnZXRBbGxXZWVrbHlOb3RlcztcbmV4cG9ydHMuZ2V0QWxsWWVhcmx5Tm90ZXMgPSBnZXRBbGxZZWFybHlOb3RlcztcbmV4cG9ydHMuZ2V0RGFpbHlOb3RlID0gZ2V0RGFpbHlOb3RlO1xuZXhwb3J0cy5nZXREYWlseU5vdGVTZXR0aW5ncyA9IGdldERhaWx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXREYXRlRnJvbUZpbGUgPSBnZXREYXRlRnJvbUZpbGU7XG5leHBvcnRzLmdldERhdGVGcm9tUGF0aCA9IGdldERhdGVGcm9tUGF0aDtcbmV4cG9ydHMuZ2V0RGF0ZVVJRCA9IGdldERhdGVVSUQ7XG5leHBvcnRzLmdldE1vbnRobHlOb3RlID0gZ2V0TW9udGhseU5vdGU7XG5leHBvcnRzLmdldE1vbnRobHlOb3RlU2V0dGluZ3MgPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRQZXJpb2RpY05vdGVTZXR0aW5ncyA9IGdldFBlcmlvZGljTm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRRdWFydGVybHlOb3RlID0gZ2V0UXVhcnRlcmx5Tm90ZTtcbmV4cG9ydHMuZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzID0gZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRUZW1wbGF0ZUluZm8gPSBnZXRUZW1wbGF0ZUluZm87XG5leHBvcnRzLmdldFdlZWtseU5vdGUgPSBnZXRXZWVrbHlOb3RlO1xuZXhwb3J0cy5nZXRXZWVrbHlOb3RlU2V0dGluZ3MgPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3M7XG5leHBvcnRzLmdldFllYXJseU5vdGUgPSBnZXRZZWFybHlOb3RlO1xuZXhwb3J0cy5nZXRZZWFybHlOb3RlU2V0dGluZ3MgPSBnZXRZZWFybHlOb3RlU2V0dGluZ3M7XG4iLCAiLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjI5LjFcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcygpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eTogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnM6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQ6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlcjogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkRXJhOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0czogW10sXG4gICAgICAgICAgICBlcmE6IG51bGwsXG4gICAgICAgICAgICBtZXJpZGllbTogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjI6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHQubGVuZ3RoID4+PiAwLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKSxcbiAgICAgICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEVyYSAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IChob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW10pLFxuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbnNvbGUud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAga2V5O1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoYXJndW1lbnRzWzBdLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAgICAgbXNnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG5Bcmd1bWVudHM6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2tcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbiAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGVvZiBGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjb25maWcsIGkpKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAgICAgL1xcZHsxLDJ9Ly5zb3VyY2VcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLFxuICAgICAgICAgICAgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArXG4gICAgICAgICAgICBhYnNOdW1iZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csXG4gICAgICAgIGZvcm1hdEZ1bmN0aW9ucyA9IHt9LFxuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICAgICAgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKVxuICAgICAgICAgICAgICAgICAgICA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID1cbiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0KGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyXG4gICAgICAgICAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2VucylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU1NTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ0REJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdkZGRkJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCcsXG4gICAgICAgIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICB3OiAnYSB3ZWVrJyxcbiAgICAgICAgd3c6ICclZCB3ZWVrcycsXG4gICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpXG4gICAgICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgICAgICA6IG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXModW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgICAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXSxcbiAgICAgICAgICAgIHU7XG4gICAgICAgIGZvciAodSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AodW5pdHNPYmosIHUpKSB7XG4gICAgICAgICAgICAgICAgdW5pdHMucHVzaCh7IHVuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQobW9tLCB1bml0KSB7XG4gICAgICAgIHJldHVybiBtb20uaXNWYWxpZCgpXG4gICAgICAgICAgICA/IG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpXG4gICAgICAgICAgICA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMShtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB1bml0ID09PSAnRnVsbFllYXInICYmXG4gICAgICAgICAgICAgICAgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJlxuICAgICAgICAgICAgICAgIG1vbS5tb250aCgpID09PSAxICYmXG4gICAgICAgICAgICAgICAgbW9tLmRhdGUoKSA9PT0gMjlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XShcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG1vbS5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxID0gL1xcZC8sIC8vICAgICAgIDAgLSA5XG4gICAgICAgIG1hdGNoMiA9IC9cXGRcXGQvLCAvLyAgICAgIDAwIC0gOTlcbiAgICAgICAgbWF0Y2gzID0gL1xcZHszfS8sIC8vICAgICAwMDAgLSA5OTlcbiAgICAgICAgbWF0Y2g0ID0gL1xcZHs0fS8sIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgICAgIG1hdGNoNiA9IC9bKy1dP1xcZHs2fS8sIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2gxdG8yID0gL1xcZFxcZD8vLCAvLyAgICAgICAwIC0gOTlcbiAgICAgICAgbWF0Y2gzdG80ID0gL1xcZFxcZFxcZFxcZD8vLCAvLyAgICAgOTk5IC0gOTk5OVxuICAgICAgICBtYXRjaDV0bzYgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy8sIC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2gxdG8zID0gL1xcZHsxLDN9LywgLy8gICAgICAgMCAtIDk5OVxuICAgICAgICBtYXRjaDF0bzQgPSAvXFxkezEsNH0vLCAvLyAgICAgICAwIC0gOTk5OVxuICAgICAgICBtYXRjaDF0bzYgPSAvWystXT9cXGR7MSw2fS8sIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2hVbnNpZ25lZCA9IC9cXGQrLywgLy8gICAgICAgMCAtIGluZlxuICAgICAgICBtYXRjaFNpZ25lZCA9IC9bKy1dP1xcZCsvLCAvLyAgICAtaW5mIC0gaW5mXG4gICAgICAgIG1hdGNoT2Zmc2V0ID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpLCAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpLCAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgICAgICBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy8sIC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG4gICAgICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgICAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgICAgIG1hdGNoV29yZCA9IC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pLFxuICAgICAgICByZWdleGVzO1xuXG4gICAgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbih0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleClcbiAgICAgICAgICAgID8gcmVnZXhcbiAgICAgICAgICAgIDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXggPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUoXG4gICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1xcXFwnLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAoXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWQsXG4gICAgICAgICAgICAgICAgICAgIHAxLFxuICAgICAgICAgICAgICAgICAgICBwMixcbiAgICAgICAgICAgICAgICAgICAgcDMsXG4gICAgICAgICAgICAgICAgICAgIHA0XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDAsXG4gICAgICAgIE1PTlRIID0gMSxcbiAgICAgICAgREFURSA9IDIsXG4gICAgICAgIEhPVVIgPSAzLFxuICAgICAgICBNSU5VVEUgPSA0LFxuICAgICAgICBTRUNPTkQgPSA1LFxuICAgICAgICBNSUxMSVNFQ09ORCA9IDYsXG4gICAgICAgIFdFRUsgPSA3LFxuICAgICAgICBXRUVLREFZID0gODtcblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxXG4gICAgICAgICAgICA/IGlzTGVhcFllYXIoeWVhcilcbiAgICAgICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICAgICAgOiAyOFxuICAgICAgICAgICAgOiAzMSAtICgobW9kTW9udGggJSA3KSAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy8sXG4gICAgICAgIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1tcbiAgICAgICAgICAgICAgICAgICh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF1bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0W1xuICAgICAgICAgICAgICAgICAgTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnTU1NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnTU1NJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGgodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gemVyb0ZpbGwoeSwgNCkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsIDRdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCA1XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPVxuICAgICAgICAgICAgaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlKHkpIHtcbiAgICAgICAgdmFyIGRhdGUsIGFyZ3M7XG4gICAgICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBhcmdzWzBdID0geSArIDQwMDtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsXG4gICAgICAgICAgICByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLFxuICAgICAgICAgICAgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrJywgJ1cnKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2VlaycsIDUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoXG4gICAgICAgIGlucHV0LFxuICAgICAgICB3ZWVrLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHRva2VuXG4gICAgKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpXG4gICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzXG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzW1xuICAgICAgICAgICAgICAgICAgbSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdO1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgPyB3ZWVrZGF5c1ttLmRheSgpXVxuICAgICAgICAgICAgOiB3ZWVrZGF5cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0KG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c1Nob3J0LCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldXG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4obSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXVxuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2Uod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgJ14nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZGRkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIG1pbnAsXG4gICAgICAgICAgICBzaG9ydHAsXG4gICAgICAgICAgICBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c01pbihtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydHAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ3AgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgaEZvcm1hdC5hcHBseSh0aGlzKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICB0aGlzLmhvdXJzKCkgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0odG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKFxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoKSxcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgICBsb3dlcmNhc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0oaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuIChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pLFxuICAgICAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAgICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAgICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgICAgIC8vIHRoaXMgcnVsZS5cbiAgICAgICAgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbShob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlLFxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fSxcbiAgICAgICAgbG9jYWxlRmFtaWxpZXMgPSB7fSxcbiAgICAgICAgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gY29tbW9uUHJlZml4KGFycjEsIGFycjIpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBtaW5sID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1pbmw7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWlubDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBuZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQubGVuZ3RoID49IGogJiZcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uUHJlZml4KHNwbGl0LCBuZXh0KSA+PSBqIC0gMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGwsXG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZTtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgbW9kdWxlICYmXG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0c1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIG1hcmsgYXMgbm90IGZvdW5kIHRvIGF2b2lkIHJlcGVhdGluZyBleHBlbnNpdmUgZmlsZSByZXF1aXJlIGNhbGwgY2F1c2luZyBoaWdoIENQVVxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdHJ5aW5nIHRvIGZpbmQgZW4tVVMsIGVuX1VTLCBlbi11cyBmb3IgZXZlcnkgZm9ybWF0IGNhbGxcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbnVsbDsgLy8gbnVsbCBtZWFucyBub3QgZm91bmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAnTG9jYWxlICcgKyBrZXkgKyAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgICAgICdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHRtcExvY2FsZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsICYmIGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgY2hpbGQgbG9jYWxlIGluLXBsYWNlIHRvIGF2b2lkIG1lbW9yeS1sZWFrc1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0uc2V0KG1lcmdlQ29uZmlncyhsb2NhbGVzW25hbWVdLl9jb25maWcsIGNvbmZpZykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNRVJHRVxuICAgICAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGVMb2NhbGUgaXMgY2FsbGVkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFiYnIgc28gaXQgd2lsbCBoYXZlIGEgbmFtZSAoZ2V0dGVycyByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgLy8gdW5kZWZpbmVkIG90aGVyd2lzZSkuXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBnZXRTZXRHbG9iYWxMb2NhbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93LFxuICAgICAgICAgICAgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdIDwgMCB8fCBhW01PTlRIXSA+IDExXG4gICAgICAgICAgICAgICAgICAgID8gTU9OVEhcbiAgICAgICAgICAgICAgICAgICAgOiBhW0RBVEVdIDwgMSB8fCBhW0RBVEVdID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pXG4gICAgICAgICAgICAgICAgICAgID8gREFURVxuICAgICAgICAgICAgICAgICAgICA6IGFbSE9VUl0gPCAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgYVtIT1VSXSA+IDI0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgKGFbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhW01JTlVURV0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbU0VDT05EXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gIT09IDApKVxuICAgICAgICAgICAgICAgICAgICA/IEhPVVJcbiAgICAgICAgICAgICAgICAgICAgOiBhW01JTlVURV0gPCAwIHx8IGFbTUlOVVRFXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgID8gTUlOVVRFXG4gICAgICAgICAgICAgICAgICAgIDogYVtTRUNPTkRdIDwgMCB8fCBhW1NFQ09ORF0gPiA1OVxuICAgICAgICAgICAgICAgICAgICA/IFNFQ09ORFxuICAgICAgICAgICAgICAgICAgICA6IGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OVxuICAgICAgICAgICAgICAgICAgICA/IE1JTExJU0VDT05EXG4gICAgICAgICAgICAgICAgICAgIDogLTE7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmXG4gICAgICAgICAgICAgICAgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZHwpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LyxcbiAgICAgICAgaXNvRGF0ZXMgPSBbXG4gICAgICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTScsIC9cXGR7Nn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVknLCAvXFxkezR9LywgZmFsc2VdLFxuICAgICAgICBdLFxuICAgICAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgICAgIGlzb1RpbWVzID0gW1xuICAgICAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEgnLCAvXFxkXFxkL10sXG4gICAgICAgIF0sXG4gICAgICAgIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoLT9cXGQrKS9pLFxuICAgICAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgICAgIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvLFxuICAgICAgICBvYnNPZmZzZXRzID0ge1xuICAgICAgICAgICAgVVQ6IDAsXG4gICAgICAgICAgICBHTVQ6IDAsXG4gICAgICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgICAgICBQU1Q6IC04ICogNjAsXG4gICAgICAgIH07XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsXG4gICAgICAgICAgICBkYXRlRm9ybWF0LFxuICAgICAgICAgICAgdGltZUZvcm1hdCxcbiAgICAgICAgICAgIHR6Rm9ybWF0O1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICB5ZWFyU3RyLFxuICAgICAgICBtb250aFN0cixcbiAgICAgICAgZGF5U3RyLFxuICAgICAgICBob3VyU3RyLFxuICAgICAgICBtaW51dGVTdHIsXG4gICAgICAgIHNlY29uZFN0clxuICAgICkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApLFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbmRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzBdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsxXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMl1cbiAgICAgICAgICAgICAgICApLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApLFxuICAgICAgICAgICAgICAgIG0gPSBobSAlIDEwMCxcbiAgICAgICAgICAgICAgICBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpLFxuICAgICAgICAgICAgcGFyc2VkQXJyYXk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICAgICAgICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzddXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSAxKSBBU1AuTkVULCAyKSBJU08sIDMpIFJGQyAyODIyIGZvcm1hdHMsIG9yIDQpIG9wdGlvbmFsIGZhbGxiYWNrIGlmIHBhcnNpbmcgaXNuJ3Qgc3RyaWN0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fc3RyaWN0KSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICAgICAnZGlzY291cmFnZWQuIFBsZWFzZSByZWZlciB0byBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgICAgICBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgIGV4cGVjdGVkV2Vla2RheSxcbiAgICAgICAgICAgIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9XG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW2ldID09IG51bGwgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVENcbiAgICAgICAgICAgID8gY29uZmlnLl9kLmdldFVUQ0RheSgpXG4gICAgICAgICAgICA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl93ICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5XG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93LCBjdXJXZWVrO1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMoXG4gICAgICAgICAgICAgICAgdy5HRyxcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbWUVBUl0sXG4gICAgICAgICAgICAgICAgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICB0b2tlbnMsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgICAgICBlcmE7XG5cbiAgICAgICAgdG9rZW5zID1cbiAgICAgICAgICAgIGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8XG4gICAgICAgICAgICAgICAgW10pWzBdO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID1cbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKFxuICAgICAgICAgICAgY29uZmlnLl9sb2NhbGUsXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0sXG4gICAgICAgICAgICBjb25maWcuX21lcmlkaWVtXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVyYVxuICAgICAgICBlcmEgPSBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmE7XG4gICAgICAgIGlmIChlcmEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNDb252ZXJ0WWVhcihlcmEsIGNvbmZpZy5fYVtZRUFSXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlLFxuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCxcbiAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKGlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmICghYmVzdEZvcm1hdElzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZEZvcm1hdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSksXG4gICAgICAgICAgICBkYXlPckRhdGUgPSBpLmRheSA9PT0gdW5kZWZpbmVkID8gaS5kYXRlIDogaS5kYXk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChcbiAgICAgICAgICAgIFtpLnllYXIsIGkubW9udGgsIGRheU9yRGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoeyBudWxsSW5wdXQ6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdHJ1ZSB8fCBmb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4KCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICtuZXcgRGF0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbXG4gICAgICAgICd5ZWFyJyxcbiAgICAgICAgJ3F1YXJ0ZXInLFxuICAgICAgICAnbW9udGgnLFxuICAgICAgICAnd2VlaycsXG4gICAgICAgICdkYXknLFxuICAgICAgICAnaG91cicsXG4gICAgICAgICdtaW51dGUnLFxuICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gZmFsc2UsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChtLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPVxuICAgICAgICAgICAgK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArIHF1YXJ0ZXJzICogMyArIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzaWduICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+b2Zmc2V0ICUgNjAsIDIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlciksXG4gICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgIHBhcnRzLFxuICAgICAgICAgICAgbWludXRlcztcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgcGFydHMgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/IDAgOiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9XG4gICAgICAgICAgICAgICAgKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyhrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fSxcbiAgICAgICAgICAgIG90aGVyO1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPVxuICAgICAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKyk6KFxcZCspKD86OihcXGQrKShcXC5cXGQqKT8pPyQvLFxuICAgICAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgICAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICAgICAgaXNvUmVnZXggPSAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQ6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE06IGlucHV0Ll9tb250aHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSB8fCAhaXNOYU4oK2lucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gK2lucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSAraW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgZDogdG9JbnQobWF0Y2hbREFURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBoOiB0b0ludChtYXRjaFtIT1VSXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG06IHRvSW50KG1hdGNoW01JTlVURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBzOiB0b0ludChtYXRjaFtTRUNPTkRdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXM6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24sIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE06IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3OiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGg6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgczogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi50bylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfaXNWYWxpZCcpKSB7XG4gICAgICAgICAgICByZXQuX2lzVmFsaWQgPSBpbnB1dC5faXNWYWxpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9XG4gICAgICAgICAgICBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICsgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gK2Jhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsO1xuICAgICAgICAgICAgICAgIHZhbCA9IHBlcmlvZDtcbiAgICAgICAgICAgICAgICBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyksXG4gICAgICAgIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gdHlwZSBNb21lbnRJbnB1dCA9IE1vbWVudCB8IERhdGUgfCBzdHJpbmcgfCBudW1iZXIgfCAobnVtYmVyIHwgc3RyaW5nKVtdIHwgTW9tZW50SW5wdXRPYmplY3QgfCB2b2lkOyAvLyBudWxsIHwgdW5kZWZpbmVkXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dChpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNNb21lbnQoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc0RhdGUoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc1N0cmluZyhpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSBudWxsIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3llYXJzJyxcbiAgICAgICAgICAgICAgICAneWVhcicsXG4gICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICdtb250aHMnLFxuICAgICAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAgICAgJ00nLFxuICAgICAgICAgICAgICAgICdkYXlzJyxcbiAgICAgICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICAgICAnZCcsXG4gICAgICAgICAgICAgICAgJ2RhdGVzJyxcbiAgICAgICAgICAgICAgICAnZGF0ZScsXG4gICAgICAgICAgICAgICAgJ0QnLFxuICAgICAgICAgICAgICAgICdob3VycycsXG4gICAgICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgICAgICdoJyxcbiAgICAgICAgICAgICAgICAnbWludXRlcycsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICAgICAgICAgJ20nLFxuICAgICAgICAgICAgICAgICdzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAncycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAnbXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgdmFyIGFycmF5VGVzdCA9IGlzQXJyYXkoaW5wdXQpLFxuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID0gZmFsc2U7XG4gICAgICAgIGlmIChhcnJheVRlc3QpIHtcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9XG4gICAgICAgICAgICAgICAgaW5wdXQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXIoaXRlbSkgJiYgaXNTdHJpbmcoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlUZXN0ICYmIGRhdGFUeXBlVGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NhbGVuZGFyU3BlYyhpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3NhbWVEYXknLFxuICAgICAgICAgICAgICAgICduZXh0RGF5JyxcbiAgICAgICAgICAgICAgICAnbGFzdERheScsXG4gICAgICAgICAgICAgICAgJ25leHRXZWVrJyxcbiAgICAgICAgICAgICAgICAnbGFzdFdlZWsnLFxuICAgICAgICAgICAgICAgICdzYW1lRWxzZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNlxuICAgICAgICAgICAgPyAnc2FtZUVsc2UnXG4gICAgICAgICAgICA6IGRpZmYgPCAtMVxuICAgICAgICAgICAgPyAnbGFzdFdlZWsnXG4gICAgICAgICAgICA6IGRpZmYgPCAwXG4gICAgICAgICAgICA/ICdsYXN0RGF5J1xuICAgICAgICAgICAgOiBkaWZmIDwgMVxuICAgICAgICAgICAgPyAnc2FtZURheSdcbiAgICAgICAgICAgIDogZGlmZiA8IDJcbiAgICAgICAgICAgID8gJ25leHREYXknXG4gICAgICAgICAgICA6IGRpZmYgPCA3XG4gICAgICAgICAgICA/ICduZXh0V2VlaydcbiAgICAgICAgICAgIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3Igc2luZ2xlIHBhcmFtZXRlciwgZm9ybWF0cyBvbmx5IG92ZXJsb2FkIHRvIHRoZSBjYWxlbmRhciBmdW5jdGlvblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9tZW50SW5wdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDYWxlbmRhclNwZWMoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBmb3JtYXRzICYmXG4gICAgICAgICAgICAgICAgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKVxuICAgICAgICAgICAgICAgICAgICA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdylcbiAgICAgICAgICAgICAgICAgICAgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChcbiAgICAgICAgICAgIG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2Vlbihmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiZcbiAgICAgICAgICAgICAgICBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCwgem9uZURlbHRhLCBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYoYSwgYikge1xuICAgICAgICBpZiAoYS5kYXRlKCkgPCBiLmRhdGUoKSkge1xuICAgICAgICAgICAgLy8gZW5kLW9mLW1vbnRoIGNhbGN1bGF0aW9ucyB3b3JrIGNvcnJlY3Qgd2hlbiB0aGUgc3RhcnQgbW9udGggaGFzIG1vcmVcbiAgICAgICAgICAgIC8vIGRheXMgdGhhbiB0aGUgZW5kIG1vbnRoLlxuICAgICAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgICAgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlLFxuICAgICAgICAgICAgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgdXRjXG4gICAgICAgICAgICAgICAgICAgID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXSdcbiAgICAgICAgICAgICAgICAgICAgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApXG4gICAgICAgICAgICAgICAgICAgIC50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICBtLFxuICAgICAgICAgICAgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCcsXG4gICAgICAgICAgICB6b25lID0gJycsXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgZGF0ZXRpbWUsXG4gICAgICAgICAgICBzdWZmaXg7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB5ZWFyID0gMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5ID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKVxuICAgICAgICAgICAgICAgID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0Y1xuICAgICAgICAgICAgICAgIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyB0bzogdGhpcywgZnJvbTogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZnJvbTogdGhpcywgdG86IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMCxcbiAgICAgICAgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORCxcbiAgICAgICAgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEUsXG4gICAgICAgIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuICgoZGl2aWRlbmQgJSBkaXZpc29yKSArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMykgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9XG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSIC1cbiAgICAgICAgICAgICAgICAgICAgbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgICAgICkgLVxuICAgICAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtLnllYXIoKSxcbiAgICAgICAgICAgIG0ubW9udGgoKSxcbiAgICAgICAgICAgIG0uZGF0ZSgpLFxuICAgICAgICAgICAgbS5ob3VyKCksXG4gICAgICAgICAgICBtLm1pbnV0ZSgpLFxuICAgICAgICAgICAgbS5zZWNvbmQoKSxcbiAgICAgICAgICAgIG0ubWlsbGlzZWNvbmQoKSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMigpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3QsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ04nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk4nLCAwLCAwLCAnZXJhTmFtZScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OTicsIDAsIDAsICdlcmFOYXJyb3cnKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5JywgMV0sICd5bycsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5JywgMl0sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eScsIDNdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXl5JywgNF0sIDAsICdlcmFZZWFyJyk7XG5cbiAgICBhZGRSZWdleFRva2VuKCdOJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OJywgbWF0Y2hFcmFOYW1lKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OTicsIG1hdGNoRXJhTmFycm93KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydOJywgJ05OJywgJ05OTicsICdOTk5OJywgJ05OTk5OJ10sIGZ1bmN0aW9uIChcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIGFycmF5LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHRva2VuXG4gICAgKSB7XG4gICAgICAgIHZhciBlcmEgPSBjb25maWcuX2xvY2FsZS5lcmFzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIGlmIChlcmEpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYSA9IGVyYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRFcmEgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkUmVnZXhUb2tlbigneScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3lvJywgbWF0Y2hFcmFZZWFyT3JkaW5hbCk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsneScsICd5eScsICd5eXknLCAneXl5eSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsneW8nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCkge1xuICAgICAgICAgICAgbWF0Y2ggPSBpbnB1dC5tYXRjaChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZSkge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKGlucHV0LCBtYXRjaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5fZXJhcyB8fCBnZXRMb2NhbGUoJ2VuJykuX2VyYXM7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0uc2luY2UpLnN0YXJ0T2YoJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnNpbmNlID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9ICtJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS51bnRpbCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcmFzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNQYXJzZShlcmFOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCksXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYWJicixcbiAgICAgICAgICAgIG5hcnJvdztcbiAgICAgICAgZXJhTmFtZSA9IGVyYU5hbWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWUgPSBlcmFzW2ldLm5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGFiYnIgPSBlcmFzW2ldLmFiYnIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIG5hcnJvdyA9IGVyYXNbaV0ubmFycm93LnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiYnIgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXJyb3cgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW25hbWUsIGFiYnIsIG5hcnJvd10uaW5kZXhPZihlcmFOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzQ29udmVydFllYXIoZXJhLCB5ZWFyKSB7XG4gICAgICAgIHZhciBkaXIgPSBlcmEuc2luY2UgPD0gZXJhLnVudGlsID8gKzEgOiAtMTtcbiAgICAgICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpICsgKHllYXIgLSBlcmEub2Zmc2V0KSAqIGRpcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hbWUoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFycm93KCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFBYmJyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYVllYXIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgZGlyID0gZXJhc1tpXS5zaW5jZSA8PSBlcmFzW2ldLnVudGlsID8gKzEgOiAtMTtcblxuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkgfHxcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy55ZWFyKCkgLSBob29rcyhlcmFzW2ldLnNpbmNlKS55ZWFyKCkpICogZGlyICtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5vZmZzZXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hbWVSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hbWVSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzQWJiclJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNBYmJyUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNBYmJyUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYXJyb3dSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hcnJvd1JlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhQWJicihpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc0FiYnJSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYW1lKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hcnJvdyhpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYVllYXJPcmRpbmFsKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCB8fCBtYXRjaFVuc2lnbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVFcmFzUGFyc2UoKSB7XG4gICAgICAgIHZhciBhYmJyUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYW1lUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWVQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpKTtcbiAgICAgICAgICAgIGFiYnJQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLmFiYnIpKTtcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFycm93KSk7XG5cbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicikpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZXJhc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbmFtZVBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNBYmJyUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBhYmJyUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hcnJvd1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBuYXJyb3dQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4odG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgd2VlayxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0b2tlblxuICAgICkge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrKCksXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWtkYXkoKSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy5pc29XZWVrWWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLndlZWtZZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMylcbiAgICAgICAgICAgIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyAodGhpcy5tb250aCgpICUgMykpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXRlJywgOSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0XG4gICAgICAgICAgICA/IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZVxuICAgICAgICAgICAgOiBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhcihpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID1cbiAgICAgICAgICAgIE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTVcbiAgICAgICAgICAgICkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKGlucHV0IC0gZGF5T2ZZZWFyLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaW51dGUnLCAxNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW4sIGdldFNldE1pbGxpc2Vjb25kO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cblxuICAgIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ID0gZnJvbU5vdztcbiAgICBwcm90by50byA9IHRvO1xuICAgIHByb3RvLnRvTm93ID0gdG9Ob3c7XG4gICAgcHJvdG8uZ2V0ID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgPSBpc1NhbWU7XG4gICAgcHJvdG8uaXNTYW1lT3JBZnRlciA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgPSBsYW5nO1xuICAgIHByb3RvLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YTtcbiAgICBwcm90by5tYXggPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyA9IHBhcnNpbmdGbGFncztcbiAgICBwcm90by5zZXQgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiA9IHN0YXJ0T2Y7XG4gICAgcHJvdG8uc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBwcm90by50b0FycmF5ID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSA9IHRvRGF0ZTtcbiAgICBwcm90by50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nO1xuICAgIHByb3RvLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuZm9yICE9IG51bGwpIHtcbiAgICAgICAgcHJvdG9bU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01vbWVudDwnICsgdGhpcy5mb3JtYXQoKSArICc+JztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHJvdG8udG9KU09OID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiA9IHZhbHVlT2Y7XG4gICAgcHJvdG8uY3JlYXRpb25EYXRhID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLmVyYU5hbWUgPSBnZXRFcmFOYW1lO1xuICAgIHByb3RvLmVyYU5hcnJvdyA9IGdldEVyYU5hcnJvdztcbiAgICBwcm90by5lcmFBYmJyID0gZ2V0RXJhQWJicjtcbiAgICBwcm90by5lcmFZZWFyID0gZ2V0RXJhWWVhcjtcbiAgICBwcm90by55ZWFyID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayA9IHByb3RvLndlZWtzID0gZ2V0U2V0V2VlaztcbiAgICBwcm90by5pc29XZWVrID0gcHJvdG8uaXNvV2Vla3MgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8ud2Vla3NJbldlZWtZZWFyID0gZ2V0V2Vla3NJbldlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJbklTT1dlZWtZZWFyID0gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyO1xuICAgIHByb3RvLmRhdGUgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIHByb3RvLmRheSA9IHByb3RvLmRheXMgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBwcm90by5sb2NhbCA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgcHJvdG8ucGFyc2Vab25lID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgPSBpc0xvY2FsO1xuICAgIHByb3RvLmlzVXRjT2Zmc2V0ID0gaXNVdGNPZmZzZXQ7XG4gICAgcHJvdG8uaXNVdGMgPSBpc1V0YztcbiAgICBwcm90by5pc1VUQyA9IGlzVXRjO1xuICAgIHByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbiAgICBwcm90by5kYXRlcyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0RGF5T2ZNb250aFxuICAgICk7XG4gICAgcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0TW9udGhcbiAgICApO1xuICAgIHByb3RvLnllYXJzID0gZGVwcmVjYXRlKFxuICAgICAgICAneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsXG4gICAgICAgIGdldFNldFllYXJcbiAgICApO1xuICAgIHByb3RvLnpvbmUgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsXG4gICAgICAgIGdldFNldFpvbmVcbiAgICApO1xuICAgIHByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLFxuICAgICAgICBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWRcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peChpbnB1dCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJblpvbmUoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgcHJvdG8kMS5sb25nRGF0ZUZvcm1hdCA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSA9IHBhc3RGdXR1cmU7XG4gICAgcHJvdG8kMS5zZXQgPSBzZXQ7XG4gICAgcHJvdG8kMS5lcmFzID0gbG9jYWxlRXJhcztcbiAgICBwcm90byQxLmVyYXNQYXJzZSA9IGxvY2FsZUVyYXNQYXJzZTtcbiAgICBwcm90byQxLmVyYXNDb252ZXJ0WWVhciA9IGxvY2FsZUVyYXNDb252ZXJ0WWVhcjtcbiAgICBwcm90byQxLmVyYXNBYmJyUmVnZXggPSBlcmFzQWJiclJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hbWVSZWdleCA9IGVyYXNOYW1lUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFycm93UmVnZXggPSBlcmFzTmFycm93UmVnZXg7XG5cbiAgICBwcm90byQxLm1vbnRocyA9IGxvY2FsZU1vbnRocztcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0ID0gbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSA9IGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggPSBtb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIHByb3RvJDEud2Vla2RheXMgPSBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluID0gbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ID0gbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgPSBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5c1JlZ2V4ID0gd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCA9IHdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggPSB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8vICgpXG4gICAgLy8gKDUpXG4gICAgLy8gKGZtdCwgNSlcbiAgICAvLyAoZm10KVxuICAgIC8vICh0cnVlKVxuICAgIC8vICh0cnVlLCA1KVxuICAgIC8vICh0cnVlLCBmbXQsIDUpXG4gICAgLy8gKHRydWUsIGZtdClcbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0KGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xuICAgIH1cblxuICAgIGdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIGVyYXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDEtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiArSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdBbm5vIERvbWluaScsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQUQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdBRCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMC0xMi0zMScsXG4gICAgICAgICAgICAgICAgdW50aWw6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0JlZm9yZSBDaHJpc3QnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0JDJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQkMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgdG9JbnQoKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZVxuICAgICk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0TG9jYWxlXG4gICAgKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBhYnMoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMsXG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMsXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGF0YSxcbiAgICAgICAgICAgIHNlY29uZHMsXG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgaG91cnMsXG4gICAgICAgICAgICB5ZWFycyxcbiAgICAgICAgICAgIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyhkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiAoZGF5cyAqIDQ4MDApIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyhtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiAobW9udGhzICogMTQ2MDk3KSAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXModW5pdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzIC8gNyArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDI0ICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDE0NDAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbiAgICBmdW5jdGlvbiB2YWx1ZU9mJDEoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpLFxuICAgICAgICBhc1NlY29uZHMgPSBtYWtlQXMoJ3MnKSxcbiAgICAgICAgYXNNaW51dGVzID0gbWFrZUFzKCdtJyksXG4gICAgICAgIGFzSG91cnMgPSBtYWtlQXMoJ2gnKSxcbiAgICAgICAgYXNEYXlzID0gbWFrZUFzKCdkJyksXG4gICAgICAgIGFzV2Vla3MgPSBtYWtlQXMoJ3cnKSxcbiAgICAgICAgYXNNb250aHMgPSBtYWtlQXMoJ00nKSxcbiAgICAgICAgYXNRdWFydGVycyA9IG1ha2VBcygnUScpLFxuICAgICAgICBhc1llYXJzID0gbWFrZUFzKCd5Jyk7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKSxcbiAgICAgICAgc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKSxcbiAgICAgICAgbWludXRlcyA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKSxcbiAgICAgICAgaG91cnMgPSBtYWtlR2V0dGVyKCdob3VycycpLFxuICAgICAgICBkYXlzID0gbWFrZUdldHRlcignZGF5cycpLFxuICAgICAgICBtb250aHMgPSBtYWtlR2V0dGVyKCdtb250aHMnKSxcbiAgICAgICAgeWVhcnMgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICAgIHRocmVzaG9sZHMgPSB7XG4gICAgICAgICAgICBzczogNDQsIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICAgICAgczogNDUsIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgICAgICBtOiA0NSwgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgICAgICBoOiAyMiwgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgICAgICBkOiAyNiwgLy8gZGF5cyB0byBtb250aC93ZWVrXG4gICAgICAgICAgICB3OiBudWxsLCAvLyB3ZWVrcyB0byBtb250aFxuICAgICAgICAgICAgTTogMTEsIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCB0aHJlc2hvbGRzLCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpLFxuICAgICAgICAgICAgc2Vjb25kcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpLFxuICAgICAgICAgICAgbWludXRlcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpLFxuICAgICAgICAgICAgaG91cnMgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKSxcbiAgICAgICAgICAgIGRheXMgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKSxcbiAgICAgICAgICAgIG1vbnRocyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpLFxuICAgICAgICAgICAgd2Vla3MgPSByb3VuZChkdXJhdGlvbi5hcygndycpKSxcbiAgICAgICAgICAgIHllYXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSksXG4gICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDwgdGhyZXNob2xkcy5zICYmIFsnc3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8PSAxICYmIFsnbSddKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDwgdGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSkgfHxcbiAgICAgICAgICAgICAgICAoaG91cnMgPD0gMSAmJiBbJ2gnXSkgfHxcbiAgICAgICAgICAgICAgICAoaG91cnMgPCB0aHJlc2hvbGRzLmggJiYgWydoaCcsIGhvdXJzXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8PSAxICYmIFsnZCddKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDwgdGhyZXNob2xkcy5kICYmIFsnZGQnLCBkYXlzXSk7XG5cbiAgICAgICAgaWYgKHRocmVzaG9sZHMudyAhPSBudWxsKSB7XG4gICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICBhIHx8XG4gICAgICAgICAgICAgICAgKHdlZWtzIDw9IDEgJiYgWyd3J10pIHx8XG4gICAgICAgICAgICAgICAgKHdlZWtzIDwgdGhyZXNob2xkcy53ICYmIFsnd3cnLCB3ZWVrc10pO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBhIHx8XG4gICAgICAgICAgICAobW9udGhzIDw9IDEgJiYgWydNJ10pIHx8XG4gICAgICAgICAgICAobW9udGhzIDwgdGhyZXNob2xkcy5NICYmIFsnTU0nLCBtb250aHNdKSB8fFxuICAgICAgICAgICAgKHllYXJzIDw9IDEgJiYgWyd5J10pIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygcm91bmRpbmdGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUoYXJnV2l0aFN1ZmZpeCwgYXJnVGhyZXNob2xkcykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aXRoU3VmZml4ID0gZmFsc2UsXG4gICAgICAgICAgICB0aCA9IHRocmVzaG9sZHMsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgYXJnVGhyZXNob2xkcyA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgICAgICBhcmdXaXRoU3VmZml4ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHdpdGhTdWZmaXggPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnVGhyZXNob2xkcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoID0gT2JqZWN0LmFzc2lnbih7fSwgdGhyZXNob2xkcywgYXJnVGhyZXNob2xkcyk7XG4gICAgICAgICAgICBpZiAoYXJnVGhyZXNob2xkcy5zICE9IG51bGwgJiYgYXJnVGhyZXNob2xkcy5zcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGguc3MgPSBhcmdUaHJlc2hvbGRzLnMgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCB0aCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKHggPiAwKSAtICh4IDwgMCkgfHwgK3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMCxcbiAgICAgICAgICAgIGRheXMgPSBhYnMkMSh0aGlzLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFicyQxKHRoaXMuX21vbnRocyksXG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgaG91cnMsXG4gICAgICAgICAgICB5ZWFycyxcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCksXG4gICAgICAgICAgICB0b3RhbFNpZ24sXG4gICAgICAgICAgICB5bVNpZ24sXG4gICAgICAgICAgICBkYXlzU2lnbixcbiAgICAgICAgICAgIGhtc1NpZ247XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcblxuICAgICAgICB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRvdGFsU2lnbiArXG4gICAgICAgICAgICAnUCcgK1xuICAgICAgICAgICAgKHllYXJzID8geW1TaWduICsgeWVhcnMgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKG1vbnRocyA/IHltU2lnbiArIG1vbnRocyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoZGF5cyA/IGRheXNTaWduICsgZGF5cyArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgfHwgbWludXRlcyB8fCBzZWNvbmRzID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyA/IGhtc1NpZ24gKyBob3VycyArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobWludXRlcyA/IGhtc1NpZ24gKyBtaW51dGVzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzZWNvbmRzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDIuaXNWYWxpZCA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyA9IGFicztcbiAgICBwcm90byQyLmFkZCA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgPSBhc01pbnV0ZXM7XG4gICAgcHJvdG8kMi5hc0hvdXJzID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyA9IGFzRGF5cztcbiAgICBwcm90byQyLmFzV2Vla3MgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzUXVhcnRlcnMgPSBhc1F1YXJ0ZXJzO1xuICAgIHByb3RvJDIuYXNZZWFycyA9IGFzWWVhcnM7XG4gICAgcHJvdG8kMi52YWx1ZU9mID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuc2Vjb25kcyA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzID0gZGF5cztcbiAgICBwcm90byQyLndlZWtzID0gd2Vla3M7XG4gICAgcHJvdG8kMi5tb250aHMgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8kMi5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsXG4gICAgICAgIHRvSVNPU3RyaW5nJDFcbiAgICApO1xuICAgIHByb3RvJDIubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyEgbW9tZW50LmpzXG5cbiAgICBob29rcy52ZXJzaW9uID0gJzIuMjkuMSc7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG4gICAgaG9va3MuZm4gPSBwcm90bztcbiAgICBob29rcy5taW4gPSBtaW47XG4gICAgaG9va3MubWF4ID0gbWF4O1xuICAgIGhvb2tzLm5vdyA9IG5vdztcbiAgICBob29rcy51dGMgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCA9IGNyZWF0ZVVuaXg7XG4gICAgaG9va3MubW9udGhzID0gbGlzdE1vbnRocztcbiAgICBob29rcy5pc0RhdGUgPSBpc0RhdGU7XG4gICAgaG9va3MubG9jYWxlID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIGhvb2tzLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb247XG4gICAgaG9va3MuaXNNb21lbnQgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcbiAgICBob29rcy5tb250aHNTaG9ydCA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgaG9va3Mubm9ybWFsaXplVW5pdHMgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCA9IGdldENhbGVuZGFyRm9ybWF0O1xuICAgIGhvb2tzLnByb3RvdHlwZSA9IHByb3RvO1xuXG4gICAgLy8gY3VycmVudGx5IEhUTUw1IGlucHV0IHR5cGUgb25seSBzdXBwb3J0cyAyNC1ob3VyIGZvcm1hdHNcbiAgICBob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgREFURTogJ1lZWVktTU0tREQnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJywgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIGdsb2JhbCwgZGVmaW5lLCBTeXN0ZW0sIFJlZmxlY3QsIFByb21pc2UgKi9cclxudmFyIF9fZXh0ZW5kcztcclxudmFyIF9fYXNzaWduO1xyXG52YXIgX19yZXN0O1xyXG52YXIgX19kZWNvcmF0ZTtcclxudmFyIF9fcGFyYW07XHJcbnZhciBfX21ldGFkYXRhO1xyXG52YXIgX19hd2FpdGVyO1xyXG52YXIgX19nZW5lcmF0b3I7XHJcbnZhciBfX2V4cG9ydFN0YXI7XHJcbnZhciBfX3ZhbHVlcztcclxudmFyIF9fcmVhZDtcclxudmFyIF9fc3ByZWFkO1xyXG52YXIgX19zcHJlYWRBcnJheXM7XHJcbnZhciBfX3NwcmVhZEFycmF5O1xyXG52YXIgX19hd2FpdDtcclxudmFyIF9fYXN5bmNHZW5lcmF0b3I7XHJcbnZhciBfX2FzeW5jRGVsZWdhdG9yO1xyXG52YXIgX19hc3luY1ZhbHVlcztcclxudmFyIF9fbWFrZVRlbXBsYXRlT2JqZWN0O1xyXG52YXIgX19pbXBvcnRTdGFyO1xyXG52YXIgX19pbXBvcnREZWZhdWx0O1xyXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldDtcclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQ7XHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkSW47XHJcbnZhciBfX2NyZWF0ZUJpbmRpbmc7XHJcbihmdW5jdGlvbiAoZmFjdG9yeSkge1xyXG4gICAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgPyB0aGlzIDoge307XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoXCJ0c2xpYlwiLCBbXCJleHBvcnRzXCJdLCBmdW5jdGlvbiAoZXhwb3J0cykgeyBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QsIGNyZWF0ZUV4cG9ydGVyKGV4cG9ydHMpKSk7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QsIGNyZWF0ZUV4cG9ydGVyKG1vZHVsZS5leHBvcnRzKSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290KSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVFeHBvcnRlcihleHBvcnRzLCBwcmV2aW91cykge1xyXG4gICAgICAgIGlmIChleHBvcnRzICE9PSByb290KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaWQsIHYpIHsgcmV0dXJuIGV4cG9ydHNbaWRdID0gcHJldmlvdXMgPyBwcmV2aW91cyhpZCwgdikgOiB2OyB9O1xyXG4gICAgfVxyXG59KVxyXG4oZnVuY3Rpb24gKGV4cG9ydGVyKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcmVzdCA9IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICAgICAgdmFyIHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcblxyXG4gICAgX19kZWNvcmF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgICAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcGFyYW0gPSBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fbWV0YWRhdGEgPSBmdW5jdGlvbiAobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2F3YWl0ZXIgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgX19nZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICAgICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2V4cG9ydFN0YXIgPSBmdW5jdGlvbihtLCBvKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICAgICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICAgICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxuICAgIH0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICAgICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgICAgICBvW2syXSA9IG1ba107XHJcbiAgICB9KTtcclxuXHJcbiAgICBfX3ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgICAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIH07XHJcblxyXG4gICAgX19yZWFkID0gZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICAgICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgICAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFyO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cclxuICAgIF9fc3ByZWFkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICAgICAgcmV0dXJuIGFyO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cclxuICAgIF9fc3ByZWFkQXJyYXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcblxyXG4gICAgX19zcHJlYWRBcnJheSA9IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXdhaXQgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICAgICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgICAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgIH1cclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY0RlbGVnYXRvciA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgdmFyIGksIHA7XHJcbiAgICAgICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNWYWx1ZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICAgICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgICAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19tYWtlVGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgICAgIHJldHVybiBjb29rZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbiAgICB9KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgICAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbiAgICB9O1xyXG5cclxuICAgIF9faW1wb3J0U3RhciA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2ltcG9ydERlZmF1bHQgPSBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICAgICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbiAgICB9O1xyXG5cclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICAgICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgICAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEluID0gZnVuY3Rpb24gKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydGVyKFwiX19leHRlbmRzXCIsIF9fZXh0ZW5kcyk7XHJcbiAgICBleHBvcnRlcihcIl9fYXNzaWduXCIsIF9fYXNzaWduKTtcclxuICAgIGV4cG9ydGVyKFwiX19yZXN0XCIsIF9fcmVzdCk7XHJcbiAgICBleHBvcnRlcihcIl9fZGVjb3JhdGVcIiwgX19kZWNvcmF0ZSk7XHJcbiAgICBleHBvcnRlcihcIl9fcGFyYW1cIiwgX19wYXJhbSk7XHJcbiAgICBleHBvcnRlcihcIl9fbWV0YWRhdGFcIiwgX19tZXRhZGF0YSk7XHJcbiAgICBleHBvcnRlcihcIl9fYXdhaXRlclwiLCBfX2F3YWl0ZXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2dlbmVyYXRvclwiLCBfX2dlbmVyYXRvcik7XHJcbiAgICBleHBvcnRlcihcIl9fZXhwb3J0U3RhclwiLCBfX2V4cG9ydFN0YXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2NyZWF0ZUJpbmRpbmdcIiwgX19jcmVhdGVCaW5kaW5nKTtcclxuICAgIGV4cG9ydGVyKFwiX192YWx1ZXNcIiwgX192YWx1ZXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3JlYWRcIiwgX19yZWFkKTtcclxuICAgIGV4cG9ydGVyKFwiX19zcHJlYWRcIiwgX19zcHJlYWQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3NwcmVhZEFycmF5c1wiLCBfX3NwcmVhZEFycmF5cyk7XHJcbiAgICBleHBvcnRlcihcIl9fc3ByZWFkQXJyYXlcIiwgX19zcHJlYWRBcnJheSk7XHJcbiAgICBleHBvcnRlcihcIl9fYXdhaXRcIiwgX19hd2FpdCk7XHJcbiAgICBleHBvcnRlcihcIl9fYXN5bmNHZW5lcmF0b3JcIiwgX19hc3luY0dlbmVyYXRvcik7XHJcbiAgICBleHBvcnRlcihcIl9fYXN5bmNEZWxlZ2F0b3JcIiwgX19hc3luY0RlbGVnYXRvcik7XHJcbiAgICBleHBvcnRlcihcIl9fYXN5bmNWYWx1ZXNcIiwgX19hc3luY1ZhbHVlcyk7XHJcbiAgICBleHBvcnRlcihcIl9fbWFrZVRlbXBsYXRlT2JqZWN0XCIsIF9fbWFrZVRlbXBsYXRlT2JqZWN0KTtcclxuICAgIGV4cG9ydGVyKFwiX19pbXBvcnRTdGFyXCIsIF9faW1wb3J0U3Rhcik7XHJcbiAgICBleHBvcnRlcihcIl9faW1wb3J0RGVmYXVsdFwiLCBfX2ltcG9ydERlZmF1bHQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0XCIsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0XCIsIF9fY2xhc3NQcml2YXRlRmllbGRTZXQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2NsYXNzUHJpdmF0ZUZpZWxkSW5cIiwgX19jbGFzc1ByaXZhdGVGaWVsZEluKTtcclxufSk7XHJcbiIsICJpbXBvcnQgeyBBcHAsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5NYW5pZmVzdCwgU2V0dGluZywgUGx1Z2luU2V0dGluZ1RhYiwgVEFic3RyYWN0RmlsZSwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7XG5cdGdldERhaWx5Tm90ZVNldHRpbmdzLFxuXHRnZXRBbGxEYWlseU5vdGVzLFxuXHRnZXREYWlseU5vdGUsXG59IGZyb20gXCJvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFJlbWluZGVyc0NvbnRyb2xsZXIgfSBmcm9tIFwiY29udHJvbGxlclwiO1xuaW1wb3J0IHsgUGx1Z2luRGF0YUlPIH0gZnJvbSBcImRhdGFcIjtcbmltcG9ydCB7IFJlbWluZGVyLCBSZW1pbmRlcnMgfSBmcm9tIFwibW9kZWwvcmVtaW5kZXJcIjtcbmltcG9ydCB7IFJlbWluZGVyU2V0dGluZ1RhYiwgU0VUVElOR1MgfSBmcm9tIFwic2V0dGluZ3NcIjtcbmltcG9ydCB7IERBVEVfVElNRV9GT1JNQVRURVIgfSBmcm9tIFwibW9kZWwvdGltZVwiO1xuaW1wb3J0IHR5cGUgeyBSZWFkT25seVJlZmVyZW5jZSB9IGZyb20gXCJtb2RlbC9yZWZcIjtcblxuY29uc3QgTUFYX1RJTUVfU0lOQ0VfQ1JFQVRJT04gPSA1MDAwOyAvLyA1IHNlY29uZHNcblxuLyogSnVzdCBzb21lIGJvaWxlcnBsYXRlIGNvZGUgZm9yIHJlY3Vyc2l2ZWx5IGdvaW5nIHRocm91Z2ggc3ViaGVhZGluZ3MgZm9yIGxhdGVyXG5mdW5jdGlvbiBjcmVhdGVSZXByZXNlbnRhdGlvbkZyb21IZWFkaW5ncyhoZWFkaW5ncykge1xuICBsZXQgaSA9IDA7XG4gIGNvbnN0IHRhZ3MgPSBbXTtcblxuICAoZnVuY3Rpb24gcmVjdXJzZShkZXB0aCkge1xuICAgIGxldCB1bmNsb3NlZExpID0gZmFsc2U7XG4gICAgd2hpbGUgKGkgPCBoZWFkaW5ncy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFtoYXNoZXMsIGRhdGFdID0gaGVhZGluZ3NbaV0uc3BsaXQoXCIjIFwiKTtcbiAgICAgIGlmIChoYXNoZXMubGVuZ3RoIDwgZGVwdGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKGhhc2hlcy5sZW5ndGggPT09IGRlcHRoKSB7XG4gICAgICAgIGlmICh1bmNsb3NlZExpKSB0YWdzLnB1c2goJzwvbGk+Jyk7XG4gICAgICAgIHVuY2xvc2VkTGkgPSB0cnVlO1xuICAgICAgICB0YWdzLnB1c2goJzxsaT4nLCBkYXRhKTtcbiAgICAgICAgaSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFncy5wdXNoKCc8dWw+Jyk7XG4gICAgICAgIHJlY3Vyc2UoZGVwdGggKyAxKTtcbiAgICAgICAgdGFncy5wdXNoKCc8L3VsPicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodW5jbG9zZWRMaSkgdGFncy5wdXNoKCc8L2xpPicpO1xuICB9KSgtMSk7XG4gIHJldHVybiB0YWdzLmpvaW4oJ1xcbicpO1xufVxuKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JzaWRpYW5NYW5hZ2VyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgcGx1Z2luRGF0YUlPOiBQbHVnaW5EYXRhSU87XG4gIHVuZG9IaXN0b3J5OiBhbnlbXTtcbiAgdW5kb0hpc3RvcnlUaW1lOiBhbnk7XG5cdHByaXZhdGUgcmVtaW5kZXJzQ29udHJvbGxlcjogUmVtaW5kZXJzQ29udHJvbGxlcjtcblx0cHJpdmF0ZSBzZXR0aW5nczogYW55O1xuICBwcml2YXRlIHJlbWluZGVyczogUmVtaW5kZXJzO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYW5pZmVzdDogUGx1Z2luTWFuaWZlc3QpIHtcbiAgICBzdXBlcihhcHAsIG1hbmlmZXN0KTtcbiAgICB0aGlzLnJlbWluZGVycyA9IG5ldyBSZW1pbmRlcnMoKCkgPT4ge1xuICAgICAgdGhpcy5wbHVnaW5EYXRhSU8uY2hhbmdlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgdGhpcy5wbHVnaW5EYXRhSU8gPSBuZXcgUGx1Z2luRGF0YUlPKHRoaXMsIHRoaXMucmVtaW5kZXJzKTtcbiAgICB0aGlzLnJlbWluZGVycy5yZW1pbmRlclRpbWUgPSBTRVRUSU5HUy5yZW1pbmRlclRpbWU7XG4gICAgREFURV9USU1FX0ZPUk1BVFRFUi5zZXRUaW1lRm9ybWF0KFNFVFRJTkdTLmRhdGVGb3JtYXQsIFNFVFRJTkdTLmRhdGVUaW1lRm9ybWF0LCBTRVRUSU5HUy5zdHJpY3REYXRlRm9ybWF0KTtcbiAgICB0aGlzLnJlbWluZGVyc0NvbnRyb2xsZXIgPSBuZXcgUmVtaW5kZXJzQ29udHJvbGxlcihcbiAgICAgIGFwcC52YXVsdCxcbiAgICAgIHRoaXMucmVtaW5kZXJzXG4gICAgKTtcbiAgfVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHRjb25zdCBERUZBVUxUX1NFVFRJTkdTID0ge1xuXHRcdFx0dGVtcGxhdGVIZWFkaW5nOiBcIm5vbmVcIixcblx0XHRcdGRlbGV0ZU9uQ29tcGxldGU6IGZhbHNlLFxuXHRcdFx0cmVtb3ZlRW1wdHlUb2RvczogZmFsc2UsXG5cdFx0fTtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihcblx0XHRcdHt9LFxuXHRcdFx0REVGQVVMVF9TRVRUSU5HUyxcblx0XHRcdGF3YWl0IHRoaXMubG9hZERhdGEoKVxuXHRcdCk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdGlzRGFpbHlOb3Rlc0VuYWJsZWQoKSB7XG5cdFx0XG5cdFx0Y29uc3QgZGFpbHlOb3Rlc1BsdWdpbiA9XG5cdFx0LyogQHRzLWlnbm9yZSAqL1xuXHRcdFx0dGhpcy5hcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJkYWlseS1ub3Rlc1wiXTtcblx0XHRjb25zdCBkYWlseU5vdGVzRW5hYmxlZCA9IGRhaWx5Tm90ZXNQbHVnaW4gJiYgZGFpbHlOb3Rlc1BsdWdpbi5lbmFibGVkO1xuXG5cdFx0Y29uc3QgcGVyaW9kaWNOb3Rlc1BsdWdpbiA9XG5cdFx0LyogQHRzLWlnbm9yZSAqL1xuXHRcdFx0dGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcblx0XHRjb25zdCBwZXJpb2RpY05vdGVzRW5hYmxlZCA9XG5cdFx0XHRwZXJpb2RpY05vdGVzUGx1Z2luICYmIHBlcmlvZGljTm90ZXNQbHVnaW4uc2V0dGluZ3M/LmRhaWx5Py5lbmFibGVkO1xuXG5cdFx0cmV0dXJuIGRhaWx5Tm90ZXNFbmFibGVkIHx8IHBlcmlvZGljTm90ZXNFbmFibGVkO1xuXHR9XG5cblx0Z2V0TGFzdERhaWx5Tm90ZSgpOlRGaWxlIHtcblx0XHRjb25zdCB7IG1vbWVudCB9ID0gd2luZG93O1xuXHRcdGNvbnN0IHsgZm9sZGVyID0gJycsIGZvcm1hdCB9ID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKTtcblxuXHRcdC8vIGdldCBhbGwgbm90ZXMgaW4gZGlyZWN0b3J5IHRoYXQgYXJlbid0IG51bGxcblx0XHRjb25zdCBkYWlseU5vdGVGaWxlcyA9IHRoaXMuYXBwLnZhdWx0XG5cdFx0XHQuZ2V0QWxsTG9hZGVkRmlsZXMoKVxuXHRcdFx0LmZpbHRlcigoZmlsZSkgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSlcblx0XHRcdC8qIEB0cy1pZ25vcmUgKi9cblx0XHRcdC5maWx0ZXIoKGZpbGUpID0+IGZpbGUuYmFzZW5hbWUgIT0gbnVsbCkgYXMgVEZpbGVbXTtcblxuXHRcdC8vIHJlbW92ZSBub3RlcyB0aGF0IGFyZSBmcm9tIHRoZSBmdXR1cmVcblx0XHRjb25zdCB0b2RheU1vbWVudCA9IG1vbWVudCgpO1xuXHRcdGxldCBkYWlseU5vdGVzVG9kYXlPckVhcmxpZXI6IFRGaWxlW10gPSBbXTtcblx0XHRkYWlseU5vdGVGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG1vbWVudChmaWxlLmJhc2VuYW1lLCBmb3JtYXQpLmlzU2FtZU9yQmVmb3JlKHRvZGF5TW9tZW50LCBcImRheVwiKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRhaWx5Tm90ZXNUb2RheU9yRWFybGllci5wdXNoKGZpbGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gc29ydCBieSBkYXRlXG5cdFx0Y29uc3Qgc29ydGVkID0gZGFpbHlOb3Rlc1RvZGF5T3JFYXJsaWVyLnNvcnQoXG5cdFx0XHQoYSwgYikgPT5cblx0XHRcdFx0bW9tZW50KGIuYmFzZW5hbWUsIGZvcm1hdCkudmFsdWVPZigpIC1cblx0XHRcdFx0bW9tZW50KGEuYmFzZW5hbWUsIGZvcm1hdCkudmFsdWVPZigpXG5cdFx0KTtcblx0XHRyZXR1cm4gc29ydGVkWzFdO1xuXHR9XG5cblx0YXN5bmMgZ2V0QWxsVW5maW5pc2hlZFRvZG9zKGZpbGU6IFRGaWxlKSB7XG5cdFx0Y29uc3QgY29udGVudHMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdGNvbnN0IHVuZmluaXNoZWRUb2Rvc1JlZ2V4ID0gL1xcdCotIFxcWyBcXF0uKi9nO1xuXHRcdGNvbnN0IHVuZmluaXNoZWRUb2RvcyA9IEFycmF5LmZyb20oXG5cdFx0XHRjb250ZW50cy5tYXRjaEFsbCh1bmZpbmlzaGVkVG9kb3NSZWdleClcblx0XHQpLm1hcCgoW3RvZG9dKSA9PiB0b2RvKTtcblxuXHRcdHJldHVybiB1bmZpbmlzaGVkVG9kb3M7XG5cdH1cblxuXHRhc3luYyBzb3J0SGVhZGVyc0ludG9IZWlyYXJjaHkoZmlsZTogVEZpbGUpIHtcblx0XHQvLy9jb25zb2xlLmxvZygndGVzdGluZycpXG5cdFx0Y29uc3QgdGVtcGxhdGVDb250ZW50cyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cdFx0Y29uc3QgYWxsSGVhZGluZ3MgPSBBcnJheS5mcm9tKFxuXHRcdFx0dGVtcGxhdGVDb250ZW50cy5tYXRjaEFsbCgvI3sxLH0gLiovZylcblx0XHQpLm1hcCgoW2hlYWRpbmddKSA9PiBoZWFkaW5nKTtcblxuXHRcdGlmIChhbGxIZWFkaW5ncy5sZW5ndGggPiAwKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhjcmVhdGVSZXByZXNlbnRhdGlvbkZyb21IZWFkaW5ncyhhbGxIZWFkaW5ncykpO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIHNheUhlbGxvKCkge1xuICAgIGF3YWl0IHRoaXMucmVtaW5kZXJzQ29udHJvbGxlci5yZWxvYWRBbGxGaWxlcygpXG5cdFx0dGhpcy5wbHVnaW5EYXRhSU8uc2Nhbm5lZC52YWx1ZSA9IHRydWU7XG5cdFx0dGhpcy5wbHVnaW5EYXRhSU8uc2F2ZSgpO1xuICAgIGNvbnN0IGV4cGlyZWQgPSB0aGlzLnJlbWluZGVycy5nZXRFeHBpcmVkUmVtaW5kZXJzKFxuICAgICAgU0VUVElOR1MucmVtaW5kZXJUaW1lLnZhbHVlXG4gICAgKTtcblx0XHRjb25zb2xlLmxvZygnZXhwaXJlZDonKVxuXHRcdGNvbnNvbGUubG9nKGV4cGlyZWQpXG4gIH1cblxuXHRhc3luYyByb2xsb3ZlcihmaWxlOlRGaWxlfHVuZGVmaW5lZCkge1xuXHRcdC8qKiogRmlyc3Qgd2UgY2hlY2sgaWYgdGhlIGZpbGUgY3JlYXRlZCBpcyBhY3R1YWxseSBhIHZhbGlkIGRhaWx5IG5vdGUgKioqL1xuXHRcdGNvbnN0IHsgZm9sZGVyID0gJycsIGZvcm1hdCB9ID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKTtcblx0XHRsZXQgaWdub3JlQ3JlYXRpb25UaW1lID0gZmFsc2U7XG5cblx0XHQvLyBSb2xsb3ZlciBjYW4gYmUgY2FsbGVkLCBidXQgd2UgbmVlZCB0byBnZXQgdGhlIGRhaWx5IGZpbGVcblx0XHRpZiAoZmlsZSA9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IGFsbERhaWx5Tm90ZXMgPSBnZXRBbGxEYWlseU5vdGVzKCk7XG5cdFx0XHRmaWxlID0gZ2V0RGFpbHlOb3RlKHdpbmRvdy5tb21lbnQoKSwgYWxsRGFpbHlOb3Rlcyk7XG5cdFx0XHRpZ25vcmVDcmVhdGlvblRpbWUgPSB0cnVlO1xuXHRcdH1cblx0XHRpZiAoIWZpbGUpIHJldHVybjtcblxuXHRcdC8vIGlzIGEgZGFpbHkgbm90ZVxuXHRcdGlmICghZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSkgcmV0dXJuO1xuXG5cdFx0Ly8gaXMgdG9kYXkncyBkYWlseSBub3RlXG5cdFx0Y29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuXHRcdGNvbnN0IHRvZGF5Rm9ybWF0dGVkID0gd2luZG93Lm1vbWVudCh0b2RheSkuZm9ybWF0KGZvcm1hdCk7XG5cdFx0aWYgKHRvZGF5Rm9ybWF0dGVkICE9PSBmaWxlLmJhc2VuYW1lKSByZXR1cm47XG5cblx0XHQvLyB3YXMganVzdCBjcmVhdGVkXG5cdFx0aWYgKFxuXHRcdFx0dG9kYXkuZ2V0VGltZSgpIC0gZmlsZS5zdGF0LmN0aW1lID4gTUFYX1RJTUVfU0lOQ0VfQ1JFQVRJT04gJiZcblx0XHRcdCFpZ25vcmVDcmVhdGlvblRpbWVcblx0XHQpXG5cdFx0XHRyZXR1cm47XG5cblx0XHQvKioqIE5leHQsIGlmIGl0IGlzIGEgdmFsaWQgZGFpbHkgbm90ZSwgYnV0IHdlIGRvbid0IGhhdmUgZGFpbHkgbm90ZXMgZW5hYmxlZCwgd2UgbXVzdCBhbGVydCB0aGUgdXNlciAqKiovXG5cdFx0aWYgKCF0aGlzLmlzRGFpbHlOb3Rlc0VuYWJsZWQoKSkge1xuXHRcdFx0bmV3IE5vdGljZShcblx0XHRcdFx0XCJPYnNpZGlhbk1hbmFnZXJQbHVnaW4gdW5hYmxlIHRvIHJvbGxvdmVyIHVuZmluaXNoZWQgdG9kb3M6IFBsZWFzZSBlbmFibGUgRGFpbHkgTm90ZXMsIG9yIFBlcmlvZGljIE5vdGVzICh3aXRoIGRhaWx5IG5vdGVzIGVuYWJsZWQpLlwiLFxuXHRcdFx0XHQxMDAwMFxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgeyB0ZW1wbGF0ZUhlYWRpbmcsIGRlbGV0ZU9uQ29tcGxldGUsIHJlbW92ZUVtcHR5VG9kb3MgfSA9XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3M7XG5cblx0XHRcdC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgZGFpbHkgbm90ZSBmcm9tIHllc3RlcmRheVxuXHRcdFx0Y29uc3QgbGFzdERhaWx5Tm90ZSA9IHRoaXMuZ2V0TGFzdERhaWx5Tm90ZSgpO1xuXHRcdFx0aWYgKGxhc3REYWlseU5vdGUgPT0gbnVsbCkgcmV0dXJuO1xuXG5cdFx0XHQvLyBUT0RPOiBSb2xsb3ZlciB0byBzdWJoZWFkaW5ncyAob3B0aW9uYWwpXG5cdFx0XHQvL3RoaXMuc29ydEhlYWRlcnNJbnRvSGVpcmFyY2h5KGxhc3REYWlseU5vdGUpXG5cblx0XHRcdC8vIGdldCB1bmZpbmlzaGVkIHRvZG9zIGZyb20geWVzdGVyZGF5LCBpZiBleGlzdFxuXHRcdFx0bGV0IHRvZG9zX3llc3RlcmRheSA9IGF3YWl0IHRoaXMuZ2V0QWxsVW5maW5pc2hlZFRvZG9zKFxuXHRcdFx0XHRsYXN0RGFpbHlOb3RlXG5cdFx0XHQpO1xuXHRcdFx0aWYgKHRvZG9zX3llc3RlcmRheS5sZW5ndGggPT0gMCkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcblx0XHRcdFx0XHRgcm9sbG92ZXItZGFpbHktdG9kb3M6IDAgdG9kb3MgZm91bmQgaW4gJHtsYXN0RGFpbHlOb3RlLmJhc2VuYW1lfS5tZGBcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBzZXR1cCB1bmRvIGhpc3Rvcnlcblx0XHRcdGxldCB1bmRvSGlzdG9yeUluc3RhbmNlID0ge1xuXHRcdFx0XHRwcmV2aW91c0RheToge1xuXHRcdFx0XHRcdGZpbGU6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRvbGRDb250ZW50OiBcIlwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0b2RheToge1xuXHRcdFx0XHRcdGZpbGU6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRvbGRDb250ZW50OiBcIlwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gUG90ZW50aWFsbHkgZmlsdGVyIHRvZG9zIGZyb20geWVzdGVyZGF5IGZvciB0b2RheVxuXHRcdFx0bGV0IHRvZG9zQWRkZWQgPSAwO1xuXHRcdFx0bGV0IGVtcHRpZXNUb05vdEFkZFRvVG9tb3Jyb3cgPSAwO1xuXHRcdFx0bGV0IHRvZG9zX3RvZGF5ID0gIXJlbW92ZUVtcHR5VG9kb3MgPyB0b2Rvc195ZXN0ZXJkYXkgOiBbXTtcblx0XHRcdGlmIChyZW1vdmVFbXB0eVRvZG9zKSB7XG5cdFx0XHRcdHRvZG9zX3llc3RlcmRheS5mb3JFYWNoKChsaW5lLCBpKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgdHJpbW1lZExpbmUgPSAobGluZSB8fCBcIlwiKS50cmltKCk7XG5cdFx0XHRcdFx0aWYgKHRyaW1tZWRMaW5lICE9IFwiLSBbIF1cIiAmJiB0cmltbWVkTGluZSAhPSBcIi0gWyAgXVwiKSB7XG5cdFx0XHRcdFx0XHR0b2Rvc190b2RheS5wdXNoKGxpbmUpO1xuXHRcdFx0XHRcdFx0dG9kb3NBZGRlZCsrO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbXB0aWVzVG9Ob3RBZGRUb1RvbW9ycm93Kys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRvZG9zQWRkZWQgPSB0b2Rvc195ZXN0ZXJkYXkubGVuZ3RoO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZXQgdG9kYXkncyBjb250ZW50IGFuZCBtb2RpZnkgaXRcblx0XHRcdGxldCB0ZW1wbGF0ZUhlYWRpbmdOb3RGb3VuZE1lc3NhZ2UgPSBcIlwiO1xuXHRcdFx0Y29uc3QgdGVtcGxhdGVIZWFkaW5nU2VsZWN0ZWQgPSB0ZW1wbGF0ZUhlYWRpbmcgIT09IFwibm9uZVwiO1xuXG5cdFx0XHRpZiAodG9kb3NfdG9kYXkubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRsZXQgZGFpbHlOb3RlQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cdFx0XHRcdHVuZG9IaXN0b3J5SW5zdGFuY2UudG9kYXkgPSB7XG5cdFx0XHRcdFx0LyogQHRzLWlnbm9yZSAqL1xuXHRcdFx0XHRcdGZpbGU6IGZpbGUsXG5cdFx0XHRcdFx0b2xkQ29udGVudDogYCR7ZGFpbHlOb3RlQ29udGVudH1gLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRjb25zdCB0b2Rvc190b2RheVN0cmluZyA9IGBcXG4ke3RvZG9zX3RvZGF5LmpvaW4oXCJcXG5cIil9YDtcblxuXHRcdFx0XHQvLyBJZiB0ZW1wbGF0ZSBoZWFkaW5nIGlzIHNlbGVjdGVkLCB0cnkgdG8gcm9sbG92ZXIgdG8gdGVtcGxhdGUgaGVhZGluZ1xuXHRcdFx0XHRpZiAodGVtcGxhdGVIZWFkaW5nU2VsZWN0ZWQpIHtcblx0XHRcdFx0XHRjb25zdCBjb250ZW50QWRkZWRUb0hlYWRpbmcgPSBkYWlseU5vdGVDb250ZW50LnJlcGxhY2UoXG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZUhlYWRpbmcsXG5cdFx0XHRcdFx0XHRgJHt0ZW1wbGF0ZUhlYWRpbmd9JHt0b2Rvc190b2RheVN0cmluZ31gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpZiAoY29udGVudEFkZGVkVG9IZWFkaW5nID09IGRhaWx5Tm90ZUNvbnRlbnQpIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlSGVhZGluZ05vdEZvdW5kTWVzc2FnZSA9IGBSb2xsb3ZlciBjb3VsZG4ndCBmaW5kICcke3RlbXBsYXRlSGVhZGluZ30nIGluIHRvZGF5J3MgZGFpbHkgbm90LiBSb2xsaW5nIHRvZG9zIHRvIGVuZCBvZiBmaWxlLmA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRhaWx5Tm90ZUNvbnRlbnQgPSBjb250ZW50QWRkZWRUb0hlYWRpbmc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUm9sbG92ZXIgdG8gYm90dG9tIG9mIGZpbGUgaWYgbm8gaGVhZGluZyBmb3VuZCBpbiBmaWxlLCBvciBubyBoZWFkaW5nIHNlbGVjdGVkXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhdGVtcGxhdGVIZWFkaW5nU2VsZWN0ZWQgfHxcblx0XHRcdFx0XHR0ZW1wbGF0ZUhlYWRpbmdOb3RGb3VuZE1lc3NhZ2UubGVuZ3RoID4gMFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRkYWlseU5vdGVDb250ZW50ICs9IHRvZG9zX3RvZGF5U3RyaW5nO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGRhaWx5Tm90ZUNvbnRlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpZiBkZWxldGVPbkNvbXBsZXRlLCBnZXQgeWVzdGVyZGF5J3MgY29udGVudCBhbmQgbW9kaWZ5IGl0XG5cdFx0XHRpZiAoZGVsZXRlT25Db21wbGV0ZSkge1xuXHRcdFx0XHRsZXQgbGFzdERhaWx5Tm90ZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKFxuXHRcdFx0XHRcdGxhc3REYWlseU5vdGVcblx0XHRcdFx0KTtcblx0XHRcdFx0dW5kb0hpc3RvcnlJbnN0YW5jZS5wcmV2aW91c0RheSA9IHtcblx0XHRcdFx0XHQvKiBAdHMtaWdub3JlICovXG5cdFx0XHRcdFx0ZmlsZTogbGFzdERhaWx5Tm90ZSxcblx0XHRcdFx0XHRvbGRDb250ZW50OiBgJHtsYXN0RGFpbHlOb3RlQ29udGVudH1gLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRsZXQgbGluZXMgPSBsYXN0RGFpbHlOb3RlQ29udGVudC5zcGxpdChcIlxcblwiKTtcblxuXHRcdFx0XHRmb3IgKGxldCBpID0gbGluZXMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRcdGlmICh0b2Rvc195ZXN0ZXJkYXkuaW5jbHVkZXMobGluZXNbaV0pKSB7XG5cdFx0XHRcdFx0XHRsaW5lcy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgbW9kaWZpZWRDb250ZW50ID0gbGluZXMuam9pbihcIlxcblwiKTtcblx0XHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGxhc3REYWlseU5vdGUsIG1vZGlmaWVkQ29udGVudCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExldCB1c2VyIGtub3cgcm9sbG92ZXIgaGFzIGJlZW4gc3VjY2Vzc2Z1bCB3aXRoIFggdG9kb3Ncblx0XHRcdGNvbnN0IHRvZG9zQWRkZWRTdHJpbmcgPVxuXHRcdFx0XHR0b2Rvc0FkZGVkID09IDBcblx0XHRcdFx0XHQ/IFwiXCJcblx0XHRcdFx0XHQ6IGAtICR7dG9kb3NBZGRlZH0gdG9kbyR7XG5cdFx0XHRcdFx0XHRcdHRvZG9zQWRkZWQgPiAxID8gXCJzXCIgOiBcIlwiXG5cdFx0XHRcdFx0ICB9IHJvbGxlZCBvdmVyLmA7XG5cdFx0XHRjb25zdCBlbXB0aWVzVG9Ob3RBZGRUb1RvbW9ycm93U3RyaW5nID1cblx0XHRcdFx0ZW1wdGllc1RvTm90QWRkVG9Ub21vcnJvdyA9PSAwXG5cdFx0XHRcdFx0PyBcIlwiXG5cdFx0XHRcdFx0OiBkZWxldGVPbkNvbXBsZXRlXG5cdFx0XHRcdFx0PyBgLSAke2VtcHRpZXNUb05vdEFkZFRvVG9tb3Jyb3d9IGVtcHR5IHRvZG8ke1xuXHRcdFx0XHRcdFx0XHRlbXB0aWVzVG9Ob3RBZGRUb1RvbW9ycm93ID4gMSA/IFwic1wiIDogXCJcIlxuXHRcdFx0XHRcdCAgfSByZW1vdmVkLmBcblx0XHRcdFx0XHQ6IFwiXCI7XG5cdFx0XHRjb25zdCBwYXJ0MSA9XG5cdFx0XHRcdHRlbXBsYXRlSGVhZGluZ05vdEZvdW5kTWVzc2FnZS5sZW5ndGggPiAwXG5cdFx0XHRcdFx0PyBgJHt0ZW1wbGF0ZUhlYWRpbmdOb3RGb3VuZE1lc3NhZ2V9YFxuXHRcdFx0XHRcdDogXCJcIjtcblx0XHRcdGNvbnN0IHBhcnQyID0gYCR7dG9kb3NBZGRlZFN0cmluZ30ke1xuXHRcdFx0XHR0b2Rvc0FkZGVkU3RyaW5nLmxlbmd0aCA+IDAgPyBcIiBcIiA6IFwiXCJcblx0XHRcdH1gO1xuXHRcdFx0Y29uc3QgcGFydDMgPSBgJHtlbXB0aWVzVG9Ob3RBZGRUb1RvbW9ycm93U3RyaW5nfSR7XG5cdFx0XHRcdGVtcHRpZXNUb05vdEFkZFRvVG9tb3Jyb3dTdHJpbmcubGVuZ3RoID4gMCA/IFwiIFwiIDogXCJcIlxuXHRcdFx0fWA7XG5cblx0XHRcdGxldCBhbGxQYXJ0cyA9IFtwYXJ0MSwgcGFydDIsIHBhcnQzXTtcblx0XHRcdGxldCBub25CbGFua0xpbmVzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFx0YWxsUGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuXHRcdFx0XHRpZiAocGFydC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0bm9uQmxhbmtMaW5lcy5wdXNoKHBhcnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgbWVzc2FnZSA9IG5vbkJsYW5rTGluZXMuam9pbihcIlxcblwiKTtcblx0XHRcdGlmIChtZXNzYWdlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0bmV3IE5vdGljZShtZXNzYWdlLCA0MDAwICsgbWVzc2FnZS5sZW5ndGggKiAzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMudW5kb0hpc3RvcnlUaW1lID0gbmV3IERhdGUoKTtcblx0XHRcdHRoaXMudW5kb0hpc3RvcnkgPSBbdW5kb0hpc3RvcnlJbnN0YW5jZV07XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0dGhpcy51bmRvSGlzdG9yeSA9IFtdO1xuXHRcdHRoaXMudW5kb0hpc3RvcnlUaW1lID0gbmV3IERhdGUoKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcblx0XHRcdHRoaXMuYXBwLnZhdWx0Lm9uKFwiY3JlYXRlXCIsIGFzeW5jIChmaWxlKSA9PiB7XG5cdFx0XHRcdC8qIEB0cy1pZ25vcmUgKi9cblx0XHRcdFx0dGhpcy5yb2xsb3ZlcihmaWxlKTtcblx0XHRcdH0pXG5cdFx0KTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogXCJvYnNpZGlhbi1tYW5hZ2VyLXNheUhlbGxvXCIsXG5cdFx0XHRuYW1lOiBcIlNheSBIZWxsb1wiLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5zYXlIZWxsbygpXG5cdFx0XHRcdC8vIFRPRE8gXHU4QkZCXHU1M0Q2XHU5MTREXHU3RjZFXHVGRjBDXHU5NjMyXHU2QjYyXHU2Q0M0XHU5NzMyXHU1QkM2XHU3ODAxXG5cdFx0XHRcdGF4aW9zXG5cdFx0XHRcdFx0LnBvc3QoXG5cdFx0XHRcdFx0XHRcImh0dHBzOi8vbnRmeS5paGF2ZS5jb29sL3Rlc3RcIixcblx0XHRcdFx0XHRcdFwiTG9vayBtYSwgd2l0aCBhdXRoXCIsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHRcdFx0XHRBdXRob3JpemF0aW9uOiBcIkJhc2ljIHh4eFwiLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdClcblx0XHRcdFx0XHQudGhlbigocmVzKSA9PiBjb25zb2xlLmxvZyhyZXMpKTtcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwib2JzaWRpYW4tbWFuYWdlci1yb2xsb3ZlclwiLFxuXHRcdFx0bmFtZTogXCJSb2xsb3ZlciBUb2RvcyBOb3dcIixcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB0aGlzLnJvbGxvdmVyKHVuZGVmaW5lZCksXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwib2JzaWRpYW4tbWFuYWdlci11bmRvXCIsXG5cdFx0XHRuYW1lOiBcIlVuZG8gbGFzdCByb2xsb3ZlclwiLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nKSA9PiB7XG5cdFx0XHRcdC8vIG5vIGhpc3RvcnksIGRvbid0IGFsbG93IHVuZG9cblx0XHRcdFx0aWYgKHRoaXMudW5kb0hpc3RvcnkubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGNvbnN0IG5vdyA9IHdpbmRvdy5tb21lbnQoKTtcblx0XHRcdFx0XHRjb25zdCBsYXN0VXNlID0gd2luZG93Lm1vbWVudCh0aGlzLnVuZG9IaXN0b3J5VGltZSk7XG5cdFx0XHRcdFx0Y29uc3QgZGlmZiA9IG5vdy5kaWZmKGxhc3RVc2UsIFwic2Vjb25kc1wiKTtcblx0XHRcdFx0XHQvLyAyKyBtaW5zIHNpbmNlIHVzZTogZG9uJ3QgYWxsb3cgdW5kb1xuXHRcdFx0XHRcdGlmIChkaWZmID4gMiAqIDYwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGlmICghY2hlY2tpbmcpIHtcblx0XHRcdFx0XHQvLyBcdG5ldyBVbmRvTW9kYWwodGhpcykub3BlbigpO1xuXHRcdFx0XHRcdC8vIH1cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSAnW29iamVjdCBGb3JtRGF0YV0nO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHxcbiAgICB0b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gcGF0dGVybiB8fFxuICAgIChpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSBwYXR0ZXJuKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tfLVxcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBpZiAocmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlclxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsICJpbXBvcnQgRm9ybURhdGEgZnJvbSAnZm9ybS1kYXRhJztcbmV4cG9ydCBkZWZhdWx0IEZvcm1EYXRhO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgZW52Rm9ybURhdGEgZnJvbSAnLi4vZW52L2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50KHRoaW5nKSB7XG4gIHJldHVybiB0aGluZyAmJiB1dGlscy5pc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChlbnZGb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiBpc1NwZWNDb21wbGlhbnQoZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKHV0aWxzLmlzRmlsZUxpc3QodmFsdWUpIHx8IHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgY29uc3QgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKX5dfCUyMHwlMDAvZywgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gY2hhck1hcFttYXRjaF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGFyYW1zIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IHBhcmFtcyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGJlIGNvbnZlcnRlZCB0byBhIEZvcm1EYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIEF4aW9zIGNvbnN0cnVjdG9yLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgdGhpcy5fcGFpcnMgPSBbXTtcblxuICBwYXJhbXMgJiYgdG9Gb3JtRGF0YShwYXJhbXMsIHRoaXMsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc1VSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fcGFpcnMucHVzaChbbmFtZSwgdmFsdWVdKTtcbn07XG5cbnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kZXIpIHtcbiAgY29uc3QgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSk7XG4gIH0gOiBlbmNvZGU7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1EYXRhO1xuIiwgImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBpc1N0YW5kYXJkQnJvd3NlckVudiA9ICgoKSA9PiB7XG4gIGxldCBwcm9kdWN0O1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIChwcm9kdWN0ID0gbmF2aWdhdG9yLnByb2R1Y3QpID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgcHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICBwcm9kdWN0ID09PSAnTlMnKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIHByb3RvY29sczogWydodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnYmxvYicsICd1cmwnLCAnZGF0YSddXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgY29uc3QgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4vLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcbmNvbnN0ICRkZWZhdWx0cyA9IFN5bWJvbCgnZGVmYXVsdHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gQXhpb3NIZWFkZXJzKGhlYWRlcnMsIGRlZmF1bHRzKSB7XG4gIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIHRoaXNbJGRlZmF1bHRzXSA9IGRlZmF1bHRzIHx8IG51bGw7XG59XG5cbk9iamVjdC5hc3NpZ24oQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwge1xuICBzZXQ6IGZ1bmN0aW9uKGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSBmaW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5ICYmIF9yZXdyaXRlICE9PSB0cnVlICYmIChzZWxmW2tleV0gPT09IGZhbHNlIHx8IF9yZXdyaXRlID09PSBmYWxzZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSkge1xuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXIsIChfdmFsdWUsIF9oZWFkZXIpID0+IHtcbiAgICAgICAgc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgdmFsdWVPclJld3JpdGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBnZXQ6IGZ1bmN0aW9uKGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoIWhlYWRlcikgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IGtleSA9IGZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgfVxuICB9LFxuXG4gIGhhczogZnVuY3Rpb24oaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSBmaW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGRlbGV0ZTogZnVuY3Rpb24oaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSBmaW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9LFxuXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcykuZm9yRWFjaCh0aGlzLmRlbGV0ZS5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBub3JtYWxpemU6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgdG9KU09OOiBmdW5jdGlvbihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaChPYmplY3QuYXNzaWduKHt9LCB0aGlzWyRkZWZhdWx0c10gfHwgbnVsbCwgdGhpcyksXG4gICAgICAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgb2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWU7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cbn0pO1xuXG5PYmplY3QuYXNzaWduKEF4aW9zSGVhZGVycywge1xuICBmcm9tOiBmdW5jdGlvbih0aGluZykge1xuICAgIGlmICh1dGlscy5pc1N0cmluZyh0aGluZykpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyhwYXJzZUhlYWRlcnModGhpbmcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9LFxuXG4gIGFjY2Vzc29yOiBmdW5jdGlvbihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pO1xuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50J10pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUpO1xudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuICBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSAnLi8uLi9oZWxwZXJzL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4vLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuLi9jb3JlL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tICcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSAnLi4vaGVscGVycy9zcGVlZG9tZXRlci5qcyc7XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtKSB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkXG4gICAgfTtcblxuICAgIGRhdGFbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ10gPSB0cnVlO1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgY29uc3QgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkgJiYgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAocGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSlcbiAgICAgICAgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldChjb25maWcueHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MsIHRydWUpKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woZnVsbFBhdGgpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIHBsYXRmb3JtLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsICJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5cbmNvbnN0IGFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKG5hbWVPckFkYXB0ZXIpID0+IHtcbiAgICBpZih1dGlscy5pc1N0cmluZyhuYW1lT3JBZGFwdGVyKSl7XG4gICAgICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnNbbmFtZU9yQWRhcHRlcl07XG5cbiAgICAgIGlmICghbmFtZU9yQWRhcHRlcikge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICB1dGlscy5oYXNPd25Qcm9wKG5hbWVPckFkYXB0ZXIpID9cbiAgICAgICAgICAgIGBBZGFwdGVyICcke25hbWVPckFkYXB0ZXJ9JyBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZGAgOlxuICAgICAgICAgICAgYENhbiBub3QgcmVzb2x2ZSBhZGFwdGVyICcke25hbWVPckFkYXB0ZXJ9J2BcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFkYXB0ZXJcbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24obmFtZU9yQWRhcHRlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FkYXB0ZXIgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZU9yQWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnNcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuLi9hZGFwdGVycy9pbmRleC5qcyc7XG5cbmNvbnN0IERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbi8qKlxuICogSWYgdGhlIGJyb3dzZXIgaGFzIGFuIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCwgdXNlIHRoZSBYSFIgYWRhcHRlciwgb3RoZXJ3aXNlIHVzZSB0aGUgSFRUUFxuICogYWRhcHRlclxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIGxldCBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcigneGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHV0aWxzLmtpbmRPZihwcm9jZXNzKSA9PT0gJ3Byb2Nlc3MnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKCdodHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIGlmICghaGFzSlNPTkNvbnRlbnRUeXBlKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZm5zLCByZXNwb25zZSkge1xuICBjb25zdCBjb25maWcgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICBjb25zdCBjb250ZXh0ID0gcmVzcG9uc2UgfHwgY29uZmlnO1xuICBjb25zdCBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgY29uc3QgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYmVmb3JlUmVkaXJlY3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsICJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS4xLjNcIjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXJ9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBjb25zdCBkZWZhdWx0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgY29uZmlnLmhlYWRlcnMuY29tbW9uLFxuICAgICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgZGVmYXVsdEhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IG5ldyBBeGlvc0hlYWRlcnMoY29uZmlnLmhlYWRlcnMsIGRlZmF1bHRIZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiB7XG4gIHJldHVybiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBheGlvc1xuIiwgImltcG9ydCBheGlvcyBmcm9tICcuL2xpYi9heGlvcy5qcyc7XG5cbi8vIEtlZXAgdG9wLWxldmVsIGV4cG9ydCBzYW1lIHdpdGggc3RhdGljIHByb3BlcnRpZXNcbi8vIHNvIHRoYXQgaXQgY2FuIGtlZXAgc2FtZSB3aXRoIGVzIG1vZHVsZSBvciBjanNcbmNvbnN0IHtcbiAgQXhpb3MsXG4gIEF4aW9zRXJyb3IsXG4gIENhbmNlbGVkRXJyb3IsXG4gIGlzQ2FuY2VsLFxuICBDYW5jZWxUb2tlbixcbiAgVkVSU0lPTixcbiAgYWxsLFxuICBDYW5jZWwsXG4gIGlzQXhpb3NFcnJvcixcbiAgc3ByZWFkLFxuICB0b0Zvcm1EYXRhXG59ID0gYXhpb3M7XG5cbmV4cG9ydCBkZWZhdWx0IGF4aW9zO1xuZXhwb3J0IHtcbiAgQXhpb3MsXG4gIEF4aW9zRXJyb3IsXG4gIENhbmNlbGVkRXJyb3IsXG4gIGlzQ2FuY2VsLFxuICBDYW5jZWxUb2tlbixcbiAgVkVSU0lPTixcbiAgYWxsLFxuICBDYW5jZWwsXG4gIGlzQXhpb3NFcnJvcixcbiAgc3ByZWFkLFxuICB0b0Zvcm1EYXRhXG59XG4iLCAiaW1wb3J0IHtcbiAgTWFya2Rvd25WaWV3LFxuICBUQWJzdHJhY3RGaWxlLFxuICBURmlsZSxcbiAgVmF1bHQsXG4gIFdvcmtzcGFjZUxlYWYsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbXBvcnQgeyBDb250ZW50IH0gZnJvbSBcIm1vZGVsL2NvbnRlbnRcIjtcbmltcG9ydCB0eXBlIHsgUmVtaW5kZXJzLCBSZW1pbmRlciB9IGZyb20gXCJtb2RlbC9yZW1pbmRlclwiO1xuXG5cbmV4cG9ydCBjbGFzcyBSZW1pbmRlcnNDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZhdWx0OiBWYXVsdCwgcHJpdmF0ZSByZW1pbmRlcnM6IFJlbWluZGVycykgeyB9XG5cbiAgYXN5bmMgcmVsb2FkQWxsRmlsZXMoKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIlJlbG9hZCBhbGwgZmlsZXMgYW5kIGNvbGxlY3QgcmVtaW5kZXJzXCIpO1xuICAgIHRoaXMucmVtaW5kZXJzLmNsZWFyKCk7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHRoaXMudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlbG9hZEZpbGUoZmlsZSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbG9hZEZpbGUoZmlsZTogVEFic3RyYWN0RmlsZSwgcmVsb2FkVUk6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICBcIlJlbG9hZCBmaWxlIGFuZCBjb2xsZWN0IHJlbWluZGVyczogZmlsZT0lcywgZm9yY2VSZWxvYWRVST0lc1wiLFxuICAgICAgZmlsZS5wYXRoLFxuICAgICAgcmVsb2FkVUlcbiAgICApO1xuICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJDYW5ub3QgcmVhZCBmaWxlIG90aGVyIHRoYW4gVEZpbGU6IGZpbGU9JW9cIiwgZmlsZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghdGhpcy5pc01hcmtkb3duRmlsZShmaWxlKSkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIk5vdCBhIG1hcmtkb3duIGZpbGU6IGZpbGU9JW9cIiwgZmlsZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgQ29udGVudChmaWxlLnBhdGgsIGF3YWl0IHRoaXMudmF1bHQuY2FjaGVkUmVhZChmaWxlKSk7XG4gICAgY29uc3QgcmVtaW5kZXJzID0gY29udGVudC5nZXRSZW1pbmRlcnMoKTtcbiAgICBpZiAocmVtaW5kZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICghdGhpcy5yZW1pbmRlcnMucmVwbGFjZUZpbGUoZmlsZS5wYXRoLCByZW1pbmRlcnMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLnJlbWluZGVycy5yZW1vdmVGaWxlKGZpbGUucGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgaXNNYXJrZG93bkZpbGUoZmlsZTogVEZpbGUpIHtcbiAgICByZXR1cm4gZmlsZS5leHRlbnNpb24udG9Mb3dlckNhc2UoKSA9PT0gXCJtZFwiO1xuICB9XG59XG4iLCAiLyoqXG4gKiBSZXByZXNlbnRzIFRPRE8gaXRlbXMgaW4gTWFya2Rvd24uXG4gKiBcbiAqIFRoaXMgY2xhc3Mgc2hvdWxkbid0IGJyZWFrIG9yaWdpbmFsIGxpbmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb2RvIHtcbiAgICAvLyBlLmc6ICcgIC0gW3hdIGhlbGxvJ1xuICAgIC8vIHByZWZpeDogJyAgLSBbICdcbiAgICAvLyBjaGVjazogJ3gnXG4gICAgLy8gc3VmZml4OiAnXSAnXG4gICAgLy8gYm9keTogaGVsbG9cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSByZWdleHAgPSAvXig/PHByZWZpeD4oKD4gPykqKT9cXHMqW1xcLVxcKl0gXFxbKSg/PGNoZWNrPi4pKD88c3VmZml4PlxcXVxccyspKD88Ym9keT4uKikkLztcblxuICAgIHN0YXRpYyBwYXJzZShsaW5lSW5kZXg6IG51bWJlciwgbGluZTogc3RyaW5nKTogVG9kbyB8IG51bGwge1xuICAgICAgICBjb25zdCBtYXRjaCA9IFRvZG8ucmVnZXhwLmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUb2RvKFxuICAgICAgICAgICAgICAgIGxpbmVJbmRleCxcbiAgICAgICAgICAgICAgICBtYXRjaC5ncm91cHMhWydwcmVmaXgnXSEsXG4gICAgICAgICAgICAgICAgbWF0Y2guZ3JvdXBzIVsnY2hlY2snXSEsXG4gICAgICAgICAgICAgICAgbWF0Y2guZ3JvdXBzIVsnc3VmZml4J10hLFxuICAgICAgICAgICAgICAgIG1hdGNoLmdyb3VwcyFbJ2JvZHknXSEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgbGluZUluZGV4OiBudW1iZXIsXG4gICAgICAgIHByaXZhdGUgcHJlZml4OiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBjaGVjazogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIHN1ZmZpeDogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgYm9keTogc3RyaW5nKSB7IH1cblxuICAgIHB1YmxpYyB0b01hcmtkb3duKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnByZWZpeH0ke3RoaXMuY2hlY2t9JHt0aGlzLnN1ZmZpeH0ke3RoaXMuYm9keX1gO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc0NoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrID09PSAneCc7XG4gICAgfVxuXG4gICAgcHVibGljIHNldENoZWNrZWQoY2hlY2tlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNoZWNrID0gY2hlY2tlZCA/ICd4JyA6ICcgJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SGVhZGVyTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVmaXgubGVuZ3RoICsgdGhpcy5jaGVjay5sZW5ndGggKyB0aGlzLnN1ZmZpeC5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gVG9kby5wYXJzZSh0aGlzLmxpbmVJbmRleCwgdGhpcy50b01hcmtkb3duKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgVG9kb0VkaXQgPSB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW4sXG4gICAgYm9keT86IHN0cmluZyxcbn1cblxuZXhwb3J0IGNsYXNzIE1hcmtkb3duRG9jdW1lbnQge1xuXG4gICAgcHJpdmF0ZSBsaW5lczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgIHByaXZhdGUgdG9kb3M6IEFycmF5PFRvZG8+ID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZmlsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wYXJzZShjb250ZW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlKGNvbnRlbnQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgdGhpcy50b2RvcyA9IFtdO1xuICAgICAgICB0aGlzLmxpbmVzLmZvckVhY2goKGxpbmUsIGxpbmVJbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9kbyA9IFRvZG8ucGFyc2UobGluZUluZGV4LCBsaW5lKTtcbiAgICAgICAgICAgIGlmICh0b2RvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2Rvcy5wdXNoKHRvZG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VG9kb3MoKTogQXJyYXk8VG9kbz4ge1xuICAgICAgICByZXR1cm4gdGhpcy50b2RvcztcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5zZXJ0VG9kbyhsaW5lSW5kZXg6IG51bWJlciwgdG9kbzogVG9kbykge1xuICAgICAgICB0b2RvLmxpbmVJbmRleCA9IGxpbmVJbmRleDtcbiAgICAgICAgdGhpcy5saW5lcy5zcGxpY2UobGluZUluZGV4LCAwLCB0b2RvLnRvTWFya2Rvd24oKSk7XG4gICAgICAgIGxldCB0b2RvSW5kZXggPSAtMTtcbiAgICAgICAgZm9yIChjb25zdCBpIGluIHRoaXMudG9kb3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvZG8gPSB0aGlzLnRvZG9zW2ldITtcbiAgICAgICAgICAgIGlmICh0b2RvLmxpbmVJbmRleCA+PSBsaW5lSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9kb0luZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICB0b2RvSW5kZXggPSBwYXJzZUludChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9kby5saW5lSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodG9kb0luZGV4IDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMudG9kb3Muc3BsaWNlKDAsIDAsIHRvZG8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b2Rvcy5zcGxpY2UodG9kb0luZGV4LCAwLCB0b2RvKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUb2RvKGxpbmVJbmRleDogbnVtYmVyKTogVG9kbyB8IG51bGwge1xuICAgICAgICBjb25zdCBmb3VuZCA9IHRoaXMudG9kb3MuZmluZCh0b2RvID0+IHRvZG8ubGluZUluZGV4ID09PSBsaW5lSW5kZXgpO1xuICAgICAgICBpZiAoZm91bmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlDaGFuZ2VzKCkge1xuICAgICAgICAvLyBhcHBseSBjaGFuZ2VzIG9mIFRPRE8gaXRlbXMgdG8gbGluZXNcbiAgICAgICAgdGhpcy50b2Rvcy5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgICAgICAgdGhpcy5saW5lc1t0b2RvLmxpbmVJbmRleF0gPSB0b2RvLnRvTWFya2Rvd24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHRvTWFya2Rvd24oKTogc3RyaW5nIHtcbiAgICAgICAgdGhpcy5hcHBseUNoYW5nZXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZXMuam9pbignXFxuJyk7XG4gICAgfVxufVxuIiwgInR5cGUgT25DaGFuZ2VGdW5jdGlvbiA9IDxUPihvbGRWYWx1ZTogVCwgbmV3VmFsdWU6IFQpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVhZE9ubHlSZWZlcmVuY2U8VD4ge1xuXG4gIGdldCB2YWx1ZSgpOiBUO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdGFudFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFJlYWRPbmx5UmVmZXJlbmNlPFQ+e1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3ZhbHVlOiBUKSB7IH1cblxuICBnZXQgdmFsdWUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFJlYWRPbmx5UmVmZXJlbmNlPFQ+IHtcbiAgcHJpdmF0ZSBvbkNoYW5nZUZ1bmN0aW9uczogQXJyYXk8T25DaGFuZ2VGdW5jdGlvbj4gPSBbXTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfdmFsdWU6IFQpIHsgfVxuXG4gIHB1YmxpYyBvbkNoYW5nZWQobGlzdGVuZXI6IE9uQ2hhbmdlRnVuY3Rpb24pIHtcbiAgICB0aGlzLm9uQ2hhbmdlRnVuY3Rpb25zLnB1c2gobGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBUKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl92YWx1ZTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub25DaGFuZ2VGdW5jdGlvbnMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgZihvbGRWYWx1ZSwgdmFsdWUpO1xuICAgIH0pO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgQ29uc3RhbnRSZWZlcmVuY2UsIFJlYWRPbmx5UmVmZXJlbmNlIH0gZnJvbSBcIm1vZGVsL3JlZlwiO1xuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVGltZSB7XG4gIHB1YmxpYyBzdGF0aWMgbm93KCk6IERhdGVUaW1lIHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKG1vbWVudCgpLCB0cnVlKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcGFyc2UodGltZTogc3RyaW5nKTogRGF0ZVRpbWUge1xuICAgIGlmICh0aW1lLmxlbmd0aCA+IDEwKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKG1vbWVudCh0aW1lLCBcIllZWVktTU0tREQgSEg6bW1cIiksIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKG1vbWVudCh0aW1lLCBcIllZWVktTU0tRERcIiksIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGR1cmF0aW9uKFxuICAgIGZyb206IERhdGVUaW1lLFxuICAgIHRvOiBEYXRlVGltZSxcbiAgICB1bml0OiBVbml0LFxuICAgIGRlZmF1bHRUaW1lPzogVGltZVxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0by5maXhlZFRpbWUoZGVmYXVsdFRpbWUpLmRpZmYoZnJvbS5maXhlZFRpbWUoZGVmYXVsdFRpbWUpLCB1bml0KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGltZTogbW9tZW50Lk1vbWVudCwgcHJpdmF0ZSBfaGFzVGltZVBhcnQ6IGJvb2xlYW4pIHsgfVxuXG4gIHB1YmxpYyBnZXRUaW1lSW5NaWxsaXMoZGVmYXVsdFRpbWU/OiBUaW1lKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5maXhlZFRpbWUoZGVmYXVsdFRpbWUpLnZhbHVlT2YoKTtcbiAgfVxuXG4gIHB1YmxpYyBmb3JtYXQoZm9ybWF0OiBzdHJpbmcsIGRlZmF1bHRUaW1lPzogVGltZSkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkVGltZShkZWZhdWx0VGltZSkuZm9ybWF0KGZvcm1hdCk7XG4gIH1cblxuICBwdWJsaWMgdG9ZWVlZTU1NTShkZWZhdWx0VGltZT86IFRpbWUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZpeGVkVGltZShkZWZhdWx0VGltZSkuZm9ybWF0KFwiWVlZWSwgTU1NTVwiKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1lZWVlNTUREKGRlZmF1bHRUaW1lPzogVGltZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWRUaW1lKGRlZmF1bHRUaW1lKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xuICB9XG5cbiAgcHVibGljIGFkZChhbW91bnQ6IG51bWJlciwgdW5pdDogVW5pdCwgZGVmYXVsdFRpbWU/OiBUaW1lKTogRGF0ZVRpbWUge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoXG4gICAgICB0aGlzLmZpeGVkVGltZShkZWZhdWx0VGltZSkuY2xvbmUoKS5hZGQoYW1vdW50LCB1bml0KSxcbiAgICAgIHRoaXMuX2hhc1RpbWVQYXJ0XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZml4ZWRUaW1lKGRlZmF1bHRUaW1lPzogVGltZSk6IG1vbWVudC5Nb21lbnQge1xuICAgIGlmICh0aGlzLl9oYXNUaW1lUGFydCkge1xuICAgICAgcmV0dXJuIHRoaXMudGltZTtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRpbWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRpbWUuY2xvbmUoKS5hZGQoZGVmYXVsdFRpbWUubWludXRlcywgXCJtaW51dGVzXCIpO1xuICB9XG5cbiAgcHVibGljIGdldCBoYXNUaW1lUGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGFzVGltZVBhcnQ7XG4gIH1cblxuICBwdWJsaWMgbW9tZW50KCkge1xuICAgIHJldHVybiB0aGlzLnRpbWU7XG4gIH1cblxuICBwdWJsaWMgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy50aW1lLmlzVmFsaWQoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZShoYXNUaW1lUGFydD86IGJvb2xlYW4pIHtcbiAgICBjb25zdCB3aXRoVGltZVBhcnQgPSBoYXNUaW1lUGFydCA9PSBudWxsID8gdGhpcy5faGFzVGltZVBhcnQgOiBoYXNUaW1lUGFydDtcbiAgICBjb25zdCBjbG9uZSA9IHRoaXMudGltZS5jbG9uZSgpO1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoY2xvbmUsIHdpdGhUaW1lUGFydCk7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5faGFzVGltZVBhcnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdChcIllZWVktTU0tRERcIik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGVxdWFscyh0aW1lOiBEYXRlVGltZSkge1xuICAgIHJldHVybiB0aGlzLl9oYXNUaW1lUGFydCA9PT0gdGltZS5faGFzVGltZVBhcnRcbiAgICAgICYmIHRoaXMudGltZS5pc1NhbWUodGltZS50aW1lKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGltZSB7XG4gIHB1YmxpYyBzdGF0aWMgcGFyc2UodGV4dDogc3RyaW5nKTogVGltZSB7XG4gICAgaWYgKCF0ZXh0Lm1hdGNoKC9eXFxkezEsMn06XFxkezEsMn0kLykpIHtcbiAgICAgIHRocm93IGBVbmV4cGVjdGVkIGZvcm1hdCB0aW1lKCR7dGV4dH0pLiBUaW1lIG11c3QgYmUgSEg6bW0uYDtcbiAgICB9XG4gICAgY29uc3QgcyA9IHRleHQuc3BsaXQoXCI6XCIpO1xuICAgIGlmIChzLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhyb3cgYFVuZXhwZWN0ZWQgZm9ybWF0IHRpbWUoJHt0ZXh0fSkuICB0aW1lIG11c3QgYmUgSEg6bW0uYDtcbiAgICB9XG4gICAgY29uc3QgaG91ciA9IHBhcnNlSW50KHNbMF0hKTtcbiAgICBjb25zdCBtaW51dGUgPSBwYXJzZUludChzWzFdISk7XG4gICAgaWYgKGhvdXIgPiAyMyB8fCBob3VyIDwgMCkge1xuICAgICAgdGhyb3cgYGhvdXIgbXVzdCBiZSAwfjIzYDtcbiAgICB9XG4gICAgaWYgKG1pbnV0ZSA+IDU5IHx8IG1pbnV0ZSA8IDApIHtcbiAgICAgIHRocm93IGBtaW51dGUgbXVzdCBiZSAwfjU5YDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUaW1lKGhvdXIsIG1pbnV0ZSk7XG4gIH1cbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcml2YXRlIGhvdXI6IG51bWJlciwgcHJpdmF0ZSBtaW51dGU6IG51bWJlcikgeyB9XG5cbiAgZ2V0IG1pbnV0ZXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5ob3VyICogNjAgKyB0aGlzLm1pbnV0ZTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBhZCA9IChuOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICAgICAgaWYgKG4gPCAxMCkge1xuICAgICAgICByZXR1cm4gXCIwXCIgKyBuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiXCIgKyBuO1xuICAgIH07XG4gICAgcmV0dXJuIGAke3BhZCh0aGlzLmhvdXIpfToke3BhZCh0aGlzLm1pbnV0ZSl9YDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBsYXRlciA9ICgpID0+IERhdGVUaW1lO1xudHlwZSBVbml0ID0gXCJzZWNvbmRzXCIgfCBcIm1pbnV0ZXNcIiB8IFwiaG91cnNcIiB8IFwiZGF5c1wiIHwgXCJ3ZWVrc1wiIHwgXCJtb250aHNcIiB8IFwieWVhcnNcIjtcblxuZnVuY3Rpb24gYWRkKGFtb3VudDogbnVtYmVyLCB1bml0OiBVbml0KTogbGF0ZXIge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUobW9tZW50KCksIHRydWUpLmFkZChhbW91bnQsIHVuaXQpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5NaW51dGVzKG1pbnV0ZXM6IG51bWJlcik6IGxhdGVyIHtcbiAgcmV0dXJuIGFkZChtaW51dGVzLCBcIm1pbnV0ZXNcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbkhvdXJzKGhvdXJzOiBudW1iZXIpOiBsYXRlciB7XG4gIHJldHVybiBhZGQoaG91cnMsIFwiaG91cnNcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbkRheXMoZGF5czogbnVtYmVyKTogbGF0ZXIge1xuICByZXR1cm4gYWRkKGRheXMsIFwiZGF5c1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluV2Vla3Mod2Vla3M6IG51bWJlcik6IGxhdGVyIHtcbiAgcmV0dXJuIGFkZCh3ZWVrcywgXCJ3ZWVrc1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluTW9udGhzKG1vbnRoczogbnVtYmVyKTogbGF0ZXIge1xuICByZXR1cm4gYWRkKG1vbnRocywgXCJtb250aHNcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpblllYXJzKHllYXJzOiBudW1iZXIpOiBsYXRlciB7XG4gIHJldHVybiBhZGQoeWVhcnMsIFwieWVhcnNcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0V2Vla2RheSh3ZWVrZGF5OiBudW1iZXIpOiBsYXRlciB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgdG9kYXkgPSBtb21lbnQoKTtcblxuICAgIGlmICh0b2RheS5pc29XZWVrZGF5KCkgPD0gd2Vla2RheSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh0b2RheS5pc29XZWVrZGF5KHdlZWtkYXkpLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUodG9kYXkuYWRkKDEsIFwid2Vla3NcIikuaXNvV2Vla2RheSh3ZWVrZGF5KSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvbW9ycm93KCk6IGxhdGVyIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKG1vbWVudCgpLmFkZCgxLCBcImRheXNcIiksIGZhbHNlKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5leHRXZWVrKCk6IGxhdGVyIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKG1vbWVudCgpLmFkZCgxLCBcIndlZWtzXCIpLCBmYWxzZSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0TW9udGgoKTogbGF0ZXIge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUobW9tZW50KCkuYWRkKDEsIFwibW9udGhzXCIpLCBmYWxzZSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0WWVhcigpOiBsYXRlciB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBEYXRlVGltZShtb21lbnQoKS5hZGQoMSwgXCJ5ZWFyc1wiKSwgZmFsc2UpO1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgTGF0ZXIge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbGFiZWw6IHN0cmluZywgcHVibGljIGxhdGVyOiBsYXRlcikgeyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxhdGVycyhsYXRlcnM6IHN0cmluZyk6IEFycmF5PExhdGVyPiB7XG4gIHJldHVybiBsYXRlcnMuc3BsaXQoXCJcXG5cIikubWFwKGwgPT4gcGFyc2VMYXRlcihsLnRyaW0oKSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VMYXRlcihsYXRlcjogc3RyaW5nKTogTGF0ZXIge1xuICBsYXRlciA9IGxhdGVyLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChsYXRlci5zdGFydHNXaXRoKFwiaW5cIikpIHtcbiAgICBjb25zdCB0b2tlbnMgPSBsYXRlci5zcGxpdChcIiBcIik7XG4gICAgaWYgKHRva2Vucy5sZW5ndGggIT09IDMpIHtcbiAgICAgIHRocm93IGBVbnN1cHBvcnRlZCBmb3JtYXQuICBTaG91bGQgYmUgJ0luIE4gKG1pbnV0ZXN8aG91cnMpJ2A7XG4gICAgfVxuICAgIGNvbnN0IG4gPSB0b2tlbnNbMV0gPT09IFwiYVwiIHx8IHRva2Vuc1sxXSA9PT0gXCJhblwiID8gMSA6IHBhcnNlSW50KHRva2Vuc1sxXSEpO1xuICAgIHN3aXRjaCAodG9rZW5zWzJdKSB7XG4gICAgICBjYXNlIFwibWludXRlXCI6XG4gICAgICBjYXNlIFwibWludXRlc1wiOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgdW5pdCA9IG4gPT0gMSA/IFwibWludXRlXCIgOiBcIm1pbnV0ZXNcIjtcbiAgICAgICAgICByZXR1cm4gbmV3IExhdGVyKGBJbiAke259ICR7dW5pdH1gLCBpbk1pbnV0ZXMobikpO1xuICAgICAgICB9XG4gICAgICBjYXNlIFwiaG91clwiOlxuICAgICAgY2FzZSBcImhvdXJzXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCB1bml0ID0gbiA9PSAxID8gXCJob3VyXCIgOiBcImhvdXJzXCI7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMYXRlcihgSW4gJHtufSAke3VuaXR9YCwgaW5Ib3VycyhuKSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJkYXlcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCB1bml0ID0gbiA9PSAxID8gXCJkYXlcIiA6IFwiZGF5c1wiO1xuICAgICAgICAgIHJldHVybiBuZXcgTGF0ZXIoYEluICR7bn0gJHt1bml0fWAsIGluRGF5cyhuKSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJ3ZWVrXCI6XG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHVuaXQgPSBuID09IDEgPyBcIndlZWtcIiA6IFwid2Vla3NcIjtcbiAgICAgICAgICByZXR1cm4gbmV3IExhdGVyKGBJbiAke259ICR7dW5pdH1gLCBpbldlZWtzKG4pKTtcbiAgICAgICAgfVxuICAgICAgY2FzZSBcIm1vbnRoXCI6XG4gICAgICBjYXNlIFwibW9udGhzXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCB1bml0ID0gbiA9PSAxID8gXCJtb250aFwiIDogXCJtb250aHNcIjtcbiAgICAgICAgICByZXR1cm4gbmV3IExhdGVyKGBJbiAke259ICR7dW5pdH1gLCBpbk1vbnRocyhuKSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJ5ZWFyXCI6XG4gICAgICBjYXNlIFwieWVhcnNcIjpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHVuaXQgPSBuID09IDEgPyBcInllYXJcIiA6IFwieWVhcnNcIjtcbiAgICAgICAgICByZXR1cm4gbmV3IExhdGVyKGBJbiAke259ICR7dW5pdH1gLCBpblllYXJzKG4pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChsYXRlci5zdGFydHNXaXRoKFwibmV4dFwiKSkge1xuICAgIGNvbnN0IHdlZWtkYXkgPSBsYXRlci5zdWJzdHJpbmcoNSk7XG4gICAgc3dpdGNoICh3ZWVrZGF5KSB7XG4gICAgICBjYXNlIFwic3VuZGF5XCI6XG4gICAgICAgIHJldHVybiBuZXcgTGF0ZXIoXCJOZXh0IFN1bmRheVwiLCBuZXh0V2Vla2RheSgwKSk7XG4gICAgICBjYXNlIFwibW9uZGF5XCI6XG4gICAgICAgIHJldHVybiBuZXcgTGF0ZXIoXCJOZXh0IE1vbmRheVwiLCBuZXh0V2Vla2RheSgxKSk7XG4gICAgICBjYXNlIFwidHVlc2RheVwiOlxuICAgICAgICByZXR1cm4gbmV3IExhdGVyKFwiTmV4dCBUdWVzZGF5XCIsIG5leHRXZWVrZGF5KDIpKTtcbiAgICAgIGNhc2UgXCJ3ZWRuZXNkYXlcIjpcbiAgICAgICAgcmV0dXJuIG5ldyBMYXRlcihcIk5leHQgV2VkbmVzZGF5XCIsIG5leHRXZWVrZGF5KDMpKTtcbiAgICAgIGNhc2UgXCJ0aHVyc2RheVwiOlxuICAgICAgICByZXR1cm4gbmV3IExhdGVyKFwiTmV4dCBUaHVyc2RheVwiLCBuZXh0V2Vla2RheSg0KSk7XG4gICAgICBjYXNlIFwiZnJpZGF5XCI6XG4gICAgICAgIHJldHVybiBuZXcgTGF0ZXIoXCJOZXh0IEZyaWRheVwiLCBuZXh0V2Vla2RheSg1KSk7XG4gICAgICBjYXNlIFwic2F0dXJkYXlcIjpcbiAgICAgICAgcmV0dXJuIG5ldyBMYXRlcihcIk5leHQgU2F0dXJkYXlcIiwgbmV4dFdlZWtkYXkoNikpO1xuICAgICAgY2FzZSBcImRheVwiOlxuICAgICAgICByZXR1cm4gbmV3IExhdGVyKFwiVG9tb3Jyb3dcIiwgdG9tb3Jyb3coKSk7XG4gICAgICBjYXNlIFwid2Vla1wiOlxuICAgICAgICByZXR1cm4gbmV3IExhdGVyKFwiTmV4dCB3ZWVrXCIsIG5leHRXZWVrKCkpO1xuICAgICAgY2FzZSBcIm1vbnRoXCI6XG4gICAgICAgIHJldHVybiBuZXcgTGF0ZXIoXCJOZXh0IG1vbnRoXCIsIG5leHRNb250aCgpKTtcbiAgICAgIGNhc2UgXCJ5ZWFyXCI6XG4gICAgICAgIHJldHVybiBuZXcgTGF0ZXIoXCJOZXh0IHllYXJcIiwgbmV4dFllYXIoKSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBgVW5zdXBwb3J0ZWQgd2Vla2RheTogJHt3ZWVrZGF5fWA7XG4gICAgfVxuICB9IGVsc2UgaWYgKGxhdGVyID09PSBcInRvbW9ycm93XCIpIHtcbiAgICByZXR1cm4gbmV3IExhdGVyKFwiVG9tb3Jyb3dcIiwgdG9tb3Jyb3coKSk7XG4gIH1cbiAgdGhyb3cgYFVuc3VwcG9ydGVkIGZvcm1hdDogJHtsYXRlcn1gO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9MQVRFUlM6IEFycmF5PExhdGVyPiA9IFtcbiAgbmV3IExhdGVyKFwiSW4gMzAgbWludXRlc1wiLCBpbk1pbnV0ZXMoMzApKSxcbiAgbmV3IExhdGVyKFwiSW4gMSBob3Vyc1wiLCBpbkhvdXJzKDEpKSxcbiAgbmV3IExhdGVyKFwiSW4gMyBob3Vyc1wiLCBpbkhvdXJzKDMpKSxcbiAgbmV3IExhdGVyKFwiVG9tb3Jyb3dcIiwgdG9tb3Jyb3coKSksXG4gIG5ldyBMYXRlcihcIk5leHQgd2Vla1wiLCBuZXh0V2VlaygpKSxcbl07XG5cbmNsYXNzIERhdGVUaW1lRm9ybWF0dGVyIHtcblxuICBwcml2YXRlIGRhdGVGb3JtYXQ6IFJlYWRPbmx5UmVmZXJlbmNlPHN0cmluZz4gPSBuZXcgQ29uc3RhbnRSZWZlcmVuY2UoXCJZWVlZLU1NLUREXCIpO1xuICBwcml2YXRlIGRhdGVUaW1lRm9ybWF0OiBSZWFkT25seVJlZmVyZW5jZTxzdHJpbmc+ID0gbmV3IENvbnN0YW50UmVmZXJlbmNlKFwiWVlZWS1NTS1ERCBISDptbVwiKTtcbiAgcHJpdmF0ZSBzdHJpY3Q6IFJlYWRPbmx5UmVmZXJlbmNlPGJvb2xlYW4+ID0gbmV3IENvbnN0YW50UmVmZXJlbmNlKGZhbHNlKTtcblxuICBzZXRUaW1lRm9ybWF0KGRhdGVGb3JtYXQ6IFJlYWRPbmx5UmVmZXJlbmNlPHN0cmluZz4sIGRhdGVUaW1lRm9ybWF0OiBSZWFkT25seVJlZmVyZW5jZTxzdHJpbmc+LCBzdHJpY3Q6IFJlYWRPbmx5UmVmZXJlbmNlPGJvb2xlYW4+KSB7XG4gICAgdGhpcy5kYXRlRm9ybWF0ID0gZGF0ZUZvcm1hdDtcbiAgICB0aGlzLmRhdGVUaW1lRm9ybWF0ID0gZGF0ZVRpbWVGb3JtYXQ7XG4gICAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG4gIH1cblxuICBwYXJzZSh0ZXh0OiBzdHJpbmcpOiBEYXRlVGltZSB8IG51bGwge1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZG9QYXJzZSh0ZXh0LCB0cnVlKTtcbiAgICBpZiAocGFyc2VkICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmljdC52YWx1ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRvUGFyc2UodGV4dCwgZmFsc2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBkb1BhcnNlKHRleHQ6IHN0cmluZywgc3RyaWN0OiBib29sZWFuKTogRGF0ZVRpbWUgfCBudWxsIHtcbiAgICBjb25zdCBkYXRlVGltZSA9IG1vbWVudCh0ZXh0LCB0aGlzLmRhdGVUaW1lRm9ybWF0LnZhbHVlLCBzdHJpY3QpO1xuICAgIGlmIChkYXRlVGltZS5pc1ZhbGlkKCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZVRpbWUsIHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBkYXRlID0gbW9tZW50KHRleHQsIHRoaXMuZGF0ZUZvcm1hdC52YWx1ZSwgc3RyaWN0KTtcbiAgICBpZiAoZGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRvU3RyaW5nKHRpbWU6IERhdGVUaW1lKTogc3RyaW5nIHtcbiAgICBpZiAodGltZS5oYXNUaW1lUGFydCkge1xuICAgICAgcmV0dXJuIHRpbWUuZm9ybWF0KHRoaXMuZGF0ZVRpbWVGb3JtYXQudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGltZS5mb3JtYXQodGhpcy5kYXRlRm9ybWF0LnZhbHVlKTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgREFURV9USU1FX0ZPUk1BVFRFUiA9IG5ldyBEYXRlVGltZUZvcm1hdHRlcigpO1xuIiwgImltcG9ydCB0eXBlIHsgUmVhZE9ubHlSZWZlcmVuY2UgfSBmcm9tIFwibW9kZWwvcmVmXCI7XG5pbXBvcnQgeyBEYXRlVGltZSwgVGltZSB9IGZyb20gXCJtb2RlbC90aW1lXCI7XG5cbmV4cG9ydCBjbGFzcyBSZW1pbmRlciB7XG5cbiAgLy8gVG8gYXZvaWQgZHVwbGljYXRlIG5vdGlmaWNhdGlvbiwgc2V0IHRoaXMgZmxhZyB0cnVlIGJlZm9yZSBub3RpZmljYXRpb24gYW5kIHNldCBmYWxzZSBvbiBub3RpZmljYXRpb24gZG9uZS5cbiAgcHVibGljIG11dGVOb3RpZmljYXRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiBHaXZlbiB0aGF0IGBtdXRlTm90aWZpY2F0aW9uYCBhYm92ZSBpcyBwbGF5aW5nIGRvdWJsZSBkdXR5LCB3ZSBuZWVkIGEgZmxhZ1xuICAgKiB0aGF0IGxldHMgdXMgc2VyaWFsaXplIHJlbWluZGVyIGRpc3BsYXkgdG8gcHJldmVudCBvdmVybG9hZCBwcm9ibGVtcyBvblxuICAgKiBtb2JpbGUuXG4gICAqXG4gICAqIEl0IHNob3VsZCBiZSBzZXQgdG8gYHRydWVgIGJlZm9yZSB0aGUgcmVtaW5kZXIgaXMgZGlzcGxheWVkLCBhbmQgdGhlbiBzZXRcbiAgICogdG8gZmFsc2Ugb25jZSB0aGUgcmVtaW5kZXIgaXMgZGVhbHQgd2l0aC5cbiAgICovXG4gIHB1YmxpYyBiZWluZ0Rpc3BsYXllZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBmaWxlOiBzdHJpbmcsXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmcsXG4gICAgcHVibGljIHRpbWU6IERhdGVUaW1lLFxuICAgIHB1YmxpYyByb3dOdW1iZXI6IG51bWJlcixcbiAgICBwdWJsaWMgZG9uZTogYm9vbGVhblxuICApIHsgfVxuXG4gIGtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlICsgdGhpcy50aXRsZSArIHRoaXMudGltZS50b1N0cmluZygpO1xuICB9XG5cbiAgZXF1YWxzKHJlbWluZGVyOiBSZW1pbmRlcikge1xuICAgIHJldHVybiB0aGlzLnJvd051bWJlciA9PT0gcmVtaW5kZXIucm93TnVtYmVyXG4gICAgICAmJiB0aGlzLnRpdGxlID09PSByZW1pbmRlci50aXRsZVxuICAgICAgJiYgdGhpcy50aW1lLmVxdWFscyhyZW1pbmRlci50aW1lKVxuICAgICAgJiYgdGhpcy5maWxlID09PSByZW1pbmRlci5maWxlO1xuICB9XG5cbiAgcHVibGljIGdldEZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgY29uc3QgcCA9IHRoaXMuZmlsZS5zcGxpdCgvW1xcL1xcXFxdLyk7XG4gICAgcmV0dXJuIHBbcC5sZW5ndGggLSAxXSEucmVwbGFjZSgvXiguKj8pKFxcLi4rKT8kLywgXCIkMVwiKTtcbiAgfVxuXG4gIHN0YXRpYyBleHRyYWN0RmlsZU5hbWUocGF0aDogc3RyaW5nKSB7XG4gICAgY29uc3QgcCA9IHBhdGguc3BsaXQoL1tcXC9cXFxcXS8pO1xuICAgIHJldHVybiBwW3AubGVuZ3RoIC0gMV0hLnJlcGxhY2UoL14oLio/KShcXC4uKyk/JC8sIFwiJDFcIik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbWluZGVycyB7XG4gIHB1YmxpYyBmaWxlVG9SZW1pbmRlcnM6IE1hcDxzdHJpbmcsIEFycmF5PFJlbWluZGVyPj4gPSBuZXcgTWFwKCk7XG4gIHB1YmxpYyByZW1pbmRlcnM6IEFycmF5PFJlbWluZGVyPiA9IFtdO1xuICBwdWJsaWMgcmVtaW5kZXJUaW1lPzogUmVhZE9ubHlSZWZlcmVuY2U8VGltZT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvbkNoYW5nZTogKCkgPT4gdm9pZCkgeyB9XG5cbiAgcHVibGljIGdldEV4cGlyZWRSZW1pbmRlcnMoZGVmYXVsdFRpbWU6IFRpbWUpOiBBcnJheTxSZW1pbmRlcj4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8UmVtaW5kZXI+ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJlbWluZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVtaW5kZXIgPSB0aGlzLnJlbWluZGVyc1tpXSE7XG4gICAgICBpZiAocmVtaW5kZXIudGltZS5nZXRUaW1lSW5NaWxsaXMoZGVmYXVsdFRpbWUpIDw9IG5vdykge1xuICAgICAgICByZXN1bHQucHVzaChyZW1pbmRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBieURhdGUoZGF0ZTogRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1pbmRlcnMuZmlsdGVyKHJlbWluZGVyID0+IHJlbWluZGVyLnRpbWUudG9ZWVlZTU1ERCgpID09PSBkYXRlLnRvWVlZWU1NREQoKSk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlUmVtaW5kZXIocmVtaW5kZXI6IFJlbWluZGVyKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIlJlbW92ZSByZW1pbmRlcjogJW9cIiwgcmVtaW5kZXIpO1xuICAgIHRoaXMucmVtaW5kZXJzLnJlbW92ZShyZW1pbmRlcik7XG4gICAgY29uc3QgZmlsZSA9IHRoaXMuZmlsZVRvUmVtaW5kZXJzLmdldChyZW1pbmRlci5maWxlKTtcbiAgICBpZiAoZmlsZSkge1xuICAgICAgZmlsZS5yZW1vdmUocmVtaW5kZXIpO1xuICAgICAgaWYgKGZpbGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuZmlsZVRvUmVtaW5kZXJzLmRlbGV0ZShyZW1pbmRlci5maWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZSgpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCkge1xuICAgIHRoaXMuZmlsZVRvUmVtaW5kZXJzLmNsZWFyKCk7XG4gICAgdGhpcy5yZW1pbmRlcnMgPSBbXTtcbiAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlRmlsZShmaWxlUGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuZmlsZVRvUmVtaW5kZXJzLmRlbGV0ZShmaWxlUGF0aCkpIHtcbiAgICAgIHRoaXMuc29ydFJlbWluZGVycygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyByZXBsYWNlRmlsZShmaWxlUGF0aDogc3RyaW5nLCByZW1pbmRlcnM6IEFycmF5PFJlbWluZGVyPik6IGJvb2xlYW4ge1xuICAgIC8vIG1pZ3JhdGUgbm90aWZpY2F0aW9uVmlzaWJsZSBwcm9wZXJ0eVxuICAgIGNvbnN0IG9sZFJlbWluZGVycyA9IHRoaXMuZmlsZVRvUmVtaW5kZXJzLmdldChmaWxlUGF0aCk7XG4gICAgaWYgKG9sZFJlbWluZGVycykge1xuICAgICAgaWYgKHRoaXMuZXF1YWxzKG9sZFJlbWluZGVycywgcmVtaW5kZXJzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCByZW1pbmRlclRvTm90aWZpY2F0aW9uVmlzaWJsZSA9IG5ldyBNYXA8c3RyaW5nLCBib29sZWFuPigpO1xuICAgICAgZm9yIChjb25zdCByZW1pbmRlciBvZiBvbGRSZW1pbmRlcnMpIHtcbiAgICAgICAgcmVtaW5kZXJUb05vdGlmaWNhdGlvblZpc2libGUuc2V0KHJlbWluZGVyLmtleSgpLCByZW1pbmRlci5tdXRlTm90aWZpY2F0aW9uKTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcmVtaW5kZXIgb2YgcmVtaW5kZXJzKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGUgPSByZW1pbmRlclRvTm90aWZpY2F0aW9uVmlzaWJsZS5nZXQocmVtaW5kZXIua2V5KCkpO1xuICAgICAgICByZW1pbmRlclRvTm90aWZpY2F0aW9uVmlzaWJsZS5zZXQocmVtaW5kZXIua2V5KCksIHJlbWluZGVyLm11dGVOb3RpZmljYXRpb24pO1xuICAgICAgICBpZiAodmlzaWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVtaW5kZXIubXV0ZU5vdGlmaWNhdGlvbiA9IHZpc2libGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXBkYXRlXG4gICAgdGhpcy5maWxlVG9SZW1pbmRlcnMuc2V0KGZpbGVQYXRoLCByZW1pbmRlcnMpO1xuICAgIHRoaXMuc29ydFJlbWluZGVycygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBlcXVhbHMocjE6IEFycmF5PFJlbWluZGVyPiwgcjI6IEFycmF5PFJlbWluZGVyPikge1xuICAgIGlmIChyMS5sZW5ndGggIT09IHIyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnNvcnQocjEpO1xuICAgIHRoaXMuc29ydChyMik7XG4gICAgZm9yIChjb25zdCBpIGluIHIxKSB7XG4gICAgICBjb25zdCByZW1pbmRlcjEgPSByMVtpXTtcbiAgICAgIGNvbnN0IHJlbWluZGVyMiA9IHIyW2ldO1xuICAgICAgaWYgKHJlbWluZGVyMSA9PSBudWxsICYmIHJlbWluZGVyMiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1pbmRlcjIgPT0gbnVsbCAmJiByZW1pbmRlcjEgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocmVtaW5kZXIxID09IG51bGwgJiYgcmVtaW5kZXIyID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoIXJlbWluZGVyMSEuZXF1YWxzKHJlbWluZGVyMiEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwcml2YXRlIHNvcnRSZW1pbmRlcnMoKSB7XG4gICAgY29uc3QgcmVtaW5kZXJzOiBBcnJheTxSZW1pbmRlcj4gPSBbXTtcblxuICAgIGZvciAoY29uc3QgciBvZiB0aGlzLmZpbGVUb1JlbWluZGVycy52YWx1ZXMoKSkge1xuICAgICAgcmVtaW5kZXJzLnB1c2goLi4ucik7XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0KHJlbWluZGVycyk7XG4gICAgdGhpcy5yZW1pbmRlcnMgPSByZW1pbmRlcnM7XG4gICAgdGhpcy5vbkNoYW5nZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzb3J0KHJlbWluZGVyczogQXJyYXk8UmVtaW5kZXI+KSB7XG4gICAgcmVtaW5kZXJzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGQgPVxuICAgICAgICBhLnRpbWUuZ2V0VGltZUluTWlsbGlzKHRoaXMucmVtaW5kZXJUaW1lPy52YWx1ZSkgLVxuICAgICAgICBiLnRpbWUuZ2V0VGltZUluTWlsbGlzKHRoaXMucmVtaW5kZXJUaW1lPy52YWx1ZSk7XG4gICAgICByZXR1cm4gZCA+IDAgPyAxIDogZCA8IDAgPyAtMSA6IDA7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHcm91cCh0aW1lOiBEYXRlVGltZSwgbm93OiBEYXRlVGltZSwgcmVtaW5kZXJUaW1lOiBUaW1lKSB7XG4gIGNvbnN0IGRheXMgPSBEYXRlVGltZS5kdXJhdGlvbihub3csIHRpbWUsIFwiZGF5c1wiLCByZW1pbmRlclRpbWUpO1xuICBpZiAoZGF5cyA+IDMwKSB7XG4gICAgcmV0dXJuIG5ldyBHcm91cCh0aW1lLnRvWVlZWU1NTU0ocmVtaW5kZXJUaW1lKSwgKHRpbWUpID0+XG4gICAgICB0aW1lLmZvcm1hdChcIk1NL0REXCIsIHJlbWluZGVyVGltZSlcbiAgICApO1xuICB9XG4gIGlmIChkYXlzID49IDcpIHtcbiAgICByZXR1cm4gbmV3IEdyb3VwKFwiT3ZlciAxIHdlZWtcIiwgKHRpbWUpID0+XG4gICAgICB0aW1lLmZvcm1hdChcIk1NL0REXCIsIHJlbWluZGVyVGltZSlcbiAgICApO1xuICB9XG4gIGlmICh0aW1lLnRvWVlZWU1NREQocmVtaW5kZXJUaW1lKSA9PT0gbm93LnRvWVlZWU1NREQocmVtaW5kZXJUaW1lKSkge1xuICAgIGNvbnN0IHRvZGF5c0dyb3VwID0gbmV3IEdyb3VwKFwiVG9kYXlcIiwgKHRpbWUpID0+XG4gICAgICB0aW1lLmZvcm1hdChcIkhIOm1tXCIsIHJlbWluZGVyVGltZSlcbiAgICApO1xuICAgIHRvZGF5c0dyb3VwLmlzVG9kYXkgPSB0cnVlO1xuICAgIHJldHVybiB0b2RheXNHcm91cDtcbiAgfVxuICBpZiAoXG4gICAgdGltZS50b1lZWVlNTUREKHJlbWluZGVyVGltZSkgPT09XG4gICAgbm93LmFkZCgxLCBcImRheXNcIiwgcmVtaW5kZXJUaW1lKS50b1lZWVlNTUREKClcbiAgKSB7XG4gICAgcmV0dXJuIG5ldyBHcm91cChcIlRvbW9ycm93XCIsICh0aW1lKSA9PiB0aW1lLmZvcm1hdChcIkhIOm1tXCIsIHJlbWluZGVyVGltZSkpO1xuICB9XG4gIHJldHVybiBuZXcgR3JvdXAodGltZS5mb3JtYXQoXCJNL0REIChkZGQpXCIsIHJlbWluZGVyVGltZSksICh0aW1lKSA9PlxuICAgIHRpbWUuZm9ybWF0KFwiSEg6bW1cIiwgcmVtaW5kZXJUaW1lKVxuICApO1xufVxuXG5jbGFzcyBHcm91cCB7XG4gIHB1YmxpYyBpc1RvZGF5OiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBpc092ZXJkdWU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHRpbWVUb1N0cmluZ0Z1bmM6ICh0aW1lOiBEYXRlVGltZSkgPT4gc3RyaW5nXG4gICkgeyB9XG5cbiAgdGltZVRvU3RyaW5nKHRpbWU6IERhdGVUaW1lKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy50aW1lVG9TdHJpbmdGdW5jKHRpbWUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cFJlbWluZGVycyhcbiAgc29ydGVkUmVtaW5kZXJzOiBBcnJheTxSZW1pbmRlcj4sXG4gIHJlbWluZGVyVGltZTogVGltZVxuKTogQXJyYXk8R3JvdXBlZFJlbWluZGVyPiB7XG4gIGNvbnN0IG5vdyA9IERhdGVUaW1lLm5vdygpO1xuICBjb25zdCByZXN1bHQ6IEFycmF5PEdyb3VwZWRSZW1pbmRlcj4gPSBbXTtcbiAgbGV0IGN1cnJlbnRSZW1pbmRlcnM6IEFycmF5PFJlbWluZGVyPiA9IFtdO1xuICBjb25zdCBvdmVyZHVlUmVtaW5kZXJzOiBBcnJheTxSZW1pbmRlcj4gPSBbXTtcbiAgLy8gQWx3YXlzIHNob3dzIHRvZGF5J3MgZ3JvdXBcbiAgbGV0IHByZXZpb3VzR3JvdXA6IEdyb3VwID0gZ2VuZXJhdGVHcm91cChub3csIG5vdywgcmVtaW5kZXJUaW1lKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3J0ZWRSZW1pbmRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByID0gc29ydGVkUmVtaW5kZXJzW2ldITtcbiAgICBpZiAoci5tdXRlTm90aWZpY2F0aW9uKSB7XG4gICAgICBvdmVyZHVlUmVtaW5kZXJzLnB1c2gocik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgZ3JvdXAgPSBnZW5lcmF0ZUdyb3VwKHIudGltZSwgbm93LCByZW1pbmRlclRpbWUpO1xuICAgIGlmIChncm91cC5uYW1lICE9PSBwcmV2aW91c0dyb3VwLm5hbWUpIHtcbiAgICAgIGlmIChjdXJyZW50UmVtaW5kZXJzLmxlbmd0aCA+IDAgfHwgcHJldmlvdXNHcm91cC5pc1RvZGF5KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5ldyBHcm91cGVkUmVtaW5kZXIocHJldmlvdXNHcm91cCwgY3VycmVudFJlbWluZGVycykpO1xuICAgICAgfVxuICAgICAgY3VycmVudFJlbWluZGVycyA9IFtdO1xuICAgIH1cbiAgICBjdXJyZW50UmVtaW5kZXJzLnB1c2gocik7XG4gICAgcHJldmlvdXNHcm91cCA9IGdyb3VwO1xuICB9XG4gIGlmIChjdXJyZW50UmVtaW5kZXJzLmxlbmd0aCA+IDApIHtcbiAgICByZXN1bHQucHVzaChuZXcgR3JvdXBlZFJlbWluZGVyKHByZXZpb3VzR3JvdXAsIGN1cnJlbnRSZW1pbmRlcnMpKTtcbiAgfVxuICBpZiAob3ZlcmR1ZVJlbWluZGVycy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgb3ZlcmR1ZUdyb3VwOiBHcm91cCA9IG5ldyBHcm91cChcIk92ZXJkdWVcIiwgKHRpbWUpID0+IHRpbWUuZm9ybWF0KFwiSEg6bW1cIiwgcmVtaW5kZXJUaW1lKSk7XG4gICAgb3ZlcmR1ZUdyb3VwLmlzT3ZlcmR1ZSA9IHRydWU7XG4gICAgcmVzdWx0LnNwbGljZSgwLCAwLCBuZXcgR3JvdXBlZFJlbWluZGVyKG92ZXJkdWVHcm91cCwgb3ZlcmR1ZVJlbWluZGVycykpO1xuICAgIGNvbnNvbGUubG9nKG92ZXJkdWVHcm91cCk7XG4gICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgY2xhc3MgR3JvdXBlZFJlbWluZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBncm91cDogR3JvdXAsIHB1YmxpYyByZW1pbmRlcnM6IEFycmF5PFJlbWluZGVyPikgeyB9XG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAubmFtZTtcbiAgfVxuXG4gIGdldCBpc092ZXJkdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAuaXNPdmVyZHVlO1xuICB9XG5cbiAgdGltZVRvU3RyaW5nKHRpbWU6IERhdGVUaW1lKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cC50aW1lVG9TdHJpbmcodGltZSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IE1hcmtkb3duRG9jdW1lbnQgfSBmcm9tIFwibW9kZWwvZm9ybWF0L21hcmtkb3duXCI7XG5pbXBvcnQgdHlwZSB7IFJlYWRPbmx5UmVmZXJlbmNlIH0gZnJvbSBcIm1vZGVsL3JlZlwiO1xuaW1wb3J0IHsgUmVtaW5kZXIgfSBmcm9tIFwibW9kZWwvcmVtaW5kZXJcIjtcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcIm1vZGVsL3RpbWVcIjtcbmltcG9ydCB7IFRvZG8gfSBmcm9tIFwiLi9tYXJrZG93blwiO1xuXG5leHBvcnQgdHlwZSBSZW1pbmRlckVkaXQgPSB7XG4gICAgdGltZT86IERhdGVUaW1lLFxuICAgIHJhd1RpbWU/OiBzdHJpbmcsXG4gICAgY2hlY2tlZD86IGJvb2xlYW5cbn1cbmV4cG9ydCB0eXBlIFJlbWluZGVySW5zZXJ0aW9uID0ge1xuICAgIGluc2VydGVkTGluZTogc3RyaW5nLFxuICAgIGNhcmV0UG9zaXRpb246IG51bWJlcixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW1pbmRlck1vZGVsIHtcbiAgICBnZXRUaXRsZSgpOiBzdHJpbmcgfCBudWxsO1xuICAgIGdldFRpbWUoKTogRGF0ZVRpbWUgfCBudWxsO1xuICAgIC8qKiBpbnNlcnRBdCBpcyBhIG9wdGlvbmFsIGFyZ3VtZW50IHJlcHJlc2VudGluZyBzdHJpbmcgaW5kZXggZm9yIGluZGljYXRpbmcgd2hlcmUgdG8gaW5zZXJ0IHRoZSB0aW1lLiAqL1xuICAgIHNldFRpbWUodGltZTogRGF0ZVRpbWUsIGluc2VydEF0PzogbnVtYmVyKTogdm9pZDtcbiAgICAvKiogcmV0dXJuIGZhbHNlIHdoZW4gdGhpcyByZW1pbmRlciBkb2Vzbid0IHN1cHBvcnQgcmF3IHRpbWUuICovXG4gICAgc2V0UmF3VGltZShyYXdUaW1lOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIHRvTWFya2Rvd24oKTogc3RyaW5nO1xuICAgIC8qKiBcbiAgICAgKiBnZXQgdGhlIHN0cmluZyBpbmRleCBhdCB0aGUgZW5kIG9mIHRpbWUgcGFydC4gXG4gICAgICogdGhpcyBpcyB1c2VkIGZvciBkZWNpc2lvbiBvZiBjYXJldCBwb3NpdGlvbiBhZnRlciBpbnNlcnRpbmcgcmVtaW5kZXIuXG4gICAgICovXG4gICAgZ2V0RW5kT2ZUaW1lVGV4dEluZGV4KCk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyS2V5PFQ+IHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbm93ID0gbmV3IFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyS2V5PERhdGVUaW1lPihcIm5vd1wiLCBEYXRlVGltZS5ub3coKSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHVzZUN1c3RvbUVtb2ppRm9yVGFza3NQbHVnaW4gPSBuZXcgUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXk8Ym9vbGVhbj4oXCJ1c2VDdXN0b21FbW9qaUZvclRhc2tzUGx1Z2luXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgcmVtb3ZlVGFnc0ZvclRhc2tzUGx1Z2luID0gbmV3IFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyS2V5PGJvb2xlYW4+KFwicmVtb3ZlVGFnc0ZvclRhc2tzUGx1Z2luXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbGlua0RhdGVzVG9EYWlseU5vdGVzID0gbmV3IFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyS2V5PGJvb2xlYW4+KFwibGlua0RhdGVzVG9EYWlseU5vdGVzXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3RyaWN0RGF0ZUZvcm1hdCA9IG5ldyBSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleTxib29sZWFuPihcInN0cmljdERhdGVGb3JtYXRcIiwgZmFsc2UpO1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBrZXk6IHN0cmluZywgcHVibGljIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZTogVCkge1xuICAgIH1cbn1cblxudHlwZSBSZW1pbmRlckZvcm1hdFBhcmFtZXRlclNvdXJjZTxUPiA9ICgpID0+IFQ7XG5cbmV4cG9ydCBjbGFzcyBSZW1pbmRlckZvcm1hdENvbmZpZyB7XG4gICAgcHJpdmF0ZSBwYXJhbWV0ZXJzOiBNYXA8c3RyaW5nLCBSZW1pbmRlckZvcm1hdFBhcmFtZXRlclNvdXJjZTxhbnk+PiA9IG5ldyBNYXAoKTtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHBhcmFtZXRlciBmb3IgdGhpcyBmb3JtYXQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGtleSBwYXJhbWV0ZXIga2V5XG4gICAgICovXG4gICAgc2V0UGFyYW1ldGVyPFQ+KGtleTogUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXk8VD4sIHZhbHVlOiBSZWFkT25seVJlZmVyZW5jZTxUPik6IHZvaWQge1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KGtleS5rZXksICgpID0+IHZhbHVlLnZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgcGFyYW1ldGVyIGZvciB0aGlzIGZvcm1hdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ga2V5IHBhcmFtZXRlciBrZXlcbiAgICAgKi9cbiAgICBzZXRQYXJhbWV0ZXJGdW5jPFQ+KGtleTogUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXk8VD4sIGY6IFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyU291cmNlPFQ+KTogdm9pZCB7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoa2V5LmtleSwgZik7XG4gICAgfVxuXG4gICAgc2V0UGFyYW1ldGVyVmFsdWU8VD4oa2V5OiBSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleTxUPiwgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChrZXkua2V5LCAoKSA9PiB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0UGFyYW1ldGVyPFQ+KGtleTogUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXk8VD4pOiBUIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcmFtZXRlcnMuZ2V0KGtleS5rZXkpXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5LmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW1pbmRlckZvcm1hdCB7XG5cbiAgICBzZXRDb25maWcoY29uZmlnOiBSZW1pbmRlckZvcm1hdENvbmZpZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUGFyc2UgZ2l2ZW4gbGluZSBpZiBwb3NzaWJsZS5cbiAgICAgKi9cbiAgICBwYXJzZShkb2M6IE1hcmtkb3duRG9jdW1lbnQpOiBBcnJheTxSZW1pbmRlcj4gfCBudWxsXG4gICAgLyoqXG4gICAgICogTW9kaWZ5IHRoZSBnaXZlbiBsaW5lIGlmIHBvc3NpYmxlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBkb2MgVXBkYXRlIHRhcmdldCBkb2N1bWVudC4gIEluIGNhc2Ugb2YgdGFza3MgcGx1Z2luLCB3ZSB1cGRhdGUgT2JzaWRpYW4ncyBmaWxlIHZpYSB0YXNrcyBwbHVnaW4gY29tbWFuZCBpbnN0ZWFkIG9mIHRoaXMgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIHJlbWluZGVyIFJlbWluZGVyIHRvIGVkaXQuXG4gICAgICogQHBhcmFtIGVkaXQgZGVmaW5lcyBob3cgdG8gZWRpdFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgbW9kaWZpZWRcbiAgICAgKi9cbiAgICBtb2RpZnkoZG9jOiBNYXJrZG93bkRvY3VtZW50LCByZW1pbmRlcjogUmVtaW5kZXIsIGVkaXQ6IFJlbWluZGVyRWRpdCk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmQgYSByZW1pbmRlciBpbmZvcm1hdGlvbiB0byB0aGUgZ2l2ZW4gbGluZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gbGluZSBsaW5lIGluIGVkaXRvclxuICAgICAqIEBwYXJhbSB0aW1lIHRpbWUgdG8gYXBwZW5kXG4gICAgICogQHBhcmFtIGluc2VydEF0IHBvc2l0aW9uIGF0IGBsaW5lYCB0byBpbnNlcnQgcmVtaW5kZXIuICh0aGlzIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4gdGhlIGZvcm1hdCBzdXBwb3J0cyBpbnNlcnRpb24pXG4gICAgICovXG4gICAgYXBwZW5kUmVtaW5kZXIobGluZTogc3RyaW5nLCB0aW1lOiBEYXRlVGltZSwgaW5zZXJ0QXQ/OiBudW1iZXIpOiBSZW1pbmRlckluc2VydGlvbiB8IG51bGw7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUb2RvQmFzZWRSZW1pbmRlckZvcm1hdDxFIGV4dGVuZHMgUmVtaW5kZXJNb2RlbD4gaW1wbGVtZW50cyBSZW1pbmRlckZvcm1hdCB7XG5cbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBSZW1pbmRlckZvcm1hdENvbmZpZyA9IG5ldyBSZW1pbmRlckZvcm1hdENvbmZpZygpO1xuXG4gICAgc2V0Q29uZmlnKGNvbmZpZzogUmVtaW5kZXJGb3JtYXRDb25maWcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgfVxuXG4gICAgcGFyc2UoZG9jOiBNYXJrZG93bkRvY3VtZW50KTogUmVtaW5kZXJbXSB7XG4gICAgICAgIHJldHVybiBkb2MuZ2V0VG9kb3MoKVxuICAgICAgICAgICAgLm1hcCh0b2RvID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlVmFsaWRSZW1pbmRlcih0b2RvKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gcGFyc2VkLmdldFRpdGxlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRpdGxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBwYXJzZWQuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVtaW5kZXIoZG9jLmZpbGUsIHRpdGxlLCB0aW1lLCB0b2RvLmxpbmVJbmRleCwgdG9kby5pc0NoZWNrZWQoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcigocmVtaW5kZXIpOiByZW1pbmRlciBpcyBSZW1pbmRlciA9PiByZW1pbmRlciAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBhc3luYyBtb2RpZnkoZG9jOiBNYXJrZG93bkRvY3VtZW50LCByZW1pbmRlcjogUmVtaW5kZXIsIGVkaXQ6IFJlbWluZGVyRWRpdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCB0b2RvID0gZG9jLmdldFRvZG8ocmVtaW5kZXIucm93TnVtYmVyKTtcbiAgICAgICAgaWYgKHRvZG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vdCBhIHRvZG86IHJlbWluZGVyPSVvXCIsIHJlbWluZGVyKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlVmFsaWRSZW1pbmRlcih0b2RvKTtcbiAgICAgICAgaWYgKHBhcnNlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm1vZGlmeVJlbWluZGVyKGRvYywgdG9kbywgcGFyc2VkLCBlZGl0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRvZG8uYm9keSA9IHBhcnNlZC50b01hcmtkb3duKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VWYWxpZFJlbWluZGVyKHRvZG86IFRvZG8pOiBFIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMucGFyc2VSZW1pbmRlcih0b2RvKTtcbiAgICAgICAgaWYgKHBhcnNlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRSZW1pbmRlcihwYXJzZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cblxuICAgIGlzVmFsaWRSZW1pbmRlcihyZW1pbmRlcjogRSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcmVtaW5kZXIuZ2V0VGltZSgpICE9PSBudWxsO1xuICAgIH1cblxuICAgIG1vZGlmeVJlbWluZGVyKGRvYzogTWFya2Rvd25Eb2N1bWVudCwgdG9kbzogVG9kbywgcGFyc2VkOiBFLCBlZGl0OiBSZW1pbmRlckVkaXQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGVkaXQucmF3VGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIXBhcnNlZC5zZXRSYXdUaW1lKGVkaXQucmF3VGltZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgcmVtaW5kZXIgZG9lc24ndCBzdXBwb3J0IHJhdyB0aW1lOiBwYXJzZWQ9JW9cIiwgcGFyc2VkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZWRpdC50aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcnNlZC5zZXRUaW1lKGVkaXQudGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVkaXQuY2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b2RvLnNldENoZWNrZWQoZWRpdC5jaGVja2VkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBhcHBlbmRSZW1pbmRlcihsaW5lOiBzdHJpbmcsIHRpbWU6IERhdGVUaW1lLCBpbnNlcnRBdD86IG51bWJlcik6IFJlbWluZGVySW5zZXJ0aW9uIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHRvZG8gPSBUb2RvLnBhcnNlKDAsIGxpbmUpO1xuICAgICAgICBpZiAodG9kbyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkID0gdGhpcy5wYXJzZVJlbWluZGVyKHRvZG8pO1xuICAgICAgICBjb25zdCB0b2RvSGVhZGVyTGVuZ3RoID0gdG9kby5nZXRIZWFkZXJMZW5ndGgoKTtcbiAgICAgICAgaWYgKGluc2VydEF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGluc2VydCBhdCBwb3NpdGlvbiBvZiBUT0RPIGJvZHkgcGFydFxuICAgICAgICAgICAgaW5zZXJ0QXQgLT0gdG9kb0hlYWRlckxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBhcnNlZC5zZXRUaW1lKHRpbWUsIGluc2VydEF0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMubmV3UmVtaW5kZXIodG9kby5ib2R5LCB0aW1lLCBpbnNlcnRBdCk7XG4gICAgICAgICAgICBwYXJzZWQuc2V0VGltZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0b2RvLmJvZHkgPSBwYXJzZWQudG9NYXJrZG93bigpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5zZXJ0ZWRMaW5lOiB0b2RvLnRvTWFya2Rvd24oKSxcbiAgICAgICAgICAgIGNhcmV0UG9zaXRpb246IHRvZG9IZWFkZXJMZW5ndGggKyBwYXJzZWQuZ2V0RW5kT2ZUaW1lVGV4dEluZGV4KCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgcGFyc2VSZW1pbmRlcih0b2RvOiBUb2RvKTogRSB8IG51bGw7XG5cbiAgICBhYnN0cmFjdCBuZXdSZW1pbmRlcih0aXRsZTogc3RyaW5nLCB0aW1lOiBEYXRlVGltZSwgaW5zZXJ0QXQ/OiBudW1iZXIpOiBFO1xuXG4gICAgcHJvdGVjdGVkIGlzU3RyaWN0RGF0ZUZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmdldFBhcmFtZXRlcihSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleS5zdHJpY3REYXRlRm9ybWF0KTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBvc2l0ZVJlbWluZGVyRm9ybWF0IGltcGxlbWVudHMgUmVtaW5kZXJGb3JtYXQge1xuXG4gICAgcHJpdmF0ZSBjb25maWc/OiBSZW1pbmRlckZvcm1hdENvbmZpZztcbiAgICBwcml2YXRlIGZvcm1hdHM6IEFycmF5PFJlbWluZGVyRm9ybWF0PiA9IFtdO1xuXG4gICAgc2V0Q29uZmlnKGNvbmZpZzogUmVtaW5kZXJGb3JtYXRDb25maWcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuc3luY0NvbmZpZygpO1xuICAgIH1cblxuICAgIHBhcnNlKGRvYzogTWFya2Rvd25Eb2N1bWVudCk6IFJlbWluZGVyW10ge1xuICAgICAgICBjb25zdCByZW1pbmRlcnM6IEFycmF5PFJlbWluZGVyPiA9IFtdXG4gICAgICAgIGZvciAoY29uc3QgZm9ybWF0IG9mIHRoaXMuZm9ybWF0cykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gZm9ybWF0LnBhcnNlKGRvYyk7XG4gICAgICAgICAgICBpZiAocGFyc2VkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbWluZGVycy5wdXNoKC4uLnBhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbWluZGVycztcbiAgICB9XG5cbiAgICBhc3luYyBtb2RpZnkoZG9jOiBNYXJrZG93bkRvY3VtZW50LCByZW1pbmRlcjogUmVtaW5kZXIsIGVkaXQ6IFJlbWluZGVyRWRpdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBmb3IgKGNvbnN0IGZvcm1hdCBvZiB0aGlzLmZvcm1hdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gYXdhaXQgZm9ybWF0Lm1vZGlmeShkb2MsIHJlbWluZGVyLCBlZGl0KTtcbiAgICAgICAgICAgIGlmIChtb2RpZmllZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXNldEZvcm1hdChmb3JtYXRzOiBBcnJheTxSZW1pbmRlckZvcm1hdD4pIHtcbiAgICAgICAgdGhpcy5mb3JtYXRzID0gZm9ybWF0cztcbiAgICAgICAgdGhpcy5zeW5jQ29uZmlnKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzeW5jQ29uZmlnKCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9ybWF0cy5mb3JFYWNoKGYgPT4gZi5zZXRDb25maWcodGhpcy5jb25maWchKSk7XG4gICAgfVxuXG4gICAgYXBwZW5kUmVtaW5kZXIobGluZTogc3RyaW5nLCB0aW1lOiBEYXRlVGltZSk6IFJlbWluZGVySW5zZXJ0aW9uIHwgbnVsbCB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdHNbMF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0c1swXS5hcHBlbmRSZW1pbmRlcihsaW5lLCB0aW1lKTtcbiAgICB9XG5cbn1cbiIsICJpbXBvcnQgeyBEYXRlVGltZSwgREFURV9USU1FX0ZPUk1BVFRFUiB9IGZyb20gXCJtb2RlbC90aW1lXCI7XG5pbXBvcnQgdHlwZSB7IFRvZG8gfSBmcm9tIFwiLi9tYXJrZG93blwiO1xuaW1wb3J0IHsgUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXksIFJlbWluZGVyTW9kZWwsIFRvZG9CYXNlZFJlbWluZGVyRm9ybWF0IH0gZnJvbSBcIi4vcmVtaW5kZXItYmFzZVwiO1xuXG5jbGFzcyBEZWZhdWx0UmVtaW5kZXJNb2RlbCBpbXBsZW1lbnRzIFJlbWluZGVyTW9kZWwge1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSByZWdleHAgPSAvXig/PHRpdGxlMT4uKj8pXFwoQCg/PHRpbWU+Lis/KVxcKSg/PHRpdGxlMj4uKikkLztcblxuICAgIHN0YXRpYyBwYXJzZShsaW5lOiBzdHJpbmcsIGxpbmtEYXRlc1RvRGFpbHlOb3Rlcz86IGJvb2xlYW4pOiBEZWZhdWx0UmVtaW5kZXJNb2RlbCB8IG51bGwge1xuICAgICAgICBpZiAobGlua0RhdGVzVG9EYWlseU5vdGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIGxpbmtEYXRlc1RvRGFpbHlOb3RlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IERlZmF1bHRSZW1pbmRlck1vZGVsLnJlZ2V4cC5leGVjKGxpbmUpO1xuICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpdGxlMSA9IHJlc3VsdC5ncm91cHMhWyd0aXRsZTEnXSE7XG4gICAgICAgIGxldCB0aW1lID0gcmVzdWx0Lmdyb3VwcyFbJ3RpbWUnXTtcbiAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGl0bGUyID0gcmVzdWx0Lmdyb3VwcyFbJ3RpdGxlMiddITtcbiAgICAgICAgaWYgKGxpbmtEYXRlc1RvRGFpbHlOb3Rlcykge1xuICAgICAgICAgICAgdGltZSA9IHRpbWUucmVwbGFjZShcIltbXCIsIFwiXCIpO1xuICAgICAgICAgICAgdGltZSA9IHRpbWUucmVwbGFjZShcIl1dXCIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRGVmYXVsdFJlbWluZGVyTW9kZWwobGlua0RhdGVzVG9EYWlseU5vdGVzLCB0aXRsZTEsIHRpbWUsIHRpdGxlMik7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgbGlua0RhdGVzVG9EYWlseU5vdGVzOiBib29sZWFuLFxuICAgICAgICBwdWJsaWMgdGl0bGUxOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyB0aW1lOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyB0aXRsZTI6IHN0cmluZ1xuICAgICkgeyB9XG5cbiAgICBnZXRUaXRsZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy50aXRsZTEudHJpbSgpfSAke3RoaXMudGl0bGUyLnRyaW0oKX1gLnRyaW0oKTtcbiAgICB9XG4gICAgZ2V0VGltZSgpOiBEYXRlVGltZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gREFURV9USU1FX0ZPUk1BVFRFUi5wYXJzZSh0aGlzLnRpbWUpO1xuICAgIH1cbiAgICBzZXRUaW1lKHRpbWU6IERhdGVUaW1lKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGltZSA9IERBVEVfVElNRV9GT1JNQVRURVIudG9TdHJpbmcodGltZSk7XG4gICAgfVxuICAgIHNldFJhd1RpbWUocmF3VGltZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMudGltZSA9IHJhd1RpbWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXRFbmRPZlRpbWVUZXh0SW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9NYXJrZG93bigpLmxlbmd0aCAtIHRoaXMudGl0bGUyLmxlbmd0aDtcbiAgICB9XG4gICAgdG9NYXJrZG93bigpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYCR7dGhpcy50aXRsZTF9KEAke3RoaXMudGltZX0pJHt0aGlzLnRpdGxlMn1gO1xuICAgICAgICBpZiAoIXRoaXMubGlua0RhdGVzVG9EYWlseU5vdGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRpbWUgPSBEQVRFX1RJTUVfRk9STUFUVEVSLnBhcnNlKHRoaXMudGltZSk7XG4gICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGUgPSBEQVRFX1RJTUVfRk9STUFUVEVSLnRvU3RyaW5nKHRpbWUuY2xvbmUoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKGRhdGUsIGBbWyR7ZGF0ZX1dXWApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlZmF1bHRSZW1pbmRlckZvcm1hdCBleHRlbmRzIFRvZG9CYXNlZFJlbWluZGVyRm9ybWF0PERlZmF1bHRSZW1pbmRlck1vZGVsPiB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGluc3RhbmNlID0gbmV3IERlZmF1bHRSZW1pbmRlckZvcm1hdCgpO1xuXG4gICAgcGFyc2VSZW1pbmRlcih0b2RvOiBUb2RvKTogRGVmYXVsdFJlbWluZGVyTW9kZWwgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRSZW1pbmRlck1vZGVsLnBhcnNlKHRvZG8uYm9keSwgdGhpcy5saW5rRGF0ZXNUb0RhaWx5Tm90ZXMoKSk7XG4gICAgfVxuXG4gICAgbmV3UmVtaW5kZXIodGl0bGU6IHN0cmluZywgdGltZTogRGF0ZVRpbWUsIGluc2VydEF0PzogbnVtYmVyKTogRGVmYXVsdFJlbWluZGVyTW9kZWwge1xuICAgICAgICBsZXQgdGl0bGUxOiBzdHJpbmc7XG4gICAgICAgIGxldCB0aXRsZTI6IHN0cmluZztcbiAgICAgICAgaWYgKGluc2VydEF0ICE9IG51bGwpe1xuICAgICAgICAgICAgdGl0bGUxID0gdGl0bGUuc3Vic3RyaW5nKDAsIGluc2VydEF0KTtcbiAgICAgICAgICAgIHRpdGxlMiA9IHRpdGxlLnN1YnN0cmluZyhpbnNlcnRBdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZTEgPSB0aXRsZTtcbiAgICAgICAgICAgIHRpdGxlMiA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0UmVtaW5kZXJNb2RlbCh0aGlzLmxpbmtEYXRlc1RvRGFpbHlOb3RlcygpLCB0aXRsZTEsIHRpbWUudG9TdHJpbmcoKSwgdGl0bGUyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxpbmtEYXRlc1RvRGFpbHlOb3RlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmdldFBhcmFtZXRlcihSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleS5saW5rRGF0ZXNUb0RhaWx5Tm90ZXMpO1xuICAgIH1cbn1cblxuIiwgImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcIm1vZGVsL3RpbWVcIjtcbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xuaW1wb3J0IHR5cGUgeyBUb2RvIH0gZnJvbSBcIi4vbWFya2Rvd25cIjtcbmltcG9ydCB7IFJlbWluZGVyTW9kZWwsIFRvZG9CYXNlZFJlbWluZGVyRm9ybWF0IH0gZnJvbSBcIi4vcmVtaW5kZXItYmFzZVwiO1xuaW1wb3J0IHsgZXNjYXBlUmVnRXhwQ2hhcnMgfSBmcm9tIFwiLi91dGlsXCI7XG5cbnR5cGUgS2FuYmFuU2V0dGluZ1R5cGUgPSB7XG4gICAgZGF0ZVRyaWdnZXI6IHN0cmluZyxcbiAgICBkYXRlRm9ybWF0OiBzdHJpbmcsXG4gICAgdGltZVRyaWdnZXI6IHN0cmluZyxcbiAgICB0aW1lRm9ybWF0OiBzdHJpbmcsXG4gICAgbGlua0RhdGVUb0RhaWx5Tm90ZTogYm9vbGVhblxufVxuXG5jb25zdCBrYW5iYW5TZXR0aW5nID0gbmV3IChjbGFzcyBLYW5iYW5TZXR0aW5nIHtcblxuICAgIGdldCBkYXRlVHJpZ2dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwiZGF0ZS10cmlnZ2VyXCIsIFwiQFwiKTtcbiAgICB9XG5cbiAgICBnZXQgZGF0ZUZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwiZGF0ZS1mb3JtYXRcIiwgXCJZWVlZLU1NLUREXCIpO1xuICAgIH1cblxuICAgIGdldCB0aW1lVHJpZ2dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwidGltZS10cmlnZ2VyXCIsIFwiQEBcIik7XG4gICAgfVxuXG4gICAgZ2V0IHRpbWVGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChcInRpbWUtZm9ybWF0XCIsIFwiSEg6bW1cIik7XG4gICAgfVxuXG4gICAgZ2V0IGxpbmtEYXRlVG9EYWlseU5vdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChcImxpbmstZGF0ZS10by1kYWlseS1ub3RlXCIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldDxFPihrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBFKTogRSB7XG4gICAgICAgIGlmICghd2luZG93KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsdWdpbnMgPSAod2luZG93IGFzIGFueSk/LmFwcD8ucGx1Z2lucz8ucGx1Z2lucztcbiAgICAgICAgaWYgKCFwbHVnaW5zKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbXCJvYnNpZGlhbi1rYW5iYW5cIl07XG4gICAgICAgIGlmICghcGx1Z2luKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gcGx1Z2luLnNldHRpbmdzO1xuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGx1Z2luLnNldHRpbmdzW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59KTtcblxudHlwZSBLYW5iYW5TcGxpdFJlc3VsdCA9IHtcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIHRpbWU/OiBEYXRlVGltZVxufVxuXG5leHBvcnQgY2xhc3MgS2FuYmFuRGF0ZVRpbWVGb3JtYXQge1xuXG4gICAgc3RhdGljIGluc3RhbmNlOiBLYW5iYW5EYXRlVGltZUZvcm1hdCA9IG5ldyBLYW5iYW5EYXRlVGltZUZvcm1hdChrYW5iYW5TZXR0aW5nKTtcblxuICAgIHByaXZhdGUgZGF0ZVJlZ0V4cDogUmVnRXhwO1xuICAgIHByaXZhdGUgdGltZVJlZ0V4cDogUmVnRXhwO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXR0aW5nOiBLYW5iYW5TZXR0aW5nVHlwZSkge1xuICAgICAgICBsZXQgZGF0ZVJlZ0V4cFN0cjogc3RyaW5nO1xuICAgICAgICBpZiAoc2V0dGluZy5saW5rRGF0ZVRvRGFpbHlOb3RlKSB7XG4gICAgICAgICAgICBkYXRlUmVnRXhwU3RyID0gYCR7ZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5zZXR0aW5nLmRhdGVUcmlnZ2VyKX1cXFxcW1xcXFxbKD88ZGF0ZT4uKz8pXFxcXF1cXFxcXWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlUmVnRXhwU3RyID0gYCR7ZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5zZXR0aW5nLmRhdGVUcmlnZ2VyKX1cXFxceyg/PGRhdGU+Lis/KVxcXFx9YDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lUmVnRXhwU3RyID0gYCR7ZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5zZXR0aW5nLnRpbWVUcmlnZ2VyKX1cXFxceyg/PHRpbWU+Lis/KVxcXFx9YDtcbiAgICAgICAgdGhpcy5kYXRlUmVnRXhwID0gbmV3IFJlZ0V4cChkYXRlUmVnRXhwU3RyKTtcbiAgICAgICAgdGhpcy50aW1lUmVnRXhwID0gbmV3IFJlZ0V4cCh0aW1lUmVnRXhwU3RyKTtcbiAgICB9XG5cbiAgICBmb3JtYXQodGltZTogRGF0ZVRpbWUpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZGF0ZVBhcnQ6IHN0cmluZztcblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nLmxpbmtEYXRlVG9EYWlseU5vdGUpIHtcbiAgICAgICAgICAgIGRhdGVQYXJ0ID0gYCR7dGhpcy5zZXR0aW5nLmRhdGVUcmlnZ2VyfVtbJHt0aW1lLmZvcm1hdCh0aGlzLnNldHRpbmcuZGF0ZUZvcm1hdCl9XV1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZVBhcnQgPSBgJHt0aGlzLnNldHRpbmcuZGF0ZVRyaWdnZXJ9eyR7dGltZS5mb3JtYXQodGhpcy5zZXR0aW5nLmRhdGVGb3JtYXQpfX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aW1lLmhhc1RpbWVQYXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZVBhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYCR7ZGF0ZVBhcnR9ICR7dGhpcy5zZXR0aW5nLnRpbWVUcmlnZ2VyfXske3RpbWUuZm9ybWF0KHRoaXMuc2V0dGluZy50aW1lRm9ybWF0KX19YFxuICAgIH1cblxuICAgIHNwbGl0KHRleHQ6IHN0cmluZywgc3RyaWN0RGF0ZUZvcm1hdD86IGJvb2xlYW4pOiBLYW5iYW5TcGxpdFJlc3VsdCB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsVGV4dCA9IHRleHQ7XG4gICAgICAgIGxldCB0aXRsZTogc3RyaW5nO1xuICAgICAgICBsZXQgZGF0ZTogc3RyaW5nO1xuICAgICAgICBsZXQgdGltZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGRhdGVNYXRjaCA9IHRoaXMuZGF0ZVJlZ0V4cC5leGVjKHRleHQpO1xuICAgICAgICBpZiAoZGF0ZU1hdGNoKSB7XG4gICAgICAgICAgICBkYXRlID0gZGF0ZU1hdGNoLmdyb3VwcyFbXCJkYXRlXCJdITtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UodGhpcy5kYXRlUmVnRXhwLCBcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRpdGxlOiBvcmlnaW5hbFRleHQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRpbWVNYXRjaCA9IHRoaXMudGltZVJlZ0V4cC5leGVjKHRleHQpO1xuICAgICAgICBpZiAodGltZU1hdGNoKSB7XG4gICAgICAgICAgICB0aW1lID0gdGltZU1hdGNoLmdyb3VwcyFbXCJ0aW1lXCJdITtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UodGhpcy50aW1lUmVnRXhwLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aXRsZSA9IHRleHQudHJpbSgpO1xuXG4gICAgICAgIGxldCBwYXJzZWRUaW1lOiBEYXRlVGltZTtcbiAgICAgICAgY29uc3Qgc3RyaWN0ID0gc3RyaWN0RGF0ZUZvcm1hdCA/PyB0cnVlO1xuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgICAgcGFyc2VkVGltZSA9IG5ldyBEYXRlVGltZShtb21lbnQoYCR7ZGF0ZX0gJHt0aW1lfWAsIGAke3RoaXMuc2V0dGluZy5kYXRlRm9ybWF0fSAke3RoaXMuc2V0dGluZy50aW1lRm9ybWF0fWAsIHN0cmljdCksIHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWRUaW1lID0gbmV3IERhdGVUaW1lKG1vbWVudChkYXRlLCB0aGlzLnNldHRpbmcuZGF0ZUZvcm1hdCwgc3RyaWN0KSwgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZFRpbWUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4geyB0aXRsZSwgdGltZTogcGFyc2VkVGltZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHRpdGxlOiBvcmlnaW5hbFRleHQgfTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEthbmJhblJlbWluZGVyTW9kZWwgaW1wbGVtZW50cyBSZW1pbmRlck1vZGVsIHtcblxuICAgIHN0YXRpYyBwYXJzZShsaW5lOiBzdHJpbmcsIHN0cmljdERhdGVGb3JtYXQ/OiBib29sZWFuKTogS2FuYmFuUmVtaW5kZXJNb2RlbCB8IG51bGwge1xuICAgICAgICBjb25zdCBzcGxpdHRlZCA9IEthbmJhbkRhdGVUaW1lRm9ybWF0Lmluc3RhbmNlLnNwbGl0KGxpbmUsIHN0cmljdERhdGVGb3JtYXQpO1xuICAgICAgICBpZiAoc3BsaXR0ZWQudGltZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEthbmJhblJlbWluZGVyTW9kZWwoc3BsaXR0ZWQudGl0bGUsIHNwbGl0dGVkLnRpbWUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgdGl0bGU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHRpbWU6IERhdGVUaW1lLFxuICAgICkgeyB9XG5cbiAgICBnZXRUaXRsZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50aXRsZS50cmltKCk7XG4gICAgfVxuXG4gICAgZ2V0VGltZSgpOiBEYXRlVGltZSB8IG51bGwge1xuICAgICAgICBpZiAodGhpcy50aW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHNldFRpbWUodGltZTogRGF0ZVRpbWUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aW1lID0gdGltZTtcbiAgICB9XG5cbiAgICBzZXRSYXdUaW1lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0RW5kT2ZUaW1lVGV4dEluZGV4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvTWFya2Rvd24oKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdG9NYXJrZG93bigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy50aXRsZS50cmltKCl9ICR7S2FuYmFuRGF0ZVRpbWVGb3JtYXQuaW5zdGFuY2UuZm9ybWF0KHRoaXMudGltZSl9YDtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEthbmJhblJlbWluZGVyRm9ybWF0IGV4dGVuZHMgVG9kb0Jhc2VkUmVtaW5kZXJGb3JtYXQ8S2FuYmFuUmVtaW5kZXJNb2RlbD4ge1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBpbnN0YW5jZSA9IG5ldyBLYW5iYW5SZW1pbmRlckZvcm1hdCgpO1xuXG4gICAgcGFyc2VSZW1pbmRlcih0b2RvOiBUb2RvKTogS2FuYmFuUmVtaW5kZXJNb2RlbCB8IG51bGwge1xuICAgICAgICByZXR1cm4gS2FuYmFuUmVtaW5kZXJNb2RlbC5wYXJzZSh0b2RvLmJvZHksIHRoaXMuaXNTdHJpY3REYXRlRm9ybWF0KCkpO1xuICAgIH1cblxuICAgIG5ld1JlbWluZGVyKHRpdGxlOiBzdHJpbmcsIHRpbWU6IERhdGVUaW1lKTogS2FuYmFuUmVtaW5kZXJNb2RlbCB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBLYW5iYW5SZW1pbmRlck1vZGVsKHRpdGxlLCB0aW1lKTtcbiAgICAgICAgcGFyc2VkLnNldFRpbWUodGltZSk7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxufVxuXG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cENoYXJzKHRleHQ6IHN0cmluZykge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLCAnXFxcXCQmJyk7XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBNYXJrZG93bkRvY3VtZW50LCBUb2RvIH0gZnJvbSBcIm1vZGVsL2Zvcm1hdC9tYXJrZG93blwiO1xuaW1wb3J0IHsgRGF0ZVRpbWUsIERBVEVfVElNRV9GT1JNQVRURVIgfSBmcm9tIFwibW9kZWwvdGltZVwiO1xuaW1wb3J0IG1vbWVudCwgeyBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XG5pbXBvcnQgeyBSUnVsZSB9IGZyb20gXCJycnVsZVwiO1xuaW1wb3J0IHsgUmVtaW5kZXJFZGl0LCBSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleSwgUmVtaW5kZXJNb2RlbCwgVG9kb0Jhc2VkUmVtaW5kZXJGb3JtYXQgfSBmcm9tIFwiLi9yZW1pbmRlci1iYXNlXCI7XG5pbXBvcnQgeyBzcGxpdEJ5U3ltYm9sLCBTeW1ib2wsIFRva2VucyB9IGZyb20gXCIuL3NwbGl0dGVyXCI7XG5cbmZ1bmN0aW9uIHJlbW92ZVRhZ3ModGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC8jXFx3Ky9nLCBcIlwiKTtcbn1cbmV4cG9ydCBjbGFzcyBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwgaW1wbGVtZW50cyBSZW1pbmRlck1vZGVsIHtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGRhdGVGb3JtYXQgPSBcIllZWVktTU0tRERcIjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBzeW1ib2xEdWVEYXRlID0gU3ltYm9sLm9mQ2hhcnMoWy4uLlwiXHVEODNEXHVEQ0M1XHVEODNEXHVEQ0M2XHVEODNEXHVEREQzXCJdKTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBzeW1ib2xEb25lRGF0ZSA9IFN5bWJvbC5vZkNoYXIoXCJcdTI3MDVcIik7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc3ltYm9sUmVjdXJyZW5jZSA9IFN5bWJvbC5vZkNoYXIoXCJcdUQ4M0RcdUREMDFcIik7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc3ltYm9sUmVtaW5kZXIgPSBTeW1ib2wub2ZDaGFyKFwiXHUyM0YwXCIpO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHN5bWJvbFNjaGVkdWxlZCA9IFN5bWJvbC5vZkNoYXIoXCJcdTIzRjNcIik7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc3ltYm9sU3RhcnQgPSBTeW1ib2wub2ZDaGFyKFwiXHVEODNEXHVERUVCXCIpO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFsbFN5bWJvbHMgPSBbXG4gICAgICAgIFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xEdWVEYXRlLFxuICAgICAgICBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sRG9uZURhdGUsXG4gICAgICAgIFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xSZWN1cnJlbmNlLFxuICAgICAgICBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sUmVtaW5kZXIsXG4gICAgICAgIFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xTdGFydCxcbiAgICAgICAgVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsLnN5bWJvbFNjaGVkdWxlZCxcbiAgICBdO1xuXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShsaW5lOiBzdHJpbmcsIHVzZUN1c3RvbUVtb2ppPzogYm9vbGVhbiwgcmVtb3ZlVGFncz86IGJvb2xlYW4sIHN0cmljdERhdGVGb3JtYXQ/OiBib29sZWFuKTogVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwoXG4gICAgICAgICAgICB1c2VDdXN0b21FbW9qaSA/PyBmYWxzZSxcbiAgICAgICAgICAgIHJlbW92ZVRhZ3MgPz8gZmFsc2UsXG4gICAgICAgICAgICBzdHJpY3REYXRlRm9ybWF0ID8/IHRydWUsXG4gICAgICAgICAgICBuZXcgVG9rZW5zKHNwbGl0QnlTeW1ib2wobGluZSwgdGhpcy5hbGxTeW1ib2xzKSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgdXNlQ3VzdG9tRW1vamk6IGJvb2xlYW4sXG4gICAgICAgIHByaXZhdGUgcmVtb3ZlVGFnczogYm9vbGVhbixcbiAgICAgICAgcHJpdmF0ZSBzdHJpY3REYXRlRm9ybWF0OiBib29sZWFuLFxuICAgICAgICBwcml2YXRlIHRva2VuczogVG9rZW5zKSB7XG4gICAgfVxuXG4gICAgZ2V0VGl0bGUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGxldCB0aXRsZSA9IHRoaXMudG9rZW5zLmdldFRva2VuVGV4dChcIlwiLCB0cnVlKTtcbiAgICAgICAgaWYgKHRpdGxlICE9IG51bGwgJiYgdGhpcy5yZW1vdmVUYWdzKSB7XG4gICAgICAgICAgICB0aXRsZSA9IHJlbW92ZVRhZ3ModGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aXRsZTtcbiAgICB9XG4gICAgZ2V0VGltZSgpOiBEYXRlVGltZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRlKHRoaXMuZ2V0UmVtaW5kZXJTeW1ib2woKSk7XG4gICAgfVxuICAgIHNldFRpbWUodGltZTogRGF0ZVRpbWUsIGluc2VydEF0PzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnVzZUN1c3RvbUVtb2ppKSB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGUodGhpcy5nZXRSZW1pbmRlclN5bWJvbCgpLCB0aW1lLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0ZSh0aGlzLmdldFJlbWluZGVyU3ltYm9sKCksIHRpbWUsIGluc2VydEF0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXREdWVEYXRlKCk6IERhdGVUaW1lIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGUoVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsLnN5bWJvbER1ZURhdGUpO1xuICAgIH1cbiAgICBzZXREdWVEYXRlKHRpbWU6IERhdGVUaW1lKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0RGF0ZShUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sRHVlRGF0ZSwgdGltZSk7XG4gICAgfVxuICAgIHNldFJhd1RpbWUocmF3VGltZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMuc2V0RGF0ZSh0aGlzLmdldFJlbWluZGVyU3ltYm9sKCksIHJhd1RpbWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBnZXRSZW1pbmRlclN5bWJvbCgpOiBTeW1ib2wge1xuICAgICAgICBpZiAodGhpcy51c2VDdXN0b21FbW9qaSkge1xuICAgICAgICAgICAgcmV0dXJuIFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xSZW1pbmRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sRHVlRGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEVuZE9mVGltZVRleHRJbmRleCgpOiBudW1iZXIge1xuICAgICAgICAvLyBnZXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nIGluZGV4IG9mIGR1ZSBkYXRlIG9yIHJlbWluZGVyIGRhdGVcbiAgICAgICAgbGV0IHRpbWVTeW1ib2wgPSBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sRHVlRGF0ZTtcbiAgICAgICAgaWYgKHRoaXMudXNlQ3VzdG9tRW1vamkpe1xuICAgICAgICAgICAgdGltZVN5bWJvbCA9IFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xSZW1pbmRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5zLnJhbmdlT2ZTeW1ib2wodGltZVN5bWJvbCk7XG4gICAgICAgIGlmICh0b2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4uZW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRvTWFya2Rvd24oKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdG9NYXJrZG93bigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlbnMuam9pbigpO1xuICAgIH1cblxuICAgIHNldFRpdGxlKGRlc2NyaXB0aW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50b2tlbnMuc2V0VG9rZW5UZXh0KFwiXCIsIGRlc2NyaXB0aW9uLCB0cnVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBnZXREb25lRGF0ZSgpOiBEYXRlVGltZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRlKFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xEb25lRGF0ZSk7XG4gICAgfVxuXG4gICAgc2V0RG9uZURhdGUodGltZTogRGF0ZVRpbWUgfCBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zZXREYXRlKFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5zeW1ib2xEb25lRGF0ZSwgdGltZSk7XG4gICAgfVxuXG4gICAgZ2V0UmVjdXJyZW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5zLmdldFRva2VuVGV4dChUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sUmVjdXJyZW5jZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgY2xvbmUoKTogVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsIHtcbiAgICAgICAgcmV0dXJuIFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5wYXJzZSh0aGlzLnRvTWFya2Rvd24oKSwgdGhpcy51c2VDdXN0b21FbW9qaSwgdGhpcy5yZW1vdmVUYWdzLCB0aGlzLnN0cmljdERhdGVGb3JtYXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RGF0ZShzeW1ib2w6IFN5bWJvbCk6IERhdGVUaW1lIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGRhdGVUZXh0ID0gdGhpcy50b2tlbnMuZ2V0VG9rZW5UZXh0KHN5bWJvbCwgdHJ1ZSk7XG4gICAgICAgIGlmIChkYXRlVGV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN5bWJvbCA9PT0gVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsLnN5bWJvbFJlbWluZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gREFURV9USU1FX0ZPUk1BVFRFUi5wYXJzZShkYXRlVGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbW9tZW50KGRhdGVUZXh0LCBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuZGF0ZUZvcm1hdCwgdGhpcy5zdHJpY3REYXRlRm9ybWF0KTtcbiAgICAgICAgICAgIGlmICghZGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXREYXRlKHN5bWJvbDogU3ltYm9sLCB0aW1lOiBEYXRlVGltZSB8IHN0cmluZyB8IHVuZGVmaW5lZCwgaW5zZXJ0QXQ/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50b2tlbnMucmVtb3ZlVG9rZW4oc3ltYm9sKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGltZVN0cjogc3RyaW5nO1xuICAgICAgICBpZiAodGltZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgICAgICAgICBpZiAoc3ltYm9sID09PSBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwuc3ltYm9sUmVtaW5kZXIpIHtcbiAgICAgICAgICAgICAgICB0aW1lU3RyID0gREFURV9USU1FX0ZPUk1BVFRFUi50b1N0cmluZyh0aW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGltZVN0ciA9IHRpbWUuZm9ybWF0KFRhc2tzUGx1Z2luUmVtaW5kZXJNb2RlbC5kYXRlRm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVTdHIgPSB0aW1lO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9rZW5zLnNldFRva2VuVGV4dChzeW1ib2wsIHRpbWVTdHIsIHRydWUsIHRydWUsIHRoaXMuc2hvdWxkU3BsaXRCZXR3ZWVuU3ltYm9sQW5kVGV4dCgpLCBpbnNlcnRBdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG91bGRTcGxpdEJldHdlZW5TeW1ib2xBbmRUZXh0KCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgd2l0aFNwYWNlID0gMDtcbiAgICAgICAgbGV0IG5vU3BhY2UgPSAwO1xuICAgICAgICB0aGlzLnRva2Vucy5mb3JFYWNoVG9rZW5zKHRva2VuID0+IHtcbiAgICAgICAgICAgIGlmICh0b2tlbi5zeW1ib2wgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLnRleHQubWF0Y2goL15cXHMuKiQvKSkge1xuICAgICAgICAgICAgICAgIHdpdGhTcGFjZSArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub1NwYWNlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGlmICh3aXRoU3BhY2UgPiBub1NwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3aXRoU3BhY2UgPCBub1NwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhc2tzUGx1Z2luRm9ybWF0IGV4dGVuZHMgVG9kb0Jhc2VkUmVtaW5kZXJGb3JtYXQ8VGFza3NQbHVnaW5SZW1pbmRlck1vZGVsPiB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGluc3RhbmNlID0gbmV3IFRhc2tzUGx1Z2luRm9ybWF0KCk7XG5cbiAgICBwYXJzZVJlbWluZGVyKHRvZG86IFRvZG8pOiBUYXNrc1BsdWdpblJlbWluZGVyTW9kZWwgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsLnBhcnNlKHRvZG8uYm9keSwgdGhpcy51c2VDdXN0b21FbW9qaSgpLCB0aGlzLnJlbW92ZVRhZ3NFbmFibGVkKCksIHRoaXMuaXNTdHJpY3REYXRlRm9ybWF0KCkpO1xuICAgICAgICBpZiAodGhpcy51c2VDdXN0b21FbW9qaSgpICYmIHBhcnNlZC5nZXREdWVEYXRlKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZVRhZ3NFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZ2V0UGFyYW1ldGVyKFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyS2V5LnJlbW92ZVRhZ3NGb3JUYXNrc1BsdWdpbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1c2VDdXN0b21FbW9qaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmdldFBhcmFtZXRlcihSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleS51c2VDdXN0b21FbW9qaUZvclRhc2tzUGx1Z2luKTtcbiAgICB9XG5cbiAgICBvdmVycmlkZSBtb2RpZnlSZW1pbmRlcihkb2M6IE1hcmtkb3duRG9jdW1lbnQsIHRvZG86IFRvZG8sIHBhcnNlZDogVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsLCBlZGl0OiBSZW1pbmRlckVkaXQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFzdXBlci5tb2RpZnlSZW1pbmRlcihkb2MsIHRvZG8sIHBhcnNlZCwgZWRpdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWRpdC5jaGVja2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChlZGl0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWN1cnJlbmNlID0gcGFyc2VkLmdldFJlY3VycmVuY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjdXJyZW5jZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSZW1pbmRlclRvZG8gPSB0b2RvLmNsb25lKCkhO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0UmVtaW5kZXIgPSBwYXJzZWQuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHVlRGF0ZSA9IHBhcnNlZC5nZXREdWVEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkdWVEYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZUN1c3RvbUVtb2ppKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBwYXJzZWQuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUaW1lOiBEYXRlIHwgdW5kZWZpbmVkID0gdGhpcy5uZXh0RGF0ZShyZWN1cnJlbmNlLCB0aW1lLm1vbWVudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHREdWVEYXRlOiBEYXRlIHwgdW5kZWZpbmVkID0gdGhpcy5uZXh0RGF0ZShyZWN1cnJlbmNlLCBkdWVEYXRlLm1vbWVudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VGltZSA9PSBudWxsIHx8IG5leHREdWVEYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0UmVtaW5kZXIuc2V0VGltZShuZXcgRGF0ZVRpbWUobW9tZW50KG5leHRUaW1lKSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFJlbWluZGVyLnNldER1ZURhdGUobmV3IERhdGVUaW1lKG1vbWVudChuZXh0RHVlRGF0ZSksIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQ6IERhdGUgfCB1bmRlZmluZWQgPSB0aGlzLm5leHREYXRlKHJlY3VycmVuY2UsIGR1ZURhdGUubW9tZW50KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHREdWVEYXRlID0gbmV3IERhdGVUaW1lKG1vbWVudChuZXh0KSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0UmVtaW5kZXIuc2V0VGltZShuZXh0RHVlRGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV4dFJlbWluZGVyVG9kby5ib2R5ID0gbmV4dFJlbWluZGVyLnRvTWFya2Rvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFJlbWluZGVyVG9kby5zZXRDaGVja2VkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jLmluc2VydFRvZG8odG9kby5saW5lSW5kZXgsIG5leHRSZW1pbmRlclRvZG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZWQuc2V0RG9uZURhdGUodGhpcy5jb25maWcuZ2V0UGFyYW1ldGVyKFJlbWluZGVyRm9ybWF0UGFyYW1ldGVyS2V5Lm5vdykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQuc2V0RG9uZURhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5leHREYXRlKHJlY3VycmVuY2U6IHN0cmluZywgZHRTdGFydDogTW9tZW50KTogRGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHJydWxlT3B0aW9ucyA9IFJSdWxlLnBhcnNlVGV4dChyZWN1cnJlbmNlKTtcbiAgICAgICAgaWYgKCFycnVsZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b2RheSA9IHRoaXMuY29uZmlnLmdldFBhcmFtZXRlcihSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleS5ub3cpLm1vbWVudCgpO1xuICAgICAgICB0b2RheS5zZXQoXCJob3VyXCIsIGR0U3RhcnQuZ2V0KFwiaG91clwiKSk7XG4gICAgICAgIHRvZGF5LnNldChcIm1pbnV0ZVwiLCBkdFN0YXJ0LmdldChcIm1pbnV0ZVwiKSk7XG4gICAgICAgIHRvZGF5LnNldChcInNlY29uZFwiLCBkdFN0YXJ0LmdldChcInNlY29uZFwiKSk7XG4gICAgICAgIHRvZGF5LnNldChcIm1pbGxpc2Vjb25kXCIsIGR0U3RhcnQuZ2V0KFwibWlsbGlzZWNvbmRcIikpO1xuICAgICAgICBpZiAodG9kYXkuaXNBZnRlcihkdFN0YXJ0KSkge1xuICAgICAgICAgICAgZHRTdGFydCA9IHRvZGF5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xvbmUgZHRTdGFydCBiZWNhdXNlIGR0U3RhcnQgd2lsbCBiZSBtb2RpZmllZCBieSB1dGMoKSBjYWxsLlxuICAgICAgICBjb25zdCBiYXNlID0gZHRTdGFydC5jbG9uZSgpO1xuXG4gICAgICAgIC8vIHByb2Nlc3MgcnJ1bGVcbiAgICAgICAgcnJ1bGVPcHRpb25zLmR0c3RhcnQgPSBkdFN0YXJ0XG4gICAgICAgICAgICAudXRjKHRydWUpXG4gICAgICAgICAgICAudG9EYXRlKCk7XG4gICAgICAgIGNvbnN0IHJydWxlID0gbmV3IFJSdWxlKHJydWxlT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJkYXRlID0gcnJ1bGUuYWZ0ZXIoZHRTdGFydC50b0RhdGUoKSwgZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gYXBwbHkgcnJ1bGUgdG8gYGJhc2VgXG4gICAgICAgIGNvbnN0IGRpZmYgPSByZGF0ZS5nZXRUaW1lKCkgLSBycnVsZU9wdGlvbnMuZHRzdGFydC5nZXRUaW1lKClcbiAgICAgICAgYmFzZS5hZGQoZGlmZiwgXCJtaWxsaXNlY29uZFwiKTtcbiAgICAgICAgcmV0dXJuIGJhc2UudG9EYXRlKCk7XG4gICAgfVxuXG4gICAgbmV3UmVtaW5kZXIodGl0bGU6IHN0cmluZywgdGltZTogRGF0ZVRpbWUsIGluc2VydEF0PzogbnVtYmVyKTogVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gVGFza3NQbHVnaW5SZW1pbmRlck1vZGVsLnBhcnNlKHRpdGxlLCB0aGlzLnVzZUN1c3RvbUVtb2ppKCksIHRoaXMucmVtb3ZlVGFnc0VuYWJsZWQoKSwgdGhpcy5pc1N0cmljdERhdGVGb3JtYXQoKSk7XG4gICAgICAgIHBhcnNlZC5zZXRUaW1lKHRpbWUsIGluc2VydEF0KTtcbiAgICAgICAgaWYgKHRoaXMudXNlQ3VzdG9tRW1vamkoKSAmJiBwYXJzZWQuZ2V0RHVlRGF0ZSgpID09IG51bGwpIHtcbiAgICAgICAgICAgIHBhcnNlZC5zZXREdWVEYXRlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5zZXRUaXRsZSh0aXRsZSk7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuXG59XG4iLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCAiaW1wb3J0IHRzbGliIGZyb20gJy4uL3RzbGliLmpzJztcclxuY29uc3Qge1xyXG4gICAgX19leHRlbmRzLFxyXG4gICAgX19hc3NpZ24sXHJcbiAgICBfX3Jlc3QsXHJcbiAgICBfX2RlY29yYXRlLFxyXG4gICAgX19wYXJhbSxcclxuICAgIF9fbWV0YWRhdGEsXHJcbiAgICBfX2F3YWl0ZXIsXHJcbiAgICBfX2dlbmVyYXRvcixcclxuICAgIF9fZXhwb3J0U3RhcixcclxuICAgIF9fY3JlYXRlQmluZGluZyxcclxuICAgIF9fdmFsdWVzLFxyXG4gICAgX19yZWFkLFxyXG4gICAgX19zcHJlYWQsXHJcbiAgICBfX3NwcmVhZEFycmF5cyxcclxuICAgIF9fc3ByZWFkQXJyYXksXHJcbiAgICBfX2F3YWl0LFxyXG4gICAgX19hc3luY0dlbmVyYXRvcixcclxuICAgIF9fYXN5bmNEZWxlZ2F0b3IsXHJcbiAgICBfX2FzeW5jVmFsdWVzLFxyXG4gICAgX19tYWtlVGVtcGxhdGVPYmplY3QsXHJcbiAgICBfX2ltcG9ydFN0YXIsXHJcbiAgICBfX2ltcG9ydERlZmF1bHQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRJbixcclxufSA9IHRzbGliO1xyXG5leHBvcnQge1xyXG4gICAgX19leHRlbmRzLFxyXG4gICAgX19hc3NpZ24sXHJcbiAgICBfX3Jlc3QsXHJcbiAgICBfX2RlY29yYXRlLFxyXG4gICAgX19wYXJhbSxcclxuICAgIF9fbWV0YWRhdGEsXHJcbiAgICBfX2F3YWl0ZXIsXHJcbiAgICBfX2dlbmVyYXRvcixcclxuICAgIF9fZXhwb3J0U3RhcixcclxuICAgIF9fY3JlYXRlQmluZGluZyxcclxuICAgIF9fdmFsdWVzLFxyXG4gICAgX19yZWFkLFxyXG4gICAgX19zcHJlYWQsXHJcbiAgICBfX3NwcmVhZEFycmF5cyxcclxuICAgIF9fc3ByZWFkQXJyYXksXHJcbiAgICBfX2F3YWl0LFxyXG4gICAgX19hc3luY0dlbmVyYXRvcixcclxuICAgIF9fYXN5bmNEZWxlZ2F0b3IsXHJcbiAgICBfX2FzeW5jVmFsdWVzLFxyXG4gICAgX19tYWtlVGVtcGxhdGVPYmplY3QsXHJcbiAgICBfX2ltcG9ydFN0YXIsXHJcbiAgICBfX2ltcG9ydERlZmF1bHQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRJbixcclxufTtcclxuIiwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgImV4cG9ydCB0eXBlIFRva2VuID0ge1xuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIHRleHQ6IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgU3ltYm9sIHtcblxuICAgIHN0YXRpYyBvZkNoYXIoY2g6IHN0cmluZyk6IFN5bWJvbCB7XG4gICAgICAgIHJldHVybiBuZXcgU3ltYm9sKGNoLCB0ZXh0ID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0ID09PSBjaDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG9mQ2hhcnMoY2g6IEFycmF5PHN0cmluZz4pOiBTeW1ib2wge1xuICAgICAgICBpZiAoY2gubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBcImVtcHR5IHN5bWJvbFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaFswXSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBcImNoIG11c3RuJ3QgYmUgbnVsbFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9mQ2hhcihjaFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTeW1ib2woY2hbMF0sIHRleHQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNoLmZpbHRlcihjID0+IHRleHQgPT09IGMpLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IocHVibGljIHByaW1hcnk6IHN0cmluZywgcHJpdmF0ZSBmdW5jOiAodGV4dDogc3RyaW5nKSA9PiBib29sZWFuKSB7IH1cblxuICAgIGlzU3ltYm9sKHRleHQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jKHRleHQpO1xuICAgIH07XG59XG5cbmV4cG9ydCBjbGFzcyBUb2tlbnMge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9rZW5zOiBBcnJheTxUb2tlbj4pIHsgfVxuXG4gICAgcHVibGljIHNldFRva2VuVGV4dChcbiAgICAgICAgc3ltYm9sOiBTeW1ib2wgfCBzdHJpbmcsXG4gICAgICAgIHRleHQ6IHN0cmluZyxcbiAgICAgICAga2VlcFNwYWNlID0gZmFsc2UsXG4gICAgICAgIGNyZWF0ZSA9IGZhbHNlLFxuICAgICAgICBzZXBhcmF0ZVN5bWJvbEFuZFRleHQgPSBmYWxzZSxcbiAgICAgICAgaW5zZXJ0QXQ/OiBudW1iZXIpOiBUb2tlbiB8IG51bGwge1xuICAgICAgICBsZXQgdG9rZW4gPSB0aGlzLmdldFRva2VuKHN5bWJvbCk7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFwcGVuZCBuZXcgdG9rZW5cbiAgICAgICAgICAgIGlmIChzeW1ib2wgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHsgc3ltYm9sOiBzeW1ib2wucHJpbWFyeSwgdGV4dCB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHsgc3ltYm9sLCB0ZXh0IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VwYXJhdGVTeW1ib2xBbmRUZXh0ICYmIHRva2VuLnN5bWJvbCAhPT0gJycgJiYgIXRva2VuLnRleHQuc3RhcnRzV2l0aChcIiBcIikpIHtcbiAgICAgICAgICAgICAgICB0b2tlbi50ZXh0ID0gJyAnICsgdG9rZW4udGV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0VG9rZW4gPSB0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGggLSAxXSE7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVG9rZW5FbmRzV2l0aFNwYWNlKGxhc3RUb2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGFzdCB0b2tlbiBkb2Vzbid0IGVuZCB3aXRoIHNwYWNlLiAgQXBwZW5kIHNwYWNlIHRvIGxhc3QgdG9rZW4uXG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICcgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5zZXJ0QXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwXG4gICAgICAgICAgICAgICAgbGV0IGluc2VydFRva2VuSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBsZXQgdG9rZW5JbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMudG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpcnN0IHRva2VuIGlzIHRoZSB0aXRsZSBvZiB0aGUgcmVtaW5kZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHNob3VsZG4ndCBpbnNlcnQgYmVmb3JlIHRoZSB0aXRsZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gaW5kZXggKyB0LnN5bWJvbC5sZW5ndGggKyB0LnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5JbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBpbnNlcnRBdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VG9rZW5JbmRleCA9IHRva2VuSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuSW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGluc2VydFRva2VuSW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbnMuc3BsaWNlKGluc2VydFRva2VuSW5kZXgsIDAsIHRva2VuKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0VG9rZW5JbmRleCA8IHRoaXMudG9rZW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnRleHQgPSB0b2tlbi50ZXh0ICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXBsYWNlVG9rZW5UZXh0KHRva2VuLCB0ZXh0LCBrZWVwU3BhY2UpO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgcHVibGljIGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5zLmxlbmd0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlcGxhY2VUb2tlblRleHQodG9rZW46IFRva2VuLCB0ZXh0OiBzdHJpbmcsIGtlZXBTcGFjZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICgha2VlcFNwYWNlKSB7XG4gICAgICAgICAgICB0b2tlbi50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRva2VuLnRleHQgPSB0b2tlbi50ZXh0LnJlcGxhY2UoL14oXFxzKikuKj8oXFxzKikkLywgYCQxJHt0ZXh0fSQyYCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1Rva2VuRW5kc1dpdGhTcGFjZSh0b2tlbjogVG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLnRleHQubWF0Y2goL14uKlxccyQvKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VG9rZW4oc3ltYm9sOiBTeW1ib2wgfCBzdHJpbmcpOiBUb2tlbiB8IG51bGwge1xuICAgICAgICBmb3IgKGxldCB0b2tlbiBvZiB0aGlzLnRva2Vucykge1xuICAgICAgICAgICAgaWYgKHN5bWJvbCBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICAgICAgICAgIGlmIChzeW1ib2wuaXNTeW1ib2wodG9rZW4uc3ltYm9sKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ltYm9sID09PSB0b2tlbi5zeW1ib2wpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VG9rZW5UZXh0KHN5bWJvbDogU3ltYm9sIHwgc3RyaW5nLCByZW1vdmVTcGFjZSA9IGZhbHNlKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5nZXRUb2tlbihzeW1ib2wpO1xuICAgICAgICBpZiAodG9rZW4gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVtb3ZlU3BhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbi50ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbi50ZXh0LnJlcGxhY2UoL15cXHMqKC4qPylcXHMqJC8sIGAkMWApO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVUb2tlbihzeW1ib2w6IFN5bWJvbCkge1xuICAgICAgICB0aGlzLnRva2VucyA9IHRoaXMudG9rZW5zLmZpbHRlcih0b2tlbiA9PiAhc3ltYm9sLmlzU3ltYm9sKHRva2VuLnN5bWJvbCkpO1xuICAgIH1cblxuICAgIGZvckVhY2hUb2tlbnMoY29uc3VtZXI6ICh0b2tlbjogVG9rZW4pID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy50b2tlbnMuZm9yRWFjaChjb25zdW1lcik7XG4gICAgfVxuXG4gICAgcHVibGljIHJhbmdlT2ZTeW1ib2woc3ltYm9sOiBTeW1ib2wpOiB7c3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXJ9IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IGluZGV4ID0gMFxuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRoaXMudG9rZW5zKXtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGluZGV4ICsgdG9rZW4uc3ltYm9sLmxlbmd0aCArIHRva2VuLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHN5bWJvbC5pc1N5bWJvbCh0b2tlbi5zeW1ib2wpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmRleCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVibGljIGpvaW4oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5zLm1hcCh0ID0+IHQuc3ltYm9sICsgdC50ZXh0KS5qb2luKFwiXCIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QnlTeW1ib2wobGluZTogc3RyaW5nLCBzeW1ib2xzOiBBcnJheTxTeW1ib2w+KTogQXJyYXk8VG9rZW4+IHtcbiAgICBjb25zdCBjaGFycyA9IFsuLi5saW5lXTtcbiAgICBsZXQgdGV4dDogc3RyaW5nID0gXCJcIjtcbiAgICBsZXQgY3VycmVudFRva2VuOiBUb2tlbiB8IG51bGwgPSBudWxsO1xuICAgIGNvbnN0IHNwbGl0dGVkOiBBcnJheTxUb2tlbj4gPSBbXTtcblxuICAgIGNvbnN0IGZpbGxQcmV2aW91c1Rva2VuID0gKCkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudFRva2VuID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBwcmV2aW91cyB0b2tlblxuICAgICAgICAgICAgc3BsaXR0ZWQucHVzaCh7IHN5bWJvbDogJycsIHRleHQgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwcmV2aW91cyB0b2tlblxuICAgICAgICAgICAgY3VycmVudFRva2VuLnRleHQgPSB0ZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYXJzLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGxldCBpc1N5bWJvbCA9IHN5bWJvbHMuZmlsdGVyKHMgPT4gcy5pc1N5bWJvbChjKSkubGVuZ3RoID4gMDtcbiAgICAgICAgaWYgKGlzU3ltYm9sKSB7XG4gICAgICAgICAgICBmaWxsUHJldmlvdXNUb2tlbigpO1xuXG4gICAgICAgICAgICAvLyBuZXcgdG9rZW5cbiAgICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IHsgc3ltYm9sOiBjLCB0ZXh0OiAnJyB9O1xuICAgICAgICAgICAgc3BsaXR0ZWQucHVzaChjdXJyZW50VG9rZW4pO1xuICAgICAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dCArPSBjO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBmaWxsUHJldmlvdXNUb2tlbigpO1xuICAgIH1cbiAgICByZXR1cm4gc3BsaXR0ZWQ7XG5cbn0iLCAiaW1wb3J0IHR5cGUgeyBSZW1pbmRlciB9IGZyb20gXCJtb2RlbC9yZW1pbmRlclwiO1xuaW1wb3J0IHsgTWFya2Rvd25Eb2N1bWVudCB9IGZyb20gXCIuL21hcmtkb3duXCI7XG5pbXBvcnQgdHlwZSB7IFJlbWluZGVyRWRpdCwgUmVtaW5kZXJGb3JtYXQsIFJlbWluZGVyRm9ybWF0Q29uZmlnIH0gZnJvbSBcIi4vcmVtaW5kZXItYmFzZVwiO1xuaW1wb3J0IHsgQ29tcG9zaXRlUmVtaW5kZXJGb3JtYXQgfSBmcm9tIFwiLi9yZW1pbmRlci1iYXNlXCI7XG5pbXBvcnQgeyBEZWZhdWx0UmVtaW5kZXJGb3JtYXQgfSBmcm9tIFwiLi9yZW1pbmRlci1kZWZhdWx0XCI7XG5pbXBvcnQgeyBLYW5iYW5SZW1pbmRlckZvcm1hdCB9IGZyb20gXCIuL3JlbWluZGVyLWthbmJhbi1wbHVnaW5cIjtcbmltcG9ydCB7IFRhc2tzUGx1Z2luRm9ybWF0IH0gZnJvbSBcIi4vcmVtaW5kZXItdGFza3MtcGx1Z2luXCI7XG5cbmNvbnN0IFJFTUlOREVSX0ZPUk1BVCA9IG5ldyBDb21wb3NpdGVSZW1pbmRlckZvcm1hdCgpO1xuUkVNSU5ERVJfRk9STUFULnJlc2V0Rm9ybWF0KFtEZWZhdWx0UmVtaW5kZXJGb3JtYXQuaW5zdGFuY2VdKTtcblxuZXhwb3J0IGNsYXNzIFJlbWluZGVyRm9ybWF0VHlwZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZywgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmcsIHB1YmxpYyBleGFtcGxlOiBzdHJpbmcsIHB1YmxpYyBmb3JtYXQ6IFJlbWluZGVyRm9ybWF0LCBwdWJsaWMgZGVmYXVsdEVuYWJsZWQ6IGJvb2xlYW4pIHsgfTtcbn1cblxuZXhwb3J0IHR5cGUge1xuICAgIFJlbWluZGVyRm9ybWF0LFxuICAgIFJlbWluZGVyRWRpdCxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVtaW5kZXIoZG9jOiBNYXJrZG93bkRvY3VtZW50KTogQXJyYXk8UmVtaW5kZXI+IHtcbiAgICByZXR1cm4gUkVNSU5ERVJfRk9STUFULnBhcnNlKGRvYyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtb2RpZnlSZW1pbmRlcihkb2M6IE1hcmtkb3duRG9jdW1lbnQsIHJlbWluZGVyOiBSZW1pbmRlciwgZWRpdDogUmVtaW5kZXJFZGl0KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIFJFTUlOREVSX0ZPUk1BVC5tb2RpZnkoZG9jLCByZW1pbmRlciwgZWRpdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VSZW1pbmRlckZvcm1hdChmb3JtYXRUeXBlczogQXJyYXk8UmVtaW5kZXJGb3JtYXRUeXBlPikge1xuICAgIGlmIChmb3JtYXRUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgUkVNSU5ERVJfRk9STUFULnJlc2V0Rm9ybWF0KFtEZWZhdWx0UmVtaW5kZXJGb3JtYXQuaW5zdGFuY2VdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBSRU1JTkRFUl9GT1JNQVQucmVzZXRGb3JtYXQoZm9ybWF0VHlwZXMubWFwKGYgPT4gZi5mb3JtYXQpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZW1pbmRlckZvcm1hdENvbmZpZyhjb25maWc6IFJlbWluZGVyRm9ybWF0Q29uZmlnKSB7XG4gICAgUkVNSU5ERVJfRk9STUFULnNldENvbmZpZyhjb25maWcpO1xufVxuXG5leHBvcnQgY29uc3QgcmVtaW5kZXJQbHVnaW5SZW1pbmRlckZvcm1hdCA9IG5ldyBSZW1pbmRlckZvcm1hdFR5cGUoXCJSZW1pbmRlclBsdWdpblJlbWluZGVyRm9ybWF0XCIsIFwiUmVtaW5kZXIgcGx1Z2luIGZvcm1hdFwiLCBcIihAMjAyMS0wOS0wOClcIiwgRGVmYXVsdFJlbWluZGVyRm9ybWF0Lmluc3RhbmNlLCB0cnVlKTtcbmV4cG9ydCBjb25zdCB0YXNrc1BsdWdpblJlbWluZGVyRm9ybWF0ID0gbmV3IFJlbWluZGVyRm9ybWF0VHlwZShcIlRhc2tzUGx1Z2luUmVtaW5kZXJGb3JtYXRcIiwgXCJUYXNrcyBwbHVnaW4gZm9ybWF0XCIsIFwiXHVEODNEXHVEQ0M1IDIwMjEtMDktMDhcIiwgVGFza3NQbHVnaW5Gb3JtYXQuaW5zdGFuY2UsIGZhbHNlKTtcbmV4cG9ydCBjb25zdCBrYW5iYW5QbHVnaW5SZW1pbmRlckZvcm1hdCA9IG5ldyBSZW1pbmRlckZvcm1hdFR5cGUoXCJLYW5iYW5QbHVnaW5SZW1pbmRlckZvcm1hdFwiLCBcIkthbmJhbiBwbHVnaW4gZm9ybWF0XCIsIFwiQHsyMDIxLTA5LTA4fVwiLCBLYW5iYW5SZW1pbmRlckZvcm1hdC5pbnN0YW5jZSwgZmFsc2UpO1xuXG5leHBvcnQgY29uc3QgUmVtaW5kZXJGb3JtYXRUeXBlcyA9IFtcbiAgICByZW1pbmRlclBsdWdpblJlbWluZGVyRm9ybWF0LFxuICAgIHRhc2tzUGx1Z2luUmVtaW5kZXJGb3JtYXQsXG4gICAga2FuYmFuUGx1Z2luUmVtaW5kZXJGb3JtYXRcbl07XG5cbmV4cG9ydCB7XG4gICAgTWFya2Rvd25Eb2N1bWVudFxufSIsICJpbXBvcnQgeyBNYXJrZG93bkRvY3VtZW50LCBtb2RpZnlSZW1pbmRlciwgcGFyc2VSZW1pbmRlciwgUmVtaW5kZXJFZGl0IH0gZnJvbSBcIm1vZGVsL2Zvcm1hdFwiO1xuaW1wb3J0IHR5cGUgeyBSZW1pbmRlciB9IGZyb20gXCJtb2RlbC9yZW1pbmRlclwiO1xuaW1wb3J0IHR5cGUgeyBUb2RvIH0gZnJvbSBcIi4vZm9ybWF0L21hcmtkb3duXCI7XG5cbmV4cG9ydCB0eXBlIFJlbWluZGVyVG9kb0VkaXQgPSBSZW1pbmRlckVkaXQgJiB7XG4gIGNoZWNrZWQ/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBDb250ZW50IHtcbiAgcHJpdmF0ZSBkb2M6IE1hcmtkb3duRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoZmlsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLmRvYyA9IG5ldyBNYXJrZG93bkRvY3VtZW50KGZpbGUsIGNvbnRlbnQpO1xuICB9XG5cbiAgcHVibGljIGdldFJlbWluZGVycyhkb25lT25seTogYm9vbGVhbiA9IHRydWUpOiBBcnJheTxSZW1pbmRlcj4ge1xuICAgIGNvbnN0IHJlbWluZGVycyA9IHBhcnNlUmVtaW5kZXIodGhpcy5kb2MpO1xuICAgIGlmICghZG9uZU9ubHkpIHtcbiAgICAgIHJldHVybiByZW1pbmRlcnM7XG4gICAgfVxuICAgIHJldHVybiByZW1pbmRlcnMuZmlsdGVyKHJlbWluZGVyID0+ICFyZW1pbmRlci5kb25lKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb2RvcygpOiBBcnJheTxUb2RvPiB7XG4gICAgcmV0dXJuIHRoaXMuZG9jLmdldFRvZG9zKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbW9kaWZ5UmVtaW5kZXJMaW5lcyhtb2RpZnlGdW5jOiAocmVtaW5kZXI6IFJlbWluZGVyKSA9PiBSZW1pbmRlclRvZG9FZGl0IHwgbnVsbCkge1xuICAgIGZvciAoY29uc3QgcmVtaW5kZXIgb2YgdGhpcy5nZXRSZW1pbmRlcnMoZmFsc2UpKSB7XG4gICAgICBjb25zdCBlZGl0ID0gbW9kaWZ5RnVuYyhyZW1pbmRlcik7XG4gICAgICBpZiAoZWRpdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLm1vZGlmeVJlbWluZGVyTGluZShyZW1pbmRlciwgZWRpdCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZVJlbWluZGVyKHJlbWluZGVyOiBSZW1pbmRlciwgZWRpdDogUmVtaW5kZXJUb2RvRWRpdCkge1xuICAgIGF3YWl0IHRoaXMubW9kaWZ5UmVtaW5kZXJMaW5lKHJlbWluZGVyLCBlZGl0KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbW9kaWZ5UmVtaW5kZXJMaW5lKFxuICAgIHJlbWluZGVyOiBSZW1pbmRlcixcbiAgICBlZGl0OiBSZW1pbmRlclRvZG9FZGl0XG4gICkge1xuICAgIGNvbnN0IG1vZGlmaWVkID0gYXdhaXQgbW9kaWZ5UmVtaW5kZXIodGhpcy5kb2MsIHJlbWluZGVyLCBlZGl0KTtcbiAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhcIlJlbWluZGVyIHdhcyB1cGRhdGVkOiByZW1pbmRlcj0lb1wiLCByZW1pbmRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNhbm5vdCBtb2RpZnkgcmVtaW5kZXIgYmVjYXVzZSBpdCdzIG5vdCBhIHJlbWluZGVyIHRvZG86IHJlbWluZGVyPSVvXCIsIHJlbWluZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGlmaWVkO1xuICB9XG5cbiAgcHVibGljIGdldENvbnRlbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5kb2MudG9NYXJrZG93bigpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgUmVhZE9ubHlSZWZlcmVuY2UsIFJlZmVyZW5jZSB9IGZyb20gXCJtb2RlbC9yZWZcIjtcbmltcG9ydCB7IExhdGVyLCBwYXJzZUxhdGVycywgVGltZSB9IGZyb20gXCJtb2RlbC90aW1lXCI7XG5pbXBvcnQgeyBBYnN0cmFjdFRleHRDb21wb25lbnQsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFJlbWluZGVyRm9ybWF0VHlwZSwgUmVtaW5kZXJGb3JtYXRUeXBlcyB9IGZyb20gXCIuL2Zvcm1hdFwiO1xuXG5jbGFzcyBTZXR0aW5nUmVnaXN0cnkge1xuICAgIHByaXZhdGUgc2V0dGluZ0NvbnRleHRzOiBBcnJheTxTZXR0aW5nQ29udGV4dD4gPSBbXTtcblxuICAgIHJlZ2lzdGVyKHNldHRpbmdDb250ZXh0OiBTZXR0aW5nQ29udGV4dCkge1xuICAgICAgICB0aGlzLnNldHRpbmdDb250ZXh0cy5wdXNoKHNldHRpbmdDb250ZXh0KTtcbiAgICB9XG5cbiAgICBmaW5kQnlLZXkoa2V5OiBzdHJpbmcpOiBTZXR0aW5nQ29udGV4dCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdDb250ZXh0cy5maW5kKGMgPT4gYy5rZXkgPT09IGtleSk7XG4gICAgfVxuXG4gICAgZm9yRWFjaChjb25zdW1lcjogKGNvbnRleHQ6IFNldHRpbmdDb250ZXh0KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0dGluZ0NvbnRleHRzLmZvckVhY2goY29uc3VtZXIpO1xuICAgIH1cbn1cblxuY2xhc3MgU2V0dGluZ0NvbnRleHQge1xuXG4gICAgcHJpdmF0ZSB2YWxpZGF0aW9uRWw/OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGluZm9FbD86IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgX3NldHRpbmc/OiBTZXR0aW5nO1xuICAgIHB1YmxpYyBrZXk/OiBzdHJpbmc7XG4gICAgcHVibGljIG5hbWU/OiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2M/OiBzdHJpbmc7XG4gICAgcHVibGljIHRhZ3M6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICBwdWJsaWMgc2V0dGluZ01vZGVsPzogU2V0dGluZ01vZGVsPGFueSwgYW55PjtcbiAgICBhbnlWYWx1ZUNoYW5nZWQ/OiBBbnlWYWx1ZUNoYW5nZWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9zZXR0aW5nUmVnaXN0cnk6IFNldHRpbmdSZWdpc3RyeSkgeyB9XG5cbiAgICBpbml0KHNldHRpbmdNb2RlbDogU2V0dGluZ01vZGVsPGFueSwgYW55Piwgc2V0dGluZzogU2V0dGluZywgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ01vZGVsID0gc2V0dGluZ01vZGVsO1xuICAgICAgICB0aGlzLl9zZXR0aW5nID0gc2V0dGluZztcblxuICAgICAgICB0aGlzLnZhbGlkYXRpb25FbCA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdihcInZhbGlkYXRpb25cIiwgZWwgPT4ge1xuICAgICAgICAgICAgZWwuc3R5bGUuY29sb3IgPSAndmFyKC0tdGV4dC1lcnJvciknO1xuICAgICAgICAgICAgZWwuc3R5bGUubWFyZ2luQm90dG9tID0gJzFyZW0nO1xuICAgICAgICAgICAgZWwuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XG4gICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbmZvRWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoXCJpbmZvXCIsIGVsID0+IHtcbiAgICAgICAgICAgIGVsLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtZmFpbnQpJztcbiAgICAgICAgICAgIGVsLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxcmVtJztcbiAgICAgICAgICAgIGVsLnN0eWxlLmZvbnRTaXplID0gJzE0cHgnO1xuICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0VmFsaWRhdGlvbkVycm9yKGVycm9yOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0VGV4dCh0aGlzLnZhbGlkYXRpb25FbCEsIGVycm9yKTtcbiAgICB9XG5cbiAgICBzZXRJbmZvKGluZm86IHN0cmluZyB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXRUZXh0KHRoaXMuaW5mb0VsISwgaW5mbyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRUZXh0KGVsOiBIVE1MRWxlbWVudCwgdGV4dDogc3RyaW5nIHwgbnVsbCkge1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZWxlbWVudCBub3QgY3JlYXRlZFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHRleHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2V0dGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdcbiAgICB9XG5cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5nUmVnaXN0cnk7XG4gICAgfVxuXG4gICAgaGFzVGFnKHRhZzogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZ3MuZmlsdGVyKHQgPT4gdCA9PT0gdGFnKS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFueVZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW55VmFsdWVDaGFuZ2VkKHRoaXMpO1xuICAgIH1cblxuICAgIHNldEVuYWJsZWQoZW5hYmxlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZyEuc2V0RGlzYWJsZWQoIWVuYWJsZSk7XG4gICAgfVxuXG4gICAgZmluZENvbnRleHRCeUtleShrZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ1JlZ2lzdHJ5LmZpbmRCeUtleShrZXkpO1xuICAgIH1cblxuICAgIGJvb2xlYW5WYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ01vZGVsIS52YWx1ZSBhcyBib29sZWFuO1xuICAgIH1cblxuICAgIGlzSW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdNb2RlbCAmJiB0aGlzLnZhbGlkYXRpb25FbCAmJiB0aGlzLnNldHRpbmc7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0dGluZ01vZGVsQnVpbGRlciB7XG5cbiAgICBjb250ZXh0OiBTZXR0aW5nQ29udGV4dDtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWdpc3RyeTogU2V0dGluZ1JlZ2lzdHJ5KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IG5ldyBTZXR0aW5nQ29udGV4dCh0aGlzLnJlZ2lzdHJ5KTtcbiAgICAgICAgdGhpcy5yZWdpc3RyeS5yZWdpc3Rlcih0aGlzLmNvbnRleHQpO1xuICAgIH1cblxuICAgIGtleShrZXk6IHN0cmluZykge1xuICAgICAgICB0aGlzLmNvbnRleHQua2V5ID0ga2V5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBuYW1lKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmNvbnRleHQubmFtZSA9IG5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRlc2MoZGVzYzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5kZXNjID0gZGVzYztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGFnKHRhZzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC50YWdzLnB1c2godGFnKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZW5hYmxlV2hlbihlbmFibGVXaGVuOiBBbnlWYWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LmFueVZhbHVlQ2hhbmdlZCA9IGVuYWJsZVdoZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRleHQoaW5pdFZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0U2V0dGluZ01vZGVsQnVpbGRlcih0aGlzLmNvbnRleHQsIGZhbHNlLCBpbml0VmFsdWUpO1xuICAgIH1cblxuICAgIHRleHRBcmVhKGluaXRWYWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dFNldHRpbmdNb2RlbEJ1aWxkZXIodGhpcy5jb250ZXh0LCB0cnVlLCBpbml0VmFsdWUpO1xuICAgIH1cblxuICAgIG51bWJlcihpbml0VmFsdWU6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gbmV3IE51bWJlclNldHRpbmdNb2RlbEJ1aWxkZXIodGhpcy5jb250ZXh0LCBpbml0VmFsdWUpO1xuICAgIH1cblxuICAgIHRvZ2dsZShpbml0VmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb2dnbGVTZXR0aW5nTW9kZWxCdWlsZGVyKHRoaXMuY29udGV4dCwgaW5pdFZhbHVlKTtcbiAgICB9XG5cbiAgICBkcm9wZG93bihpbml0VmFsdWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbmV3IERyb3Bkb3duU2V0dGluZ01vZGVsQnVpbGRlcih0aGlzLmNvbnRleHQsIGluaXRWYWx1ZSk7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgU2VyZGU8UiwgRT4ge1xuICAgIHVubWFyc2hhbChyYXdWYWx1ZTogUik6IEVcbiAgICBtYXJzaGFsKHZhbHVlOiBFKTogUlxufVxuXG50eXBlIEFueVZhbHVlQ2hhbmdlZCA9IChjb250ZXh0OiBTZXR0aW5nQ29udGV4dCkgPT4gdm9pZDtcblxuYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RTZXR0aW5nTW9kZWxCdWlsZGVyPFI+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb250ZXh0OiBTZXR0aW5nQ29udGV4dCwgcHJvdGVjdGVkIGluaXRWYWx1ZTogUikgeyB9O1xuXG4gICAgb25BbnlWYWx1ZUNoYW5nZWQoYW55VmFsdWVDaGFuZ2VkOiBBbnlWYWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LmFueVZhbHVlQ2hhbmdlZCA9IGFueVZhbHVlQ2hhbmdlZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgYnVpbGQ8RT4oc2VyZGU6IFNlcmRlPFIsIEU+KTogU2V0dGluZ01vZGVsPFIsIEU+O1xuXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5yZWdpc3RyeS5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgYy51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGJ1aWxkU2V0dGluZ01vZGVsPEU+KHNlcmRlOiBTZXJkZTxSLCBFPiwgaW5pdGlhbGl6ZXI6IFNldHRpbmdJbml0aWxpemVyPFI+KSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0dGluZ01vZGVsSW1wbCh0aGlzLmNvbnRleHQsIHNlcmRlLCB0aGlzLmluaXRWYWx1ZSwgaW5pdGlhbGl6ZXIpO1xuICAgIH1cblxufVxuXG5jbGFzcyBUZXh0U2V0dGluZ01vZGVsQnVpbGRlciBleHRlbmRzIEFic3RyYWN0U2V0dGluZ01vZGVsQnVpbGRlcjxzdHJpbmc+e1xuXG4gICAgcHJpdmF0ZSBfcGxhY2VIb2xkZXI/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBTZXR0aW5nQ29udGV4dCwgcHJpdmF0ZSBsb25nVGV4dDogYm9vbGVhbiwgaW5pdFZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoY29udGV4dCwgaW5pdFZhbHVlKTtcbiAgICB9XG5cbiAgICBwbGFjZUhvbGRlcihwbGFjZUhvbGRlcjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3BsYWNlSG9sZGVyID0gcGxhY2VIb2xkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJ1aWxkPEU+KHNlcmRlOiBTZXJkZTxzdHJpbmcsIEU+KTogU2V0dGluZ01vZGVsPHN0cmluZywgRT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFNldHRpbmdNb2RlbChzZXJkZSwgKHsgc2V0dGluZywgcmF3VmFsdWUsIGNvbnRleHQgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5pdFRleHQgPSAodGV4dDogQWJzdHJhY3RUZXh0Q29tcG9uZW50PGFueT4pID0+IHtcbiAgICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcih0aGlzLl9wbGFjZUhvbGRlciA/PyBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUocmF3VmFsdWUudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyZGUudW5tYXJzaGFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0VmFsaWRhdGlvbkVycm9yKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRWYWxpZGF0aW9uRXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0VmFsaWRhdGlvbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxvbmdUZXh0KSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZy5hZGRUZXh0QXJlYSgodGV4dGFyZWEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFRleHQodGV4dGFyZWEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldHRpbmcuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpbml0VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIE51bWJlclNldHRpbmdNb2RlbEJ1aWxkZXIgZXh0ZW5kcyBBYnN0cmFjdFNldHRpbmdNb2RlbEJ1aWxkZXI8bnVtYmVyPntcblxuICAgIHByaXZhdGUgX3BsYWNlSG9sZGVyPzogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogU2V0dGluZ0NvbnRleHQsIGluaXRWYWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKGNvbnRleHQsIGluaXRWYWx1ZSk7XG4gICAgfVxuXG4gICAgcGxhY2VIb2xkZXIocGxhY2VIb2xkZXI6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9wbGFjZUhvbGRlciA9IHBsYWNlSG9sZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBidWlsZDxFPihzZXJkZTogU2VyZGU8bnVtYmVyLCBFPik6IFNldHRpbmdNb2RlbDxudW1iZXIsIEU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRTZXR0aW5nTW9kZWwoc2VyZGUsICh7IHNldHRpbmcsIHJhd1ZhbHVlLCBjb250ZXh0IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRUZXh0ID0gKHRleHQ6IEFic3RyYWN0VGV4dENvbXBvbmVudDxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIodGhpcy5fcGxhY2VIb2xkZXIgPz8gXCJcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHJhd1ZhbHVlLnZhbHVlLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdWYWx1ZS52YWx1ZSA9IG47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRWYWxpZGF0aW9uRXJyb3IobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldFZhbGlkYXRpb25FcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRWYWxpZGF0aW9uRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0dGluZy5hZGRUZXh0KCh0ZXh0YXJlYSkgPT4ge1xuICAgICAgICAgICAgICAgIGluaXRUZXh0KHRleHRhcmVhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgVG9nZ2xlU2V0dGluZ01vZGVsQnVpbGRlciBleHRlbmRzIEFic3RyYWN0U2V0dGluZ01vZGVsQnVpbGRlcjxib29sZWFuPntcblxuICAgIGJ1aWxkPEU+KHNlcmRlOiBTZXJkZTxib29sZWFuLCBFPik6IFNldHRpbmdNb2RlbDxib29sZWFuLCBFPiB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0dGluZ01vZGVsSW1wbCh0aGlzLmNvbnRleHQsIHNlcmRlLCB0aGlzLmluaXRWYWx1ZSwgKHsgc2V0dGluZywgcmF3VmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgc2V0dGluZy5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cbiAgICAgICAgICAgICAgICB0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHJhd1ZhbHVlLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXdWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgIH1cblxufVxuXG5jbGFzcyBEcm9wZG93bk9wdGlvbiB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGxhYmVsOiBzdHJpbmcsIHB1YmxpYyB2YWx1ZTogc3RyaW5nKSB7IH1cbn1cblxuY2xhc3MgRHJvcGRvd25TZXR0aW5nTW9kZWxCdWlsZGVyPEU+IGV4dGVuZHMgQWJzdHJhY3RTZXR0aW5nTW9kZWxCdWlsZGVyPHN0cmluZz57XG5cbiAgICBwcml2YXRlIG9wdGlvbnM6IEFycmF5PERyb3Bkb3duT3B0aW9uPiA9IFtdO1xuXG4gICAgYWRkT3B0aW9uKGxhYmVsOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnB1c2gobmV3IERyb3Bkb3duT3B0aW9uKGxhYmVsLCB2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBidWlsZDxFPihzZXJkZTogU2VyZGU8c3RyaW5nLCBFPik6IFNldHRpbmdNb2RlbDxzdHJpbmcsIEU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXR0aW5nTW9kZWxJbXBsKHRoaXMuY29udGV4dCwgc2VyZGUsIHRoaXMuaW5pdFZhbHVlLCAoeyBzZXR0aW5nLCByYXdWYWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICBzZXR0aW5nLmFkZERyb3Bkb3duKGQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGQuYWRkT3B0aW9uKG9wdGlvbi52YWx1ZSwgb3B0aW9uLmxhYmVsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkLnNldFZhbHVlKHJhd1ZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBkLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByYXdWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ01vZGVsPFIsIEU+IGV4dGVuZHMgUmVhZE9ubHlSZWZlcmVuY2U8RT4ge1xuXG4gICAgcmF3VmFsdWU6IFJlZmVyZW5jZTxSPjtcblxuICAgIHJlYWRvbmx5IGtleTogc3RyaW5nO1xuXG4gICAgY3JlYXRlU2V0dGluZyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpOiBTZXR0aW5nO1xuXG4gICAgbG9hZChzZXR0aW5nczogYW55KTogdm9pZDtcblxuICAgIHN0b3JlKHNldHRpbmdzOiBhbnkpOiB2b2lkO1xuXG4gICAgaGFzVGFnKHRhZzogc3RyaW5nKTogYm9vbGVhbjtcblxufVxuXG50eXBlIFNldHRpbmdJbml0aWxpemVyPFI+ID0gKHsgc2V0dGluZywgcmF3VmFsdWUsIGNvbnRleHQgfTogeyBzZXR0aW5nOiBTZXR0aW5nLCByYXdWYWx1ZTogUmVmZXJlbmNlPFI+LCBjb250ZXh0OiBTZXR0aW5nQ29udGV4dCB9KSA9PiB2b2lkO1xuXG5jbGFzcyBTZXR0aW5nTW9kZWxJbXBsPFIsIEU+IGltcGxlbWVudHMgU2V0dGluZ01vZGVsPFIsIEU+e1xuXG4gICAgcmF3VmFsdWU6IFJlZmVyZW5jZTxSPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGV4dDogU2V0dGluZ0NvbnRleHQsIHByaXZhdGUgc2VyZGU6IFNlcmRlPFIsIEU+LCBpbml0UmF3VmFsdWU6IFIsIHByaXZhdGUgc2V0dGluZ0luaXRpYWxpemVyOiBTZXR0aW5nSW5pdGlsaXplcjxSPikge1xuICAgICAgICB0aGlzLnJhd1ZhbHVlID0gbmV3IFJlZmVyZW5jZShpbml0UmF3VmFsdWUpO1xuICAgICAgICBpZiAoY29udGV4dC5rZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwia2V5IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVNldHRpbmcoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogU2V0dGluZyB7XG4gICAgICAgIGNvbnN0IHNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKHRoaXMuY29udGV4dC5uYW1lID8/IFwiXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyh0aGlzLmNvbnRleHQuZGVzYyA/PyBcIlwiKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LmluaXQodGhpcywgc2V0dGluZywgY29udGFpbmVyRWwpO1xuICAgICAgICB0aGlzLnNldHRpbmdJbml0aWFsaXplcih7XG4gICAgICAgICAgICBzZXR0aW5nLFxuICAgICAgICAgICAgcmF3VmFsdWU6IHRoaXMucmF3VmFsdWUsXG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXR0aW5nO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBFIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VyZGUudW5tYXJzaGFsKHRoaXMucmF3VmFsdWUudmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQua2V5ITtcbiAgICB9XG5cbiAgICBsb2FkKHNldHRpbmdzOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKHNldHRpbmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHNldHRpbmdzW3RoaXMua2V5XTtcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmF3VmFsdWUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3JlKHNldHRpbmdzOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgc2V0dGluZ3NbdGhpcy5rZXldID0gdGhpcy5yYXdWYWx1ZS52YWx1ZTtcbiAgICB9XG5cbiAgICBoYXNUYWcodGFnOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5oYXNUYWcodGFnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nR3JvdXAge1xuICAgIHB1YmxpYyBzZXR0aW5nczogQXJyYXk8U2V0dGluZ01vZGVsPGFueSwgYW55Pj4gPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nKSB7XG4gICAgfVxuXG4gICAgYWRkU2V0dGluZ3MoLi4uc2V0dGluZ01vZGVsczogQXJyYXk8U2V0dGluZ01vZGVsPGFueSwgYW55Pj4pIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5wdXNoKC4uLnNldHRpbmdNb2RlbHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNldHRpbmdUYWJNb2RlbCB7XG5cbiAgICBwcml2YXRlIGdyb3VwczogQXJyYXk8U2V0dGluZ0dyb3VwPiA9IFtdO1xuICAgIHByaXZhdGUgcmVnaXN0cnk6IFNldHRpbmdSZWdpc3RyeSA9IG5ldyBTZXR0aW5nUmVnaXN0cnkoKTtcblxuICAgIG5ld1NldHRpbmdCdWlsZGVyKCk6IFNldHRpbmdNb2RlbEJ1aWxkZXIge1xuICAgICAgICByZXR1cm4gbmV3IFNldHRpbmdNb2RlbEJ1aWxkZXIodGhpcy5yZWdpc3RyeSk7XG4gICAgfVxuXG4gICAgbmV3R3JvdXAobmFtZTogc3RyaW5nKTogU2V0dGluZ0dyb3VwIHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSBuZXcgU2V0dGluZ0dyb3VwKG5hbWUpO1xuICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIGRpc3BsYXlPbihlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgZWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgICAgICBlbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6IGdyb3VwLm5hbWUgfSk7XG4gICAgICAgICAgICBncm91cC5zZXR0aW5ncy5mb3JFYWNoKHNldHRpbmdzID0+IHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5jcmVhdGVTZXR0aW5nKGVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWdpc3RyeS5mb3JFYWNoKGNvbnRleHQgPT4gY29udGV4dC51cGRhdGUoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZvckVhY2goY29uc3VtZXI6IChzZXR0aW5nOiBTZXR0aW5nTW9kZWw8YW55LCBhbnk+KSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgZ3JvdXAuc2V0dGluZ3MuZm9yRWFjaChzZXR0aW5nID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdW1lcihzZXR0aW5nKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGltZVNlcmRlIGltcGxlbWVudHMgU2VyZGU8c3RyaW5nLCBUaW1lPntcbiAgICB1bm1hcnNoYWwocmF3VmFsdWU6IHN0cmluZyk6IFRpbWUge1xuICAgICAgICByZXR1cm4gVGltZS5wYXJzZShyYXdWYWx1ZSk7XG4gICAgfVxuICAgIG1hcnNoYWwodmFsdWU6IFRpbWUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSYXdTZXJkZTxSPiBpbXBsZW1lbnRzIFNlcmRlPFIsIFI+e1xuICAgIHVubWFyc2hhbChyYXdWYWx1ZTogUik6IFIge1xuICAgICAgICByZXR1cm4gcmF3VmFsdWU7XG4gICAgfVxuICAgIG1hcnNoYWwodmFsdWU6IFIpOiBSIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExhdGVyc1NlcmRlIGltcGxlbWVudHMgU2VyZGU8c3RyaW5nLCBBcnJheTxMYXRlcj4+e1xuICAgIHVubWFyc2hhbChyYXdWYWx1ZTogc3RyaW5nKTogTGF0ZXJbXSB7XG4gICAgICAgIHJldHVybiBwYXJzZUxhdGVycyhyYXdWYWx1ZSk7XG4gICAgfVxuICAgIG1hcnNoYWwodmFsdWU6IExhdGVyW10pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKHYgPT4gdi5sYWJlbCkuam9pbihcIlxcblwiKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1pbmRlckZvcm1hdFR5cGVTZXJkZSBpbXBsZW1lbnRzIFNlcmRlPHN0cmluZywgUmVtaW5kZXJGb3JtYXRUeXBlPntcblxuICAgIHVubWFyc2hhbChyYXdWYWx1ZTogc3RyaW5nKTogUmVtaW5kZXJGb3JtYXRUeXBlIHtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gUmVtaW5kZXJGb3JtYXRUeXBlcy5maW5kKGZvcm1hdCA9PiBmb3JtYXQubmFtZSA9PT0gcmF3VmFsdWUpITtcbiAgICAgICAgLy8gVE9ETyByZXR1cm4gdW5kZWZpbmVkIHdoZW4gaXQgaXMgbm90IGZvdW5kXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuICAgIG1hcnNoYWwodmFsdWU6IFJlbWluZGVyRm9ybWF0VHlwZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5uYW1lO1xuICAgIH1cblxufSIsICJpbXBvcnQgeyBjaGFuZ2VSZW1pbmRlckZvcm1hdCwga2FuYmFuUGx1Z2luUmVtaW5kZXJGb3JtYXQsIFJlbWluZGVyRm9ybWF0VHlwZSwgUmVtaW5kZXJGb3JtYXRUeXBlcywgcmVtaW5kZXJQbHVnaW5SZW1pbmRlckZvcm1hdCwgc2V0UmVtaW5kZXJGb3JtYXRDb25maWcsIHRhc2tzUGx1Z2luUmVtaW5kZXJGb3JtYXQgfSBmcm9tIFwibW9kZWwvZm9ybWF0XCI7XG5pbXBvcnQgeyBSZW1pbmRlckZvcm1hdENvbmZpZywgUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXkgfSBmcm9tIFwibW9kZWwvZm9ybWF0L3JlbWluZGVyLWJhc2VcIjtcbmltcG9ydCB7IExhdGVyc1NlcmRlLCBSYXdTZXJkZSwgUmVtaW5kZXJGb3JtYXRUeXBlU2VyZGUsIFNldHRpbmdNb2RlbCwgU2V0dGluZ1RhYk1vZGVsLCBUaW1lU2VyZGUgfSBmcm9tIFwibW9kZWwvc2V0dGluZ3NcIjtcbmltcG9ydCB7IERhdGVUaW1lLCBMYXRlciwgVGltZSB9IGZyb20gXCJtb2RlbC90aW1lXCI7XG5pbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFBsdWdpbl8yIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjb25zdCBUQUdfUkVTQ0FOID0gXCJyZS1zY2FuXCI7XG5cbmNsYXNzIFNldHRpbmdzIHtcblxuICBzZXR0aW5nczogU2V0dGluZ1RhYk1vZGVsID0gbmV3IFNldHRpbmdUYWJNb2RlbCgpO1xuXG4gIHJlbWluZGVyVGltZTogU2V0dGluZ01vZGVsPHN0cmluZywgVGltZT47XG4gIHVzZVN5c3RlbU5vdGlmaWNhdGlvbjogU2V0dGluZ01vZGVsPGJvb2xlYW4sIGJvb2xlYW4+O1xuICBsYXRlcnM6IFNldHRpbmdNb2RlbDxzdHJpbmcsIEFycmF5PExhdGVyPj47XG4gIGRhdGVGb3JtYXQ6IFNldHRpbmdNb2RlbDxzdHJpbmcsIHN0cmluZz47XG4gIGRhdGVUaW1lRm9ybWF0OiBTZXR0aW5nTW9kZWw8c3RyaW5nLCBzdHJpbmc+O1xuICBzdHJpY3REYXRlRm9ybWF0OiBTZXR0aW5nTW9kZWw8Ym9vbGVhbiwgYm9vbGVhbj47XG4gIGF1dG9Db21wbGV0ZVRyaWdnZXI6IFNldHRpbmdNb2RlbDxzdHJpbmcsIHN0cmluZz47XG4gIHByaW1hcnlGb3JtYXQ6IFNldHRpbmdNb2RlbDxzdHJpbmcsIFJlbWluZGVyRm9ybWF0VHlwZT47XG4gIHVzZUN1c3RvbUVtb2ppRm9yVGFza3NQbHVnaW46IFNldHRpbmdNb2RlbDxib29sZWFuLCBib29sZWFuPjtcbiAgcmVtb3ZlVGFnc0ZvclRhc2tzUGx1Z2luOiBTZXR0aW5nTW9kZWw8Ym9vbGVhbiwgYm9vbGVhbj47XG4gIGxpbmtEYXRlc1RvRGFpbHlOb3RlczogU2V0dGluZ01vZGVsPGJvb2xlYW4sIGJvb2xlYW4+O1xuICBlZGl0RGV0ZWN0aW9uU2VjOiBTZXR0aW5nTW9kZWw8bnVtYmVyLCBudW1iZXI+O1xuICByZW1pbmRlckNoZWNrSW50ZXJ2YWxTZWM6IFNldHRpbmdNb2RlbDxudW1iZXIsIG51bWJlcj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgcmVtaW5kZXJGb3JtYXRTZXR0aW5ncyA9IG5ldyBSZW1pbmRlckZvcm1hdFNldHRpbmdzKHRoaXMuc2V0dGluZ3MpO1xuXG4gICAgdGhpcy5yZW1pbmRlclRpbWUgPSB0aGlzLnNldHRpbmdzLm5ld1NldHRpbmdCdWlsZGVyKClcbiAgICAgIC5rZXkoXCJyZW1pbmRlclRpbWVcIilcbiAgICAgIC5uYW1lKFwiUmVtaW5kZXIgVGltZVwiKVxuICAgICAgLmRlc2MoXCJUaW1lIHdoZW4gYSByZW1pbmRlciB3aXRoIG5vIHRpbWUgcGFydCB3aWxsIHNob3dcIilcbiAgICAgIC50YWcoVEFHX1JFU0NBTilcbiAgICAgIC50ZXh0KFwiMDk6MDBcIilcbiAgICAgIC5wbGFjZUhvbGRlcihcIlRpbWUgKGhoOm1tKVwiKVxuICAgICAgLmJ1aWxkKG5ldyBUaW1lU2VyZGUoKSk7XG5cbiAgICB0aGlzLnVzZVN5c3RlbU5vdGlmaWNhdGlvbiA9IHRoaXMuc2V0dGluZ3MubmV3U2V0dGluZ0J1aWxkZXIoKVxuICAgICAgLmtleShcInVzZVN5c3RlbU5vdGlmaWNhdGlvblwiKVxuICAgICAgLm5hbWUoXCJVc2Ugc3lzdGVtIG5vdGlmaWNhdGlvblwiKVxuICAgICAgLmRlc2MoXCJVc2Ugc3lzdGVtIG5vdGlmaWNhdGlvbiBmb3IgcmVtaW5kZXIgbm90aWZpY2F0aW9uc1wiKVxuICAgICAgLnRvZ2dsZShmYWxzZSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLmxhdGVycyA9IHRoaXMuc2V0dGluZ3MubmV3U2V0dGluZ0J1aWxkZXIoKVxuICAgICAgLmtleShcImxhdGVyc1wiKVxuICAgICAgLm5hbWUoXCJSZW1pbmQgbWUgbGF0ZXJcIilcbiAgICAgIC5kZXNjKFwiTGluZS1zZXBhcmF0ZWQgbGlzdCBvZiByZW1pbmQgbWUgbGF0ZXIgaXRlbXNcIilcbiAgICAgIC50ZXh0QXJlYShcIkluIDMwIG1pbnV0ZXNcXG5JbiAxIGhvdXJcXG5JbiAzIGhvdXJzXFxuVG9tb3Jyb3dcXG5OZXh0IHdlZWtcIilcbiAgICAgIC5wbGFjZUhvbGRlcihcIkluIDMwIG1pbnV0ZXNcXG5JbiAxIGhvdXJcXG5JbiAzIGhvdXJzXFxuVG9tb3Jyb3dcXG5OZXh0IHdlZWtcIilcbiAgICAgIC5idWlsZChuZXcgTGF0ZXJzU2VyZGUoKSk7XG5cbiAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLnNldHRpbmdzLm5ld1NldHRpbmdCdWlsZGVyKClcbiAgICAgIC5rZXkoXCJkYXRlRm9ybWF0XCIpXG4gICAgICAubmFtZShcIkRhdGUgZm9ybWF0XCIpXG4gICAgICAuZGVzYyhcIm1vbWVudCBzdHlsZSBkYXRlIGZvcm1hdDogaHR0cHM6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2Rpc3BsYXlpbmcvZm9ybWF0L1wiKVxuICAgICAgLnRhZyhUQUdfUkVTQ0FOKVxuICAgICAgLnRleHQoXCJZWVlZLU1NLUREXCIpXG4gICAgICAucGxhY2VIb2xkZXIoXCJZWVlZLU1NLUREXCIpXG4gICAgICAub25BbnlWYWx1ZUNoYW5nZWQoY29udGV4dCA9PiB7XG4gICAgICAgIGNvbnRleHQuc2V0RW5hYmxlZChyZW1pbmRlckZvcm1hdFNldHRpbmdzLmVuYWJsZVJlbWluZGVyUGx1Z2luUmVtaW5kZXJGb3JtYXQudmFsdWUpO1xuICAgICAgfSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLnN0cmljdERhdGVGb3JtYXQgPSB0aGlzLnNldHRpbmdzLm5ld1NldHRpbmdCdWlsZGVyKClcbiAgICAgIC5rZXkoXCJzdHJpY3REYXRlRm9ybWF0XCIpXG4gICAgICAubmFtZShcIlN0cmljdCBEYXRlIGZvcm1hdFwiKVxuICAgICAgLmRlc2MoXCJTdHJpY3RseSBwYXJzZSB0aGUgZGF0ZSBhbmQgdGltZVwiKVxuICAgICAgLnRhZyhUQUdfUkVTQ0FOKVxuICAgICAgLnRvZ2dsZShmYWxzZSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLmRhdGVUaW1lRm9ybWF0ID0gdGhpcy5zZXR0aW5ncy5uZXdTZXR0aW5nQnVpbGRlcigpXG4gICAgICAua2V5KFwiZGF0ZVRpbWVGb3JtYXRcIilcbiAgICAgIC5uYW1lKFwiRGF0ZSBhbmQgdGltZSBmb3JtYXRcIilcbiAgICAgIC5kZXNjKFwibW9tZW50KCkgc3R5bGUgZGF0ZSB0aW1lIGZvcm1hdDogaHR0cHM6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2Rpc3BsYXlpbmcvZm9ybWF0L1wiKVxuICAgICAgLnRhZyhUQUdfUkVTQ0FOKVxuICAgICAgLnRleHQoXCJZWVlZLU1NLUREIEhIOm1tXCIpXG4gICAgICAucGxhY2VIb2xkZXIoXCJZWVlZLU1NLUREIEhIOm1tXCIpXG4gICAgICAub25BbnlWYWx1ZUNoYW5nZWQoY29udGV4dCA9PiB7XG4gICAgICAgIGNvbnRleHQuc2V0RW5hYmxlZChyZW1pbmRlckZvcm1hdFNldHRpbmdzLmVuYWJsZVJlbWluZGVyUGx1Z2luUmVtaW5kZXJGb3JtYXQudmFsdWUpO1xuICAgICAgfSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLmxpbmtEYXRlc1RvRGFpbHlOb3RlcyA9IHRoaXMuc2V0dGluZ3MubmV3U2V0dGluZ0J1aWxkZXIoKVxuICAgICAgLmtleShcImxpbmtEYXRlc1RvRGFpbHlOb3Rlc1wiKVxuICAgICAgLm5hbWUoXCJMaW5rIGRhdGVzIHRvIGRhaWx5IG5vdGVzXCIpXG4gICAgICAuZGVzYyhcIldoZW4gdG9nZ2xlZCwgRGF0ZXMgbGluayB0byBkYWlseSBub3Rlcy5cIilcbiAgICAgIC50YWcoVEFHX1JFU0NBTilcbiAgICAgIC50b2dnbGUoZmFsc2UpXG4gICAgICAub25BbnlWYWx1ZUNoYW5nZWQoY29udGV4dCA9PiB7XG4gICAgICAgIGNvbnRleHQuc2V0RW5hYmxlZChyZW1pbmRlckZvcm1hdFNldHRpbmdzLmVuYWJsZVJlbWluZGVyUGx1Z2luUmVtaW5kZXJGb3JtYXQudmFsdWUpO1xuICAgICAgfSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLmF1dG9Db21wbGV0ZVRyaWdnZXIgPSB0aGlzLnNldHRpbmdzLm5ld1NldHRpbmdCdWlsZGVyKClcbiAgICAgIC5rZXkoXCJhdXRvQ29tcGxldGVUcmlnZ2VyXCIpXG4gICAgICAubmFtZShcIkNhbGVuZGFyIHBvcHVwIHRyaWdnZXJcIilcbiAgICAgIC5kZXNjKFwiVHJpZ2dlciB0ZXh0IHRvIHNob3cgY2FsZW5kYXIgcG9wdXBcIilcbiAgICAgIC50ZXh0KFwiKEBcIilcbiAgICAgIC5wbGFjZUhvbGRlcihcIihAXCIpXG4gICAgICAub25BbnlWYWx1ZUNoYW5nZWQoY29udGV4dCA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5hdXRvQ29tcGxldGVUcmlnZ2VyLnZhbHVlO1xuICAgICAgICBjb250ZXh0LnNldEluZm8oYFBvcHVwIGlzICR7dmFsdWUubGVuZ3RoID09PSAwID8gXCJkaXNhYmxlZFwiIDogXCJlbmFibGVkXCJ9YCk7XG4gICAgICB9KVxuICAgICAgLmJ1aWxkKG5ldyBSYXdTZXJkZSgpKTtcblxuICAgIGNvbnN0IHByaW1hcnlGb3JtYXRCdWlsZGVyID0gdGhpcy5zZXR0aW5ncy5uZXdTZXR0aW5nQnVpbGRlcigpXG4gICAgICAua2V5KFwicHJpbWFyeVJlbWluZGVyRm9ybWF0XCIpXG4gICAgICAubmFtZShcIlByaW1hcnkgcmVtaW5kZXIgZm9ybWF0XCIpXG4gICAgICAuZGVzYyhcIlJlbWluZGVyIGZvcm1hdCBmb3IgZ2VuZXJhdGVkIHJlbWluZGVyIGJ5IGNhbGVuZGFyIHBvcHVwXCIpXG4gICAgICAuZHJvcGRvd24oUmVtaW5kZXJGb3JtYXRUeXBlc1swXSEubmFtZSk7XG4gICAgUmVtaW5kZXJGb3JtYXRUeXBlcy5mb3JFYWNoKGYgPT4gcHJpbWFyeUZvcm1hdEJ1aWxkZXIuYWRkT3B0aW9uKGAke2YuZGVzY3JpcHRpb259IC0gJHtmLmV4YW1wbGV9YCwgZi5uYW1lKSk7XG4gICAgdGhpcy5wcmltYXJ5Rm9ybWF0ID0gcHJpbWFyeUZvcm1hdEJ1aWxkZXIuYnVpbGQobmV3IFJlbWluZGVyRm9ybWF0VHlwZVNlcmRlKCkpO1xuXG4gICAgdGhpcy51c2VDdXN0b21FbW9qaUZvclRhc2tzUGx1Z2luID0gdGhpcy5zZXR0aW5ncy5uZXdTZXR0aW5nQnVpbGRlcigpXG4gICAgICAua2V5KFwidXNlQ3VzdG9tRW1vamlGb3JUYXNrc1BsdWdpblwiKVxuICAgICAgLm5hbWUoXCJEaXN0aW5ndWlzaCBiZXR3ZWVuIHJlbWluZGVyIGRhdGUgYW5kIGR1ZSBkYXRlXCIpXG4gICAgICAuZGVzYyhcIlVzZSBjdXN0b20gZW1vamkgXHUyM0YwIGluc3RlYWQgb2YgXHVEODNEXHVEQ0M1IGFuZCBkaXN0aW5ndWlzaCBiZXR3ZWVuIHJlbWluZGVyIGRhdGUvdGltZSBhbmQgVGFza3MgUGx1Z2luJ3MgZHVlIGRhdGUuXCIpXG4gICAgICAudGFnKFRBR19SRVNDQU4pXG4gICAgICAudG9nZ2xlKGZhbHNlKVxuICAgICAgLm9uQW55VmFsdWVDaGFuZ2VkKGNvbnRleHQgPT4ge1xuICAgICAgICBjb250ZXh0LnNldEVuYWJsZWQocmVtaW5kZXJGb3JtYXRTZXR0aW5ncy5lbmFibGVUYXNrc1BsdWdpblJlbWluZGVyRm9ybWF0LnZhbHVlKTtcbiAgICAgIH0pXG4gICAgICAuYnVpbGQobmV3IFJhd1NlcmRlKCkpO1xuICAgIHRoaXMucmVtb3ZlVGFnc0ZvclRhc2tzUGx1Z2luID0gdGhpcy5zZXR0aW5ncy5uZXdTZXR0aW5nQnVpbGRlcigpXG4gICAgICAua2V5KFwicmVtb3ZlVGFnc0ZvclRhc2tzUGx1Z2luXCIpXG4gICAgICAubmFtZShcIlJlbW92ZSB0YWdzIGZyb20gcmVtaW5kZXIgdGl0bGVcIilcbiAgICAgIC5kZXNjKFwiSWYgY2hlY2tlZCwgdGFncygjeHh4KSBhcmUgcmVtb3ZlZCBmcm9tIHRoZSByZW1pbmRlciBsaXN0IHZpZXcgYW5kIG5vdGlmaWNhdGlvbi5cIilcbiAgICAgIC50YWcoVEFHX1JFU0NBTilcbiAgICAgIC50b2dnbGUoZmFsc2UpXG4gICAgICAub25BbnlWYWx1ZUNoYW5nZWQoY29udGV4dCA9PiB7XG4gICAgICAgIGNvbnRleHQuc2V0RW5hYmxlZChyZW1pbmRlckZvcm1hdFNldHRpbmdzLmVuYWJsZVRhc2tzUGx1Z2luUmVtaW5kZXJGb3JtYXQudmFsdWUpO1xuICAgICAgfSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLmVkaXREZXRlY3Rpb25TZWMgPSB0aGlzLnNldHRpbmdzLm5ld1NldHRpbmdCdWlsZGVyKClcbiAgICAgIC5rZXkoXCJlZGl0RGV0ZWN0aW9uU2VjXCIpXG4gICAgICAubmFtZShcIkVkaXQgRGV0ZWN0aW9uIFRpbWVcIilcbiAgICAgIC5kZXNjKFwiVGhlIG1pbmltdW0gYW1vdW50IG9mIHRpbWUgKGluIHNlY29uZHMpIGFmdGVyIGEga2V5IGlzIHR5cGVkIHRoYXQgaXQgd2lsbCBiZSBpZGVudGlmaWVkIGFzIG5vdGlmaWFibGUuXCIpXG4gICAgICAubnVtYmVyKDEwKVxuICAgICAgLmJ1aWxkKG5ldyBSYXdTZXJkZSgpKTtcbiAgICB0aGlzLnJlbWluZGVyQ2hlY2tJbnRlcnZhbFNlYyA9IHRoaXMuc2V0dGluZ3MubmV3U2V0dGluZ0J1aWxkZXIoKVxuICAgICAgLmtleShcInJlbWluZGVyQ2hlY2tJbnRlcnZhbFNlY1wiKVxuICAgICAgLm5hbWUoXCJSZW1pbmRlciBjaGVjayBpbnRlcnZhbFwiKVxuICAgICAgLmRlc2MoXCJJbnRlcnZhbChpbiBzZWNvbmRzKSB0byBwZXJpb2RpY2FsbHkgY2hlY2sgd2hldGhlciBvciBub3QgeW91IHNob3VsZCBiZSBub3RpZmllZCBvZiByZW1pbmRlcnMuICBZb3Ugd2lsbCBuZWVkIHRvIHJlc3RhcnQgT2JzaWRpYW4gZm9yIHRoaXMgc2V0dGluZyB0byB0YWtlIGVmZmVjdC5cIilcbiAgICAgIC5udW1iZXIoNSlcbiAgICAgIC5idWlsZChuZXcgUmF3U2VyZGUoKSk7XG5cbiAgICB0aGlzLnNldHRpbmdzXG4gICAgICAubmV3R3JvdXAoXCJOb3RpZmljYXRpb24gU2V0dGluZ3NcIilcbiAgICAgIC5hZGRTZXR0aW5ncyhcbiAgICAgICAgdGhpcy5yZW1pbmRlclRpbWUsXG4gICAgICAgIHRoaXMubGF0ZXJzLFxuICAgICAgICB0aGlzLnVzZVN5c3RlbU5vdGlmaWNhdGlvblxuICAgICAgKTtcbiAgICB0aGlzLnNldHRpbmdzXG4gICAgICAubmV3R3JvdXAoXCJFZGl0b3JcIilcbiAgICAgIC5hZGRTZXR0aW5ncyhcbiAgICAgICAgdGhpcy5hdXRvQ29tcGxldGVUcmlnZ2VyLFxuICAgICAgICB0aGlzLnByaW1hcnlGb3JtYXRcbiAgICAgICk7XG4gICAgdGhpcy5zZXR0aW5nc1xuICAgICAgLm5ld0dyb3VwKFwiUmVtaW5kZXIgRm9ybWF0IC0gUmVtaW5kZXIgUGx1Z2luXCIpXG4gICAgICAuYWRkU2V0dGluZ3MoXG4gICAgICAgIHJlbWluZGVyRm9ybWF0U2V0dGluZ3MuZW5hYmxlUmVtaW5kZXJQbHVnaW5SZW1pbmRlckZvcm1hdCxcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0LFxuICAgICAgICB0aGlzLmRhdGVUaW1lRm9ybWF0LFxuICAgICAgICB0aGlzLnN0cmljdERhdGVGb3JtYXQsXG4gICAgICAgIHRoaXMubGlua0RhdGVzVG9EYWlseU5vdGVzXG4gICAgICApO1xuICAgIHRoaXMuc2V0dGluZ3NcbiAgICAgIC5uZXdHcm91cChcIlJlbWluZGVyIEZvcm1hdCAtIFRhc2tzIFBsdWdpblwiKVxuICAgICAgLmFkZFNldHRpbmdzKFxuICAgICAgICByZW1pbmRlckZvcm1hdFNldHRpbmdzLmVuYWJsZVRhc2tzUGx1Z2luUmVtaW5kZXJGb3JtYXQsXG4gICAgICAgIHRoaXMudXNlQ3VzdG9tRW1vamlGb3JUYXNrc1BsdWdpbixcbiAgICAgICAgdGhpcy5yZW1vdmVUYWdzRm9yVGFza3NQbHVnaW5cbiAgICAgICk7XG4gICAgdGhpcy5zZXR0aW5nc1xuICAgICAgLm5ld0dyb3VwKFwiUmVtaW5kZXIgRm9ybWF0IC0gS2FuYmFuIFBsdWdpblwiKVxuICAgICAgLmFkZFNldHRpbmdzKFxuICAgICAgICByZW1pbmRlckZvcm1hdFNldHRpbmdzLmVuYWJsZUthbmJhblBsdWdpblJlbWluZGVyRm9ybWF0LFxuICAgICAgKTtcbiAgICB0aGlzLnNldHRpbmdzXG4gICAgICAubmV3R3JvdXAoXCJBZHZhbmNlZFwiKVxuICAgICAgLmFkZFNldHRpbmdzKFxuICAgICAgICB0aGlzLmVkaXREZXRlY3Rpb25TZWMsXG4gICAgICAgIHRoaXMucmVtaW5kZXJDaGVja0ludGVydmFsU2VjXG4gICAgICApO1xuXG4gICAgY29uc3QgY29uZmlnID0gbmV3IFJlbWluZGVyRm9ybWF0Q29uZmlnKCk7XG4gICAgY29uZmlnLnNldFBhcmFtZXRlckZ1bmMoUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXkubm93LCAoKSA9PiBEYXRlVGltZS5ub3coKSk7XG4gICAgY29uZmlnLnNldFBhcmFtZXRlcihSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleS51c2VDdXN0b21FbW9qaUZvclRhc2tzUGx1Z2luLCB0aGlzLnVzZUN1c3RvbUVtb2ppRm9yVGFza3NQbHVnaW4pO1xuICAgIGNvbmZpZy5zZXRQYXJhbWV0ZXIoUmVtaW5kZXJGb3JtYXRQYXJhbWV0ZXJLZXkubGlua0RhdGVzVG9EYWlseU5vdGVzLCB0aGlzLmxpbmtEYXRlc1RvRGFpbHlOb3Rlcyk7XG4gICAgY29uZmlnLnNldFBhcmFtZXRlcihSZW1pbmRlckZvcm1hdFBhcmFtZXRlcktleS5yZW1vdmVUYWdzRm9yVGFza3NQbHVnaW4sIHRoaXMucmVtb3ZlVGFnc0ZvclRhc2tzUGx1Z2luKTtcbiAgICBzZXRSZW1pbmRlckZvcm1hdENvbmZpZyhjb25maWcpO1xuICB9XG5cbiAgcHVibGljIGZvckVhY2goY29uc3VtZXI6IChzZXR0aW5nOiBTZXR0aW5nTW9kZWw8YW55LCBhbnk+KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zZXR0aW5ncy5mb3JFYWNoKGNvbnN1bWVyKTtcbiAgfVxuXG59XG5cbmNsYXNzIFJlbWluZGVyRm9ybWF0U2V0dGluZ3Mge1xuXG4gIHByaXZhdGUgc2V0dGluZ0tleVRvRm9ybWF0TmFtZTogTWFwPHN0cmluZywgUmVtaW5kZXJGb3JtYXRUeXBlPiA9IG5ldyBNYXAoKTtcbiAgcmVtaW5kZXJGb3JtYXRTZXR0aW5nczogQXJyYXk8U2V0dGluZ01vZGVsPGJvb2xlYW4sIGJvb2xlYW4+PiA9IFtdO1xuXG4gIGVuYWJsZVJlbWluZGVyUGx1Z2luUmVtaW5kZXJGb3JtYXQ6IFNldHRpbmdNb2RlbDxib29sZWFuLCBib29sZWFuPjtcbiAgZW5hYmxlVGFza3NQbHVnaW5SZW1pbmRlckZvcm1hdDogU2V0dGluZ01vZGVsPGJvb2xlYW4sIGJvb2xlYW4+O1xuICBlbmFibGVLYW5iYW5QbHVnaW5SZW1pbmRlckZvcm1hdDogU2V0dGluZ01vZGVsPGJvb2xlYW4sIGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2V0dGluZ3M6IFNldHRpbmdUYWJNb2RlbCkge1xuICAgIHRoaXMuZW5hYmxlUmVtaW5kZXJQbHVnaW5SZW1pbmRlckZvcm1hdCA9IHRoaXMuY3JlYXRlVXNlUmVtaW5kZXJGb3JtYXRTZXR0aW5nKHJlbWluZGVyUGx1Z2luUmVtaW5kZXJGb3JtYXQpO1xuICAgIHRoaXMuZW5hYmxlVGFza3NQbHVnaW5SZW1pbmRlckZvcm1hdCA9IHRoaXMuY3JlYXRlVXNlUmVtaW5kZXJGb3JtYXRTZXR0aW5nKHRhc2tzUGx1Z2luUmVtaW5kZXJGb3JtYXQpO1xuICAgIHRoaXMuZW5hYmxlS2FuYmFuUGx1Z2luUmVtaW5kZXJGb3JtYXQgPSB0aGlzLmNyZWF0ZVVzZVJlbWluZGVyRm9ybWF0U2V0dGluZyhrYW5iYW5QbHVnaW5SZW1pbmRlckZvcm1hdCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVVzZVJlbWluZGVyRm9ybWF0U2V0dGluZyhmb3JtYXQ6IFJlbWluZGVyRm9ybWF0VHlwZSkge1xuICAgIGNvbnN0IGtleSA9IGBlbmFibGUke2Zvcm1hdC5uYW1lfWA7XG4gICAgY29uc3Qgc2V0dGluZyA9IHRoaXMuc2V0dGluZ3MubmV3U2V0dGluZ0J1aWxkZXIoKVxuICAgICAgLmtleShrZXkpXG4gICAgICAubmFtZShgRW5hYmxlICR7Zm9ybWF0LmRlc2NyaXB0aW9ufWApXG4gICAgICAuZGVzYyhgRW5hYmxlICR7Zm9ybWF0LmRlc2NyaXB0aW9ufWApXG4gICAgICAudGFnKFRBR19SRVNDQU4pXG4gICAgICAudG9nZ2xlKGZvcm1hdC5kZWZhdWx0RW5hYmxlZClcbiAgICAgIC5vbkFueVZhbHVlQ2hhbmdlZChjb250ZXh0ID0+IHtcbiAgICAgICAgY29udGV4dC5zZXRJbmZvKGBFeGFtcGxlOiAke2Zvcm1hdC5mb3JtYXQuYXBwZW5kUmVtaW5kZXIoXCItIFsgXSBUYXNrIDFcIiwgRGF0ZVRpbWUubm93KCkpPy5pbnNlcnRlZExpbmV9YCk7XG4gICAgICB9KVxuICAgICAgLmJ1aWxkKG5ldyBSYXdTZXJkZSgpKTtcblxuICAgIHRoaXMuc2V0dGluZ0tleVRvRm9ybWF0TmFtZS5zZXQoa2V5LCBmb3JtYXQpO1xuICAgIHRoaXMucmVtaW5kZXJGb3JtYXRTZXR0aW5ncy5wdXNoKHNldHRpbmcpO1xuXG4gICAgc2V0dGluZy5yYXdWYWx1ZS5vbkNoYW5nZWQoKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVSZW1pbmRlckZvcm1hdChzZXR0aW5nKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2V0dGluZztcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUmVtaW5kZXJGb3JtYXQoc2V0dGluZzogU2V0dGluZ01vZGVsPGJvb2xlYW4sIGJvb2xlYW4+KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRGb3JtYXRzID0gdGhpcy5yZW1pbmRlckZvcm1hdFNldHRpbmdzXG4gICAgICAuZmlsdGVyKHMgPT4gcy52YWx1ZSlcbiAgICAgIC5tYXAocyA9PiB0aGlzLnNldHRpbmdLZXlUb0Zvcm1hdE5hbWUuZ2V0KHMua2V5KSlcbiAgICAgIC5maWx0ZXIoKHMpOiBzIGlzIFJlbWluZGVyRm9ybWF0VHlwZSA9PiBzICE9PSB1bmRlZmluZWQpO1xuICAgIGNoYW5nZVJlbWluZGVyRm9ybWF0KHNlbGVjdGVkRm9ybWF0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFNFVFRJTkdTID0gbmV3IFNldHRpbmdzKCk7XG5cbmV4cG9ydCBjbGFzcyBSZW1pbmRlclNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgY29uc3RydWN0b3IoXG4gICAgYXBwOiBBcHAsXG4gICAgcGx1Z2luOiBQbHVnaW5fMlxuICApIHtcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gIH1cblxuICBkaXNwbGF5KCk6IHZvaWQge1xuICAgIGxldCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgU0VUVElOR1Muc2V0dGluZ3MuZGlzcGxheU9uKGNvbnRhaW5lckVsKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFJlZmVyZW5jZSB9IGZyb20gXCJtb2RlbC9yZWZcIjtcbmltcG9ydCB7IFJlbWluZGVyLCBSZW1pbmRlcnMgfSBmcm9tIFwibW9kZWwvcmVtaW5kZXJcIjtcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcIm1vZGVsL3RpbWVcIjtcbmltcG9ydCB0eXBlIHsgUGx1Z2luXzIgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFNFVFRJTkdTLCBUQUdfUkVTQ0FOIH0gZnJvbSBcInNldHRpbmdzXCI7XG5cbmludGVyZmFjZSBSZW1pbmRlckRhdGEge1xuICB0aXRsZTogc3RyaW5nO1xuICB0aW1lOiBzdHJpbmc7XG4gIHJvd051bWJlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUGx1Z2luRGF0YUlPIHtcblxuICBwcml2YXRlIHJlc3RvcmluZyA9IHRydWU7XG4gIGNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIHNjYW5uZWQ6IFJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBSZWZlcmVuY2UoZmFsc2UpO1xuICBwdWJsaWMgZGVidWc6IFJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBSZWZlcmVuY2UoZmFsc2UpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBQbHVnaW5fMiwgcHJpdmF0ZSByZW1pbmRlcnM6IFJlbWluZGVycykge1xuICAgIFNFVFRJTkdTLmZvckVhY2goc2V0dGluZyA9PiB7XG4gICAgICBzZXR0aW5nLnJhd1ZhbHVlLm9uQ2hhbmdlZCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnJlc3RvcmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZy5oYXNUYWcoVEFHX1JFU0NBTikpIHtcbiAgICAgICAgICB0aGlzLnNjYW5uZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIkxvYWQgcmVtaW5kZXIgcGx1Z2luIGRhdGFcIik7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucGx1Z2luLmxvYWREYXRhKCk7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICB0aGlzLnNjYW5uZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zY2FubmVkLnZhbHVlID0gZGF0YS5zY2FubmVkO1xuICAgIGlmIChkYXRhLmRlYnVnICE9IG51bGwpIHtcbiAgICAgIHRoaXMuZGVidWcudmFsdWUgPSBkYXRhLmRlYnVnO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWRlZFNldHRpbmdzID0gZGF0YS5zZXR0aW5ncztcbiAgICBTRVRUSU5HUy5mb3JFYWNoKHNldHRpbmcgPT4ge1xuICAgICAgc2V0dGluZy5sb2FkKGxvYWRlZFNldHRpbmdzKTtcbiAgICB9KVxuXG4gICAgaWYgKGRhdGEucmVtaW5kZXJzKSB7XG4gICAgICBPYmplY3Qua2V5cyhkYXRhLnJlbWluZGVycykuZm9yRWFjaCgoZmlsZVBhdGgpID0+IHtcbiAgICAgICAgY29uc3QgcmVtaW5kZXJzSW5GaWxlID0gZGF0YS5yZW1pbmRlcnNbZmlsZVBhdGhdIGFzIEFycmF5PFJlbWluZGVyRGF0YT47XG4gICAgICAgIGlmICghcmVtaW5kZXJzSW5GaWxlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtaW5kZXJzLnJlcGxhY2VGaWxlKFxuICAgICAgICAgIGZpbGVQYXRoLFxuICAgICAgICAgIHJlbWluZGVyc0luRmlsZS5tYXAoXG4gICAgICAgICAgICAoZCkgPT5cbiAgICAgICAgICAgICAgbmV3IFJlbWluZGVyKFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoLFxuICAgICAgICAgICAgICAgIGQudGl0bGUsXG4gICAgICAgICAgICAgICAgRGF0ZVRpbWUucGFyc2UoZC50aW1lKSxcbiAgICAgICAgICAgICAgICBkLnJvd051bWJlcixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnJlc3RvcmluZykge1xuICAgICAgdGhpcy5yZXN0b3JpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzYXZlKGZvcmNlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBpZiAoIWZvcmNlICYmICF0aGlzLmNoYW5nZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5kZWJ1ZyhcbiAgICAgIFwiU2F2ZSByZW1pbmRlciBwbHVnaW4gZGF0YTogZm9yY2U9JXMsIGNoYW5nZWQ9JXNcIixcbiAgICAgIGZvcmNlLFxuICAgICAgdGhpcy5jaGFuZ2VkXG4gICAgKTtcbiAgICBjb25zdCByZW1pbmRlcnNEYXRhOiBhbnkgPSB7fTtcbiAgICB0aGlzLnJlbWluZGVycy5maWxlVG9SZW1pbmRlcnMuZm9yRWFjaCgociwgZmlsZVBhdGgpID0+IHtcbiAgICAgIHJlbWluZGVyc0RhdGFbZmlsZVBhdGhdID0gci5tYXAoKHJyKSA9PiAoe1xuICAgICAgICB0aXRsZTogcnIudGl0bGUsXG4gICAgICAgIHRpbWU6IHJyLnRpbWUudG9TdHJpbmcoKSxcbiAgICAgICAgcm93TnVtYmVyOiByci5yb3dOdW1iZXIsXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB7fTtcbiAgICBTRVRUSU5HUy5mb3JFYWNoKHNldHRpbmcgPT4ge1xuICAgICAgc2V0dGluZy5zdG9yZShzZXR0aW5ncyk7XG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh7XG4gICAgICBzY2FubmVkOiB0aGlzLnNjYW5uZWQudmFsdWUsXG4gICAgICByZW1pbmRlcnM6IHJlbWluZGVyc0RhdGEsXG4gICAgICBkZWJ1ZzogdGhpcy5kZWJ1Zy52YWx1ZSxcbiAgICAgIHNldHRpbmdzXG4gICAgfSk7XG4gICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFDQSxZQUFPLFVBQVUsT0FBTyxRQUFRLFdBQVcsS0FBSyxXQUFXLE9BQU87QUFBQTtBQUFBOzs7QUNEbEU7QUFBQTtBQUFBO0FBRUEsV0FBTyxlQUFlLFNBQVMsY0FBYyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBRTVELFFBQUksV0FBVyxRQUFRO0FBRXZCLFFBQU0sNEJBQTRCO0FBQ2xDLFFBQU0sNkJBQTZCO0FBQ25DLFFBQU0sOEJBQThCO0FBQ3BDLFFBQU0sZ0NBQWdDO0FBQ3RDLFFBQU0sNkJBQTZCO0FBRW5DLDRDQUF3QyxhQUFhO0FBWnJEO0FBY0ksWUFBTSxnQkFBZ0IsT0FBTyxJQUFJLFFBQVEsVUFBVSxnQkFBZ0I7QUFDbkUsYUFBTyxpQkFBaUIsMkJBQWMsYUFBZCxtQkFBeUIsaUJBQXpCLG1CQUF1QztBQUFBLElBQ25FO0FBS0EscUNB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
